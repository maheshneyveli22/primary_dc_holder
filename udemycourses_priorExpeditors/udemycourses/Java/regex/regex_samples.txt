1) US Phone number format match:    ^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$

tutorial: 328)  AND or NOT -> 10:00 
#################       
        String phone1 = "1234567890";  // Shouldn't match
        String phone2 = "(123) 456-7890"; // match
        String phone3 = "123 456-7890"; // Shouldn't match
        String phone4 = "(123)456-7890"; // Shouldn't match

        System.out.println("phone1 = " + phone1.matches("^([\\(]{1}[0-9]{3}[\\)]{1}[ ]{1}[0-9]{3}[\\-]{1}[0-9]{4})$"));
        System.out.println("phone2 = " + phone2.matches("^([\\(]{1}[0-9]{3}[\\)]{1}[ ]{1}[0-9]{3}[\\-]{1}[0-9]{4})$"));
        System.out.println("phone3 = " + phone3.matches("^([\\(]{1}[0-9]{3}[\\)]{1}[ ]{1}[0-9]{3}[\\-]{1}[0-9]{4})$"));
        System.out.println("phone4 = " + phone4.matches("^([\\(]{1}[0-9]{3}[\\)]{1}[ ]{1}[0-9]{3}[\\-]{1}[0-9]{4})$"));
###########
O/P:
phone1 = false
phone2 = true
phone3 = false
phone4 = false		


2) Visa Credit card number:  ^4[0-9]{12}([0-9]{3})?$


tutorial: 328)  AND or NOT -> 13:00 
#############
 
        String visa1 = "4444444444444"; // should match
        String visa2 = "5444444444444"; // shouldn't match
        String visa3 = "4444444444444444";  // should match
        String visa4 = "4444";  // shouldn't match

        System.out.println("visa1 " + visa1.matches("^4[0-9]{12}([0-9]{3})?$"));
        System.out.println("visa2 " + visa2.matches("^4[0-9]{12}([0-9]{3})?$"));
        System.out.println("visa3 " + visa3.matches("^4[0-9]{12}([0-9]{3})?$"));
        System.out.println("visa4 " + visa4.matches("^4[0-9]{12}([0-9]{3})?$"));
##############
O/P:
visa1 true
visa2 false
visa3 true
visa4 false


3) Write Regex which will match the string: "I want a bike."

 String challenge1 = "I want a bike.";
        System.out.println(challenge1.matches("I want a bike."));

O/P:
true

4) Write regex that will match "I want a bike." and "I want a ball." 

Solution 1: "I want a \\w+."

######
        String challenge1 = "I want a bike.";
        String regEXp = "I want a \\w+.";
        System.out.println(challenge1.matches(regEXp));
        String challenge2 = "I want a ball.";
        System.out.println(challenge2.matches(regEXp));		
######

-> Here w matches 
i) a-z, both in upper/lower case
ii) 0-9  
iii) underscore _
-> Here + means we need to match one or more characters before the period
-> we need to escape character class in string , hence \\ is there.

Solution 2: Use group


#######
        String challenge1 = "I want a bike.";
        String challenge2 = "I want a ball.";
		
        String regExp1 = "I want a (bike|ball).";
        System.out.println(challenge1.matches(regExp1));
        System.out.println(challenge2.matches(regExp1));
#######
O/P:
true
true



Solution 3: Using Matcher

#########
String challenge1 = "I want a bike.";
        String challenge2 = "I want a ball.";
		
        String regExp3 = "I want a \\w+.";
        Pattern pattern = Pattern.compile(regExp3);
        Matcher matcher = pattern.matcher(challenge1);
        System.out.println(matcher.matches());
        Matcher matcher2 = pattern.matcher(challenge2);
        System.out.println(matcher2.matches());
#############
O/P:
true
true

5) Replace all blanks with underscores.

Two methods:
a) Using: " "
  -> this wont be reliable for tab,new line etc

b) Using:  "\\s" 
 -> broader and reliable solution for all blank spaces

  

######
 String challenge4 = "Replace all blanks with underscores.";
        System.out.println(challenge4.replaceAll(" ", "_"));
        System.out.println(challenge4.replaceAll("\\s", "_"));
###########		
O/P:
Replace_all_blanks_with_underscores.
Replace_all_blanks_with_underscores.

6) Write regEX that will match following string in its entirety. Use String.matches() to verify your answer

Two methods:
a) Using "[abcdefg]+"
b) specifying range: "[a-g]+"

-> here + indicates minimum 1 and more


########
        String challenge5 = "aaabccccccccdddefffg";
        System.out.println(challenge5.matches("[abcdefg]+"));
        System.out.println(challenge5.matches("[a-g]+"));
#######
O/P:
true
true


7) Write regex that will only match String: "aaabccccccccdddefffg" in its entirety

-> meaning this text should match exactly


##########
                String challenge5 = "aaabccccccccdddefffg";
        System.out.println(challenge5.matches("[abcdefg]+"));
        System.out.println(challenge5.replaceAll("[abcdefg]+","REPLACED"));
        System.out.println(challenge5.matches("[a-g]+"));
}
#########
O/P:
true
REPLACED
true

8) 

####
  String challenge7 = "abcd.135";
        System.out.println(challenge7.matches("^[A-z][a-z]+\\.\\d+$"));
#####
O/P:
true

9) Modify regex in previous challenge to use a group, so that we can print all digits that occur in a string that contain multiple occurences of the pattern

########
 String challenge8 = "abcd.135uvqz.7tzik.999";
        Pattern pattern8 = Pattern.compile("[A-Za-z]+\\.(\\d+)");
        Matcher matcher8 = pattern8.matcher(challenge8);
        while(matcher8.find()) {
            System.out.println("Occurrence: " + matcher8.group(1));
        }
#######
O/P:
Occurrence: 135
Occurrence: 7
Occurrence: 999

-> here we specify group(1), since we need only digits
-> To remember: If group(0) means entire string that matches the output as per regex:

eg:

####
 String challenge8 = "abcd.135uvqz.7tzik.999";
        Pattern pattern8 = Pattern.compile("[A-Za-z]+\\.(\\d+)");
        Matcher matcher8 = pattern8.matcher(challenge8);
        while(matcher8.find()) {
            System.out.println("Occurrence: " + matcher8.group(0));
        }
####
O/P:
Occurrence: abcd.135
Occurrence: uvqz.7
Occurrence: tzik.999
		
10) Assume that we are reading strings that match the patterns used in challenges 7,8 from a file. Tabs are used to separate the matches, with one exception that Last match is followed by a newline. 


#######
 String challenge9 = "abcd.135\tuvqz.7\ttzik.999\n";
        Pattern pattern9 = Pattern.compile("[A-Za-z]+\\.(\\d+)\\s");
        Matcher matcher9 = pattern9.matcher(challenge9);
        while(matcher9.find()) {
            System.out.println("Occurrence: " + matcher9.group(1));
        }		
########
O/P:
Occurrence: 135
Occurrence: 7
Occurrence: 999

11) 
Instead of printing out the numbers themselves, print out their start and end indices. Use the same string we used in challenge 9. Make those indices inclusive. 

For eg: the start index printed for 135 should be 5, and the end index should be 7.


##########
 String challenge10 = "abcd.135\tuvqz.7\ttzik.999\n";
        Pattern pattern10 = Pattern.compile("[A-Za-z]+\\.(\\d+)\\s");
        Matcher matcher10 = pattern10.matcher(challenge10);
        while(matcher10.find()) {
            System.out.println("Occurrence: start = " + matcher10.start(1) + " end = " + (matcher10.end(1) -1));
        }		
##########		
O/P;:
Occurrence: start = 5 end = 7
Occurrence: start = 14 end = 14
Occurrence: start = 21 end = 23


12) Suppose we have following string containing points on a graph within curly braces, Extract what's in the curly braces:

-> Here : "\\{(.+?)\\}"  , we are saying that anything within curly braces as a match
-> also . means any character and + means one or more and ? means to tell that as lazy quantifier. lazy quantifier prevents from matching more characters



#########
String challenge11 = "{0, 2}, {0, 5}, {1, 3}, {2, 4}";
        Pattern pattern11 = Pattern.compile("\\{(.+?)\\}");
        Matcher matcher11 = pattern11.matcher(challenge11);
        while(matcher11.find()) {
            System.out.println("Occurrence: " + matcher11.group(1));
        }
        System.out.println("*********************");
########
O/P:
Occurrence: 0, 2
Occurrence: 0, 5
Occurrence: 1, 3
Occurrence: 2, 4
*********************		


13) For only digits between brackets

############
String challenge11a = "{0, 2}, {0, 5}, {1, 3}, {2, 4} {x, y}, {6, 34}, {11, 12}";
        Pattern pattern11a = Pattern.compile("\\{(\\d+, \\d+)\\}");
        Matcher matcher11a = pattern11a.matcher(challenge11a);
        while(matcher11a.find()) {
            System.out.println("Occurrence: " + matcher11a.group(1));
        }
###########
O/P:
Occurrence: 0, 2
Occurrence: 0, 5
Occurrence: 1, 3
Occurrence: 2, 4
Occurrence: 6, 34
Occurrence: 11, 12


14) Write a regex to match a 5 digit US zip code: eg: "11111"

###########		
        String challenge12 = "11111";
        System.out.println(challenge12.matches("^\\d{5}$"));
#############
O/P:
true

15) US zip codes can be followed by a dash and another 4 numbers. write a regex that will match those zip codes. use "11111-1111" as your test string. 

###########
		String challenge13 = "11111-1111";
        System.out.println(challenge13.matches("^\\d{5}-\\d{4}$"));
###########
O/P:
true	

16) write a regex that will match 5 digit us zip codes and zip codes that contain optional 4 digits preceded by a dash. 

-> Here group followed by question mark(?) means zero or one occurences of the group
################# 
        String challenge12 = "11111";
		String challenge13 = "11111-1111";
        System.out.println(challenge12.matches("^\\d{5}(-\\d{4})?$"));
        System.out.println(challenge13.matches("^\\d{5}(-\\d{4})?$"));	
##################	
O/P:
true
true


17) To find and replace new line: regex ="^\r\n"  or "\r\n"
18) To remove whitespaces completely in document: regex="\\s"


	