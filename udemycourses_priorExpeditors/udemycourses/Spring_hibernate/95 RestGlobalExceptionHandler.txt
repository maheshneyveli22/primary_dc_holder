1) Spring @ControllerAdvice
-> @ControllerAdvice is similar to an interceptor/filter
-> Pre-process requests to controllers
-> Post-process responses to handle exceptions
-> Perfect for global exception handling
-> Real time use of AOP

2) Here exception need not be in rest service, instead exception handlers are moved out of rest service and placed in the ControllerAdvice

3) So no need to write exception handlers in Rest service, instead we can place it in one global location to handle all the requests

4) DEVELOPMENT PROCESS

i) Create new @ControllerAdvice

@ControllerAdvice
public class StudentRestExceptionHandler {


ii) Refactor REST service, remove exception handling code


iii) Add Exception handling code to @ControllerAdvice


// add exception handling code here
	
	// Add an exception handler using @ExceptionHandler
	
	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc) {
		
		// create a StudentErrorResponse
		
		StudentErrorResponse error = new StudentErrorResponse();
		
		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		
		// return ResponseEntity
		
		return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
	}
	
	// add another exception handler ... to catch any exception (catch all)
	
	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handleException(Exception exc) {
		
		// create a StudentErrorResponse
		StudentErrorResponse error = new StudentErrorResponse();
		
		error.setStatus(HttpStatus.BAD_REQUEST.value());
		error.setMessage(exc.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		
		// return ResponseEntity		
		return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
	}