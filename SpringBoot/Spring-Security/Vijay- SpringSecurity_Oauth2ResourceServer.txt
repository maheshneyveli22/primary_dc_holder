1) Currently all applications that use auth0 for authentication/authorization depend on auth0 security api jar for decoding the tokens and verifying them 
2) With spring boot3, it uses Spring security 6
3) whereas the security api is still dependant on spring boot 2, which uses spring security 5 and it uses javax for servlet classes
4) While the latest version of spring boot3,uses jakarta for servlet and other classes 
5) This is the major version why we have to move from: security api jar to Oauth2ResourceServer jar, which is a jar that is provided by spring framework itself : for decoding jwt tokens and performing 
authentication/authorization

6) for federated users: ldap credentials
   for non fed users: emailaddress/pwd 
   
7) FLOW:
a) Our client application expo-ui is based on angular 
b) When user tries to login to the application, they get redirected to a token end point or authorization end point, which in turn goes and contacts an authorization server 
c) In exponow - we dont host our authorization server, instead we consume third party provider auth0. 
d) When we provide access details, it is validated across the db that is maintained in the authorization server 
e) After successful validation, server provides us with access token, id token and refresh token 
f) 
i) access token - bearer tokens that we send across payload headers 
ii) id token - helps for identification, we dont use it currently in our application logic
iii) refresh token - for maintaining session timeouts  
-> In our application , tokens are valid upto 15 min in preprod and 1.5 hours in prod 
-> when user is in session for more than 15 min, we have a popup to ask if the user wants to continue with their session 
-> During this time, the refresh token is used to send a request back to the authorization server and that provides us with the new access token and new refresh token 
g) Whenever user makes a graphql request or rest api call for back end calls, a token is sent in header and this is validated in both places: 
   1) graphql router and 2) bookingapi 
h) where does oauth2 resource-server comes into play?
i) in both places graphql router and in bookingapi
ii) It is helpful for decoding jwt token and also for validating the signature 
-> values inside payload is called as claims 
-> url for login:

https://login.dev.test-expeditors.com/login?state=hKFo2SBUcG8tMVlvZE9HVHZPZG5HdEhkb1NWbGRvdnpraUdIMaFupWxvZ2luo3RpZNkgR1ZMaHowUVdCemM5dU9PNXpZVVRLVUhxamNjS3lsWnmjY2lk2SBUS2lBb2k4c2FLajFvQ2czMWl5VEVjYmRVRWhUWDdkMQ&client=TKiAoi8saKj1oCg31iyTEcbdUEhTX7d1&protocol=oauth2&redirect_uri=https%3A%2F%2Fexpo-origin.dev.test-expeditors.com%2Fsession-setup&responseType=token%20id_token&audience=https%3A%2F%2Fexpo-api-dev-expeditors.com&scope=openid%20profile%20email%20offline_access&response_type=code&response_mode=query&nonce=U1F%2BYWtEejBGX1dJLTFYUnZvNFdDbUdvdFRyTVBra2EzQ19rdlA2cVh2bA%3D%3D&code_challenge=LTa339OeVusJfJWmO1gRfwEwlXYgF36VzF0lgWAwRqk&code_challenge_method=S256&auth0Client=eyJuYW1lIjoiQGF1dGgwL2F1dGgwLWFuZ3VsYXIiLCJ2ZXJzaW9uIjoiMS43LjAifQ%3D%3D

Here: login.dev.test-expeditors.com is the custom domain that we have mapped in Oauth application 
j) Everytime a user tries to login, two requests go as part of that:
1) one request : authorize end point call, which validates the credentials that is passed 
2) Second request: token end point call, 
-> In token end point call, the response we get are: a) access_token b) refresh_token c) id_token d) scope 
3) Here if we decode the jwt token ,
-> kid in header is the id, which is helpful to map environments 
-> in payload : "aud": [
    "https://expo-api-dev-expeditors.com",
    "https://dev-test-expeditors.auth0.com/userinfo"
  ]
---> aud is the audience that we are consuming 
---> code flow:
validate;18, AudienceValidator
validate:8, AudienceValidator
validate:59, DelegatingOAuth2TokenValidator
validateJwt:185, NimbusJwtDecoder
decode 138: NimbusJwtDecoder
JwtAuthenticationProvier->getJwt 97
ProviderManager-> authenticate


######
IP token: jwt token taken from session storage under section: access_token 
eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ilh2TzJxenM4T01HdHA3U0tlcjYyXyJ9.eyJodHRwczovL2dvMmV4cG8uZXhwZWRpdG9ycy5jb20vbGFzdExvZ2luIjoiMjAyMy0xMC0wOVQwNDozNDoxMy4yMTlaIiwiaHR0cHM6Ly9nbzJleHBvLmV4cGVkaXRvcnMuY29tL2lzRW1wbG95ZWUiOnRydWUsImh0dHBzOi8vZ28yZXhwby5leHBlZGl0b3JzLmNvbS9lbWFpbCI6Ik1haGVzd2FyYW4uRWx1bWFsYWlAZXhwZWRpdG9ycy5jb20iLCJodHRwczovL2dvMmV4cG8uZXhwZWRpdG9ycy5jb20vYnJhbmNoIjoiR1MxIiwiaHR0cHM6Ly9nbzJleHBvLmV4cGVkaXRvcnMuY29tL2ZhbWlseU5hbWUiOiJFbHVtYWxhaSIsImh0dHBzOi8vZ28yZXhwby5leHBlZGl0b3JzLmNvbS9naXZlbk5hbWUiOiJNYWhlc3dhcmFuIiwiaHR0cHM6Ly9nbzJleHBvLmV4cGVkaXRvcnMuY29tL3Nlc3Npb25FeHBpcnlUaW1lIjoiMjAyMy0xMC0wOVQxNjozMToyNi40OTVaIiwiaHR0cHM6Ly9nbzJleHBvLmV4cGVkaXRvcnMuY29tL3Nlc3Npb25UcmFjZUlkIjoiVFdGb1pYTjNZWEpoYmk1RmJIVnRZV3hoYVE9PUBleHBlZGl0b3JzLmNvbXxnZDZ5N3k0c2N4IiwiaXNzIjoiaHR0cHM6Ly9sb2dpbi5kZXYudGVzdC1leHBlZGl0b3JzLmNvbS8iLCJzdWIiOiJzYW1scHxFeHBlZGl0b3JzfE1haGVzd2FyYW4uRWx1bWFsYWlAZXhwZWRpdG9ycy5jb20iLCJhdWQiOlsiaHR0cHM6Ly9leHBvLWFwaS1kZXYtZXhwZWRpdG9ycy5jb20iLCJodHRwczovL2Rldi10ZXN0LWV4cGVkaXRvcnMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY5NjgyNjA1MywiZXhwIjoxNjk2ODI2OTUzLCJhenAiOiJUS2lBb2k4c2FLajFvQ2czMWl5VEVjYmRVRWhUWDdkMSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgb2ZmbGluZV9hY2Nlc3MifQ.vqUFZlZJ32JCGpEomRdDGag4oWJeYRxKn-av4j8cKx-CR2HqQCZBmvPr6LzmeyHpLuv-fHBQsOB9MLiW-ClqrWKvRHmXA_5D_MkNb2b2-MVczS7iXvpP3lkeKItTX_zlTJZ8rtn4nR__M3yX6GXCsQQiN9ELAu8v9Fc8J98ngigvAUGvEp3HrKuwWKNppMGslwNw4_huwFUB4ZomXMbuulfl9dgUh4xQ6lNdDEXvwlbLfYaW8uMqU-hMaIg59rndWKrBIdIyN3qc-OcqXkfLBlZ7-QiEakbhV1UYw8PxTKV1zEwS1r5Jvq4cGYrt2LOiRGkUwYb4tze06i2HKgDjSw


DECODED:
Header:
{
  "alg": "RS256",
  "typ": "JWT",
  "kid": "XvO2qzs8OMGtp7SKer62_"
}

Payload:
{
  "https://go2expo.expeditors.com/lastLogin": "2023-10-09T04:34:13.219Z",
  "https://go2expo.expeditors.com/isEmployee": true,
  "https://go2expo.expeditors.com/email": "Maheswaran.Elumalai@expeditors.com",
  "https://go2expo.expeditors.com/branch": "GS1",
  "https://go2expo.expeditors.com/familyName": "Elumalai",
  "https://go2expo.expeditors.com/givenName": "Maheswaran",
  "https://go2expo.expeditors.com/sessionExpiryTime": "2023-10-09T16:31:26.495Z",
  "https://go2expo.expeditors.com/sessionTraceId": "TWFoZXN3YXJhbi5FbHVtYWxhaQ==@expeditors.com|gd6y7y4scx",
  "iss": "https://login.dev.test-expeditors.com/",
  "sub": "samlp|Expeditors|Maheswaran.Elumalai@expeditors.com",
  "aud": [
    "https://expo-api-dev-expeditors.com",
    "https://dev-test-expeditors.auth0.com/userinfo"
  ],
  "iat": 1696826053,
  "exp": 1696826953,
  "azp": "TKiAoi8saKj1oCg31iyTEcbdUEhTX7d1",
  "scope": "openid profile email offline_access"
}


Verify Signature:
RSASHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  
{
  "e": "AQAB",
  "kty": "RSA",
  "n": "7-4WqPvM0QprDv77f0q_z5NEFb3RkOkakl299zB-WD-yJaGrjxGMc-yxQNEZ_tnKGOav4fU1_obhlcstr3SS3FmDjIysYMK3wura7cML-iNn9uz3uwqatoQasqqSRCzaWxV93R0DcQZIr9UPuJN7Y9Y2byZmtYaNK_2xogMDtzI0FeAGkN0EY_Hau92pG6BBZeRDHTfcI4Z3mE2iYIRCOglXb3zsXYxSdcH4AfIkNKgpAwLnT5Wcj61vWQnqbprGyz3a-kDwXrubxt_rvFgxsYdMPwy23ogW0gjzeYQGl511RE81kbB2BBmq4mmnMQkxfRArbKv8J99lV74MNVuXSw"
}
,
#############


4) CustomJwtAuthenticationTokenConverter -> convert 
-> native jwt token is not consumed as such by exponow booking application 
-> this has to be loaded with expobook principal
-> CustomJwtAuthenticationTokenConverter converts  and loadExpoBookPrincipal()
5) in loadExpoBookPrincipal different values are set and token is converted to different format 

6) MultiSecurityConfig
->oauth2ResourceServer is configured in MultiSecurityConfig 
-> jwt token can be opaque or transparent 
-> what we use is opaque token, which actually has the data in the claims  
-> whereas non opaque token we use introspection to get data in claims

-> NimbusJwtDecoder jwtDecoder is where, the token is decoded 
-> Open id connector is used as scope for connecting to auth0 servers 

7) .well-known/jwks.json 
-> well known keys 
-> based on kid in token, particular algorithm and deconding public keys are used to decode and validate 


https://login.dev.test-expeditors.com/.well-known/jwks.json

###
{
"keys": [
{
"kty": "RSA",
"use": "sig",
"n": "7-4WqPvM0QprDv77f0q_z5NEFb3RkOkakl299zB-WD-yJaGrjxGMc-yxQNEZ_tnKGOav4fU1_obhlcstr3SS3FmDjIysYMK3wura7cML-iNn9uz3uwqatoQasqqSRCzaWxV93R0DcQZIr9UPuJN7Y9Y2byZmtYaNK_2xogMDtzI0FeAGkN0EY_Hau92pG6BBZeRDHTfcI4Z3mE2iYIRCOglXb3zsXYxSdcH4AfIkNKgpAwLnT5Wcj61vWQnqbprGyz3a-kDwXrubxt_rvFgxsYdMPwy23ogW0gjzeYQGl511RE81kbB2BBmq4mmnMQkxfRArbKv8J99lV74MNVuXSw",
"e": "AQAB",
"kid": "XvO2qzs8OMGtp7SKer62_",
"x5t": "hJmHrVQo7fxzQSQU2fEeXo518ls",
"x5c": [
"MIIDFTCCAf2gAwIBAgIJeaO5UHdsGU/mMA0GCSqGSIb3DQEBCwUAMCgxJjAkBgNVBAMTHWRldi10ZXN0LWV4cGVkaXRvcnMuYXV0aDAuY29tMB4XDTIyMDYxNTE2MTk1NFoXDTM2MDIyMjE2MTk1NFowKDEmMCQGA1UEAxMdZGV2LXRlc3QtZXhwZWRpdG9ycy5hdXRoMC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDv7hao+8zRCmsO/vt/Sr/Pk0QVvdGQ6RqSXb33MH5YP7IloauPEYxz7LFA0Rn+2coY5q/h9TX+huGVyy2vdJLcWYOMjKxgwrfC6trtwwv6I2f27Pe7Cpq2hBqyqpJELNpbFX3dHQNxBkiv1Q+4k3tj1jZvJma1ho0r/bGiAwO3MjQV4AaQ3QRj8dq73akboEFl5EMdN9wjhneYTaJghEI6CVdvfOxdjFJ1wfgB8iQ0qCkDAudPlZyPrW9ZCepumsbLPdr6QPBeu5vG3+u8WDGxh0w/DLbeiBbSCPN5hAaXnXVETzWRsHYEGariaacxCTF9ECtsq/wn32VXvgw1W5dLAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFLIPxpCB83tBhlR/XFDcOIuf1tHKMA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAnumTGaXQtfRB0TE5doYMLn3ngItVxgmVIbcOUM4vri81e2LdRXvB1T2TIqpu1E+PaON2w2tFj3XCQaHU+pWZAPemiQKiXXhD5c+dSMpCwNtDADU71H2hNMCceoX52szf3C4dFAnJOUCNhK3lfFtQM0wMCdwOQUCOwZ2yHWF4zDJ9Ji24EQ+vdt2Vlp/uKW5ZFvfKrMTzAPdmlM6/wsB/tD1yGgU6+Xl9pVuy6YGdPm+tjf0/QjClDh1rT0pPkyJ5xKhRbnVB3uHLdeEXYvKow6IWLKy9K35iEjPGvTZfInLhCl1J54R/TAtmXGAxFBIFHwYahAmhCKGc9rlgNT4u2A=="
],
"alg": "RS256"
},

###

8) So in backend in MultiSecurityConfig, we create a Decoder in the particular issuer , then token is validated across the audience and issuer  and then decoded token is returned back to the application
###
  JwtDecoder jwtDecoder() {
            NimbusJwtDecoder jwtDecoder = (NimbusJwtDecoder)
                    JwtDecoders.fromOidcIssuerLocation(issuer);

            OAuth2TokenValidator<Jwt> audienceValidator = new AudienceValidator(audience);
            OAuth2TokenValidator<Jwt> withIssuer = JwtValidators.createDefaultWithIssuer(issuer);
            OAuth2TokenValidator<Jwt> withAudience = new DelegatingOAuth2TokenValidator<>(withIssuer, audienceValidator);

            jwtDecoder.setJwtValidator(withAudience);

            return jwtDecoder;
        }
###

9) This on the next level is where custom conversion takes place

REFERENCES:
https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html





1) How authorization happens?
a)  Once we click login button, authorize request gets triggered: authorize request happens then we get form to enter email -authorize?
b) once authorize request is hit, we get the sign in form, where we entere our email id and click sign-in 
c) Then it takes to sso page, where we enter username and password for sso 
d)  once we enter sso details , it makes session-setup request, with code 
e) Then using the code,clientid,code_verifier,grant_type,redirect_uri  as payload, we make a token request which goes to: https://login.dev.test-expeditors.com/oauth/token
as a response we get access-token, refresh_token,id_token scope, expires, token_type etc
f) Once we get the access-token, we have logic in session setup page, which writes the token to the local storage  
-> In session-setup.component.ts -> ExpdAuthService , we can see once user is authenticated using this.isAuthenticated, idToken and authUser is set 
-> and then stored in local storage 


Roles authorization:
BookingSecurityAspect.java
AuthorizedRole.java


Links:
http://admin-dev.aeu1.ei/admin
https://jwt.io/
manage.auth0.com/dashboard/us/dev-test-expeditors/users
https://login.dev.test-expeditors.com/oauth/token

autho documentation:
https://auth0.com/docs/quickstart/backend/java-spring-security5/interactive